// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/flightrecorder (interfaces: FileRecorder)
//
// Generated by this command:
//
//	mockgen -typed -package flightrecorder -destination recorder_mock_test.go github.com/juju/juju/internal/worker/flightrecorder FileRecorder
//

// Package flightrecorder is a generated GoMock package.
package flightrecorder

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRecorder is a mock of FileRecorder interface.
type MockFileRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockFileRecorderMockRecorder
}

// MockFileRecorderMockRecorder is the mock recorder for MockFileRecorder.
type MockFileRecorderMockRecorder struct {
	mock *MockFileRecorder
}

// NewMockFileRecorder creates a new mock instance.
func NewMockFileRecorder(ctrl *gomock.Controller) *MockFileRecorder {
	mock := &MockFileRecorder{ctrl: ctrl}
	mock.recorder = &MockFileRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRecorder) EXPECT() *MockFileRecorderMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockFileRecorder) Capture(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockFileRecorderMockRecorder) Capture(arg0 any) *MockFileRecorderCaptureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockFileRecorder)(nil).Capture), arg0)
	return &MockFileRecorderCaptureCall{Call: call}
}

// MockFileRecorderCaptureCall wrap *gomock.Call
type MockFileRecorderCaptureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileRecorderCaptureCall) Return(arg0 string, arg1 error) *MockFileRecorderCaptureCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileRecorderCaptureCall) Do(f func(string) (string, error)) *MockFileRecorderCaptureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileRecorderCaptureCall) DoAndReturn(f func(string) (string, error)) *MockFileRecorderCaptureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockFileRecorder) Start(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockFileRecorderMockRecorder) Start(arg0 any) *MockFileRecorderStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFileRecorder)(nil).Start), arg0)
	return &MockFileRecorderStartCall{Call: call}
}

// MockFileRecorderStartCall wrap *gomock.Call
type MockFileRecorderStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileRecorderStartCall) Return(arg0 error) *MockFileRecorderStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileRecorderStartCall) Do(f func(time.Duration) error) *MockFileRecorderStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileRecorderStartCall) DoAndReturn(f func(time.Duration) error) *MockFileRecorderStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockFileRecorder) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockFileRecorderMockRecorder) Stop() *MockFileRecorderStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFileRecorder)(nil).Stop))
	return &MockFileRecorderStopCall{Call: call}
}

// MockFileRecorderStopCall wrap *gomock.Call
type MockFileRecorderStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileRecorderStopCall) Return(arg0 error) *MockFileRecorderStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileRecorderStopCall) Do(f func() error) *MockFileRecorderStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileRecorderStopCall) DoAndReturn(f func() error) *MockFileRecorderStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
