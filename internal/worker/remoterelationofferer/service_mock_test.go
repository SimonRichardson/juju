// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -typed -package remoterelationofferer -destination service_mock_test.go -source worker.go
//

// Package remoterelationofferer is a generated GoMock package.
package remoterelationofferer

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	gomock "go.uber.org/mock/gomock"
)

// MockReportableWorker is a mock of ReportableWorker interface.
type MockReportableWorker struct {
	ctrl     *gomock.Controller
	recorder *MockReportableWorkerMockRecorder
}

// MockReportableWorkerMockRecorder is the mock recorder for MockReportableWorker.
type MockReportableWorkerMockRecorder struct {
	mock *MockReportableWorker
}

// NewMockReportableWorker creates a new mock instance.
func NewMockReportableWorker(ctrl *gomock.Controller) *MockReportableWorker {
	mock := &MockReportableWorker{ctrl: ctrl}
	mock.recorder = &MockReportableWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportableWorker) EXPECT() *MockReportableWorkerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockReportableWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockReportableWorkerMockRecorder) Kill() *MockReportableWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockReportableWorker)(nil).Kill))
	return &MockReportableWorkerKillCall{Call: call}
}

// MockReportableWorkerKillCall wrap *gomock.Call
type MockReportableWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerKillCall) Return() *MockReportableWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerKillCall) Do(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerKillCall) DoAndReturn(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockReportableWorker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReportableWorkerMockRecorder) Report() *MockReportableWorkerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportableWorker)(nil).Report))
	return &MockReportableWorkerReportCall{Call: call}
}

// MockReportableWorkerReportCall wrap *gomock.Call
type MockReportableWorkerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerReportCall) Return(arg0 map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerReportCall) Do(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerReportCall) DoAndReturn(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockReportableWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockReportableWorkerMockRecorder) Wait() *MockReportableWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockReportableWorker)(nil).Wait))
	return &MockReportableWorkerWaitCall{Call: call}
}

// MockReportableWorkerWaitCall wrap *gomock.Call
type MockReportableWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerWaitCall) Return(arg0 error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerWaitCall) Do(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerWaitCall) DoAndReturn(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConsumerApplicationWorker is a mock of ConsumerApplicationWorker interface.
type MockConsumerApplicationWorker struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerApplicationWorkerMockRecorder
}

// MockConsumerApplicationWorkerMockRecorder is the mock recorder for MockConsumerApplicationWorker.
type MockConsumerApplicationWorkerMockRecorder struct {
	mock *MockConsumerApplicationWorker
}

// NewMockConsumerApplicationWorker creates a new mock instance.
func NewMockConsumerApplicationWorker(ctrl *gomock.Controller) *MockConsumerApplicationWorker {
	mock := &MockConsumerApplicationWorker{ctrl: ctrl}
	mock.recorder = &MockConsumerApplicationWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerApplicationWorker) EXPECT() *MockConsumerApplicationWorkerMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method.
func (m *MockConsumerApplicationWorker) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockConsumerApplicationWorkerMockRecorder) ApplicationName() *MockConsumerApplicationWorkerApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockConsumerApplicationWorker)(nil).ApplicationName))
	return &MockConsumerApplicationWorkerApplicationNameCall{Call: call}
}

// MockConsumerApplicationWorkerApplicationNameCall wrap *gomock.Call
type MockConsumerApplicationWorkerApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConsumerApplicationWorkerApplicationNameCall) Return(arg0 string) *MockConsumerApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConsumerApplicationWorkerApplicationNameCall) Do(f func() string) *MockConsumerApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConsumerApplicationWorkerApplicationNameCall) DoAndReturn(f func() string) *MockConsumerApplicationWorkerApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumeVersion mocks base method.
func (m *MockConsumerApplicationWorker) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockConsumerApplicationWorkerMockRecorder) ConsumeVersion() *MockConsumerApplicationWorkerConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockConsumerApplicationWorker)(nil).ConsumeVersion))
	return &MockConsumerApplicationWorkerConsumeVersionCall{Call: call}
}

// MockConsumerApplicationWorkerConsumeVersionCall wrap *gomock.Call
type MockConsumerApplicationWorkerConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConsumerApplicationWorkerConsumeVersionCall) Return(arg0 int) *MockConsumerApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConsumerApplicationWorkerConsumeVersionCall) Do(f func() int) *MockConsumerApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConsumerApplicationWorkerConsumeVersionCall) DoAndReturn(f func() int) *MockConsumerApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockConsumerApplicationWorker) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockConsumerApplicationWorkerMockRecorder) OfferUUID() *MockConsumerApplicationWorkerOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockConsumerApplicationWorker)(nil).OfferUUID))
	return &MockConsumerApplicationWorkerOfferUUIDCall{Call: call}
}

// MockConsumerApplicationWorkerOfferUUIDCall wrap *gomock.Call
type MockConsumerApplicationWorkerOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConsumerApplicationWorkerOfferUUIDCall) Return(arg0 string) *MockConsumerApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConsumerApplicationWorkerOfferUUIDCall) Do(f func() string) *MockConsumerApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConsumerApplicationWorkerOfferUUIDCall) DoAndReturn(f func() string) *MockConsumerApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelService is a mock of CrossModelService interface.
type MockCrossModelService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelServiceMockRecorder
}

// MockCrossModelServiceMockRecorder is the mock recorder for MockCrossModelService.
type MockCrossModelServiceMockRecorder struct {
	mock *MockCrossModelService
}

// NewMockCrossModelService creates a new mock instance.
func NewMockCrossModelService(ctrl *gomock.Controller) *MockCrossModelService {
	mock := &MockCrossModelService{ctrl: ctrl}
	mock.recorder = &MockCrossModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelService) EXPECT() *MockCrossModelServiceMockRecorder {
	return m.recorder
}

// GetRemoteApplicationConsumers mocks base method.
func (m *MockCrossModelService) GetRemoteApplicationConsumers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationConsumers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationConsumers indicates an expected call of GetRemoteApplicationConsumers.
func (mr *MockCrossModelServiceMockRecorder) GetRemoteApplicationConsumers(arg0 any) *MockCrossModelServiceGetRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationConsumers", reflect.TypeOf((*MockCrossModelService)(nil).GetRemoteApplicationConsumers), arg0)
	return &MockCrossModelServiceGetRemoteApplicationConsumersCall{Call: call}
}

// MockCrossModelServiceGetRemoteApplicationConsumersCall wrap *gomock.Call
type MockCrossModelServiceGetRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceGetRemoteApplicationConsumersCall) Return(arg0 []crossmodelrelation.RemoteApplicationConsumer, arg1 error) *MockCrossModelServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceGetRemoteApplicationConsumersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockCrossModelServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceGetRemoteApplicationConsumersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockCrossModelServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteApplicationConsumers mocks base method.
func (m *MockCrossModelService) WatchRemoteApplicationConsumers(ctx context.Context) (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteApplicationConsumers", ctx)
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteApplicationConsumers indicates an expected call of WatchRemoteApplicationConsumers.
func (mr *MockCrossModelServiceMockRecorder) WatchRemoteApplicationConsumers(ctx any) *MockCrossModelServiceWatchRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteApplicationConsumers", reflect.TypeOf((*MockCrossModelService)(nil).WatchRemoteApplicationConsumers), ctx)
	return &MockCrossModelServiceWatchRemoteApplicationConsumersCall{Call: call}
}

// MockCrossModelServiceWatchRemoteApplicationConsumersCall wrap *gomock.Call
type MockCrossModelServiceWatchRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceWatchRemoteApplicationConsumersCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockCrossModelServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceWatchRemoteApplicationConsumersCall) Do(f func(context.Context) (watcher.NotifyWatcher, error)) *MockCrossModelServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceWatchRemoteApplicationConsumersCall) DoAndReturn(f func(context.Context) (watcher.NotifyWatcher, error)) *MockCrossModelServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
