// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -typed -package remoterelationofferer -destination service_mock_test.go -source worker.go
//

// Package remoterelationofferer is a generated GoMock package.
package remoterelationofferer

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	gomock "go.uber.org/mock/gomock"
)

// MockReportableWorker is a mock of ReportableWorker interface.
type MockReportableWorker struct {
	ctrl     *gomock.Controller
	recorder *MockReportableWorkerMockRecorder
}

// MockReportableWorkerMockRecorder is the mock recorder for MockReportableWorker.
type MockReportableWorkerMockRecorder struct {
	mock *MockReportableWorker
}

// NewMockReportableWorker creates a new mock instance.
func NewMockReportableWorker(ctrl *gomock.Controller) *MockReportableWorker {
	mock := &MockReportableWorker{ctrl: ctrl}
	mock.recorder = &MockReportableWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportableWorker) EXPECT() *MockReportableWorkerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockReportableWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockReportableWorkerMockRecorder) Kill() *MockReportableWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockReportableWorker)(nil).Kill))
	return &MockReportableWorkerKillCall{Call: call}
}

// MockReportableWorkerKillCall wrap *gomock.Call
type MockReportableWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerKillCall) Return() *MockReportableWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerKillCall) Do(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerKillCall) DoAndReturn(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockReportableWorker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReportableWorkerMockRecorder) Report() *MockReportableWorkerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportableWorker)(nil).Report))
	return &MockReportableWorkerReportCall{Call: call}
}

// MockReportableWorkerReportCall wrap *gomock.Call
type MockReportableWorkerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerReportCall) Return(arg0 map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerReportCall) Do(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerReportCall) DoAndReturn(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockReportableWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockReportableWorkerMockRecorder) Wait() *MockReportableWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockReportableWorker)(nil).Wait))
	return &MockReportableWorkerWaitCall{Call: call}
}

// MockReportableWorkerWaitCall wrap *gomock.Call
type MockReportableWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerWaitCall) Return(arg0 error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerWaitCall) Do(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerWaitCall) DoAndReturn(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplicationWorker is a mock of RemoteApplicationWorker interface.
type MockRemoteApplicationWorker struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationWorkerMockRecorder
}

// MockRemoteApplicationWorkerMockRecorder is the mock recorder for MockRemoteApplicationWorker.
type MockRemoteApplicationWorkerMockRecorder struct {
	mock *MockRemoteApplicationWorker
}

// NewMockRemoteApplicationWorker creates a new mock instance.
func NewMockRemoteApplicationWorker(ctrl *gomock.Controller) *MockRemoteApplicationWorker {
	mock := &MockRemoteApplicationWorker{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplicationWorker) EXPECT() *MockRemoteApplicationWorkerMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method.
func (m *MockRemoteApplicationWorker) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockRemoteApplicationWorkerMockRecorder) ApplicationName() *MockRemoteApplicationWorkerApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).ApplicationName))
	return &MockRemoteApplicationWorkerApplicationNameCall{Call: call}
}

// MockRemoteApplicationWorkerApplicationNameCall wrap *gomock.Call
type MockRemoteApplicationWorkerApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerApplicationNameCall) Return(arg0 string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerApplicationNameCall) Do(f func() string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerApplicationNameCall) DoAndReturn(f func() string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumeVersion mocks base method.
func (m *MockRemoteApplicationWorker) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockRemoteApplicationWorkerMockRecorder) ConsumeVersion() *MockRemoteApplicationWorkerConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).ConsumeVersion))
	return &MockRemoteApplicationWorkerConsumeVersionCall{Call: call}
}

// MockRemoteApplicationWorkerConsumeVersionCall wrap *gomock.Call
type MockRemoteApplicationWorkerConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerConsumeVersionCall) Return(arg0 int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerConsumeVersionCall) Do(f func() int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerConsumeVersionCall) DoAndReturn(f func() int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockRemoteApplicationWorker) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockRemoteApplicationWorkerMockRecorder) OfferUUID() *MockRemoteApplicationWorkerOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).OfferUUID))
	return &MockRemoteApplicationWorkerOfferUUIDCall{Call: call}
}

// MockRemoteApplicationWorkerOfferUUIDCall wrap *gomock.Call
type MockRemoteApplicationWorkerOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerOfferUUIDCall) Return(arg0 string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerOfferUUIDCall) Do(f func() string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerOfferUUIDCall) DoAndReturn(f func() string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// GetRemoteApplicationConsumers mocks base method.
func (m *MockCrossModelRelationService) GetRemoteApplicationConsumers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationConsumers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationConsumers indicates an expected call of GetRemoteApplicationConsumers.
func (mr *MockCrossModelRelationServiceMockRecorder) GetRemoteApplicationConsumers(arg0 any) *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationConsumers", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetRemoteApplicationConsumers), arg0)
	return &MockCrossModelRelationServiceGetRemoteApplicationConsumersCall{Call: call}
}

// MockCrossModelRelationServiceGetRemoteApplicationConsumersCall wrap *gomock.Call
type MockCrossModelRelationServiceGetRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall) Return(arg0 []crossmodelrelation.RemoteApplicationConsumer, arg1 error) *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockCrossModelRelationServiceGetRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteApplicationConsumers mocks base method.
func (m *MockCrossModelRelationService) WatchRemoteApplicationConsumers(ctx context.Context) (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteApplicationConsumers", ctx)
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteApplicationConsumers indicates an expected call of WatchRemoteApplicationConsumers.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRemoteApplicationConsumers(ctx any) *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteApplicationConsumers", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRemoteApplicationConsumers), ctx)
	return &MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall{Call: call}
}

// MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall) Do(f func(context.Context) (watcher.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall) DoAndReturn(f func(context.Context) (watcher.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
