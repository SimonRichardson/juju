// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiremoterelationcaller (interfaces: APIRemoteCallerGetter)
//
// Generated by this command:
//
//	mockgen -typed -package remoterelationconsumer -destination remote_relation_caller_mock_test.go github.com/juju/juju/internal/worker/apiremoterelationcaller APIRemoteCallerGetter
//

// Package remoterelationconsumer is a generated GoMock package.
package remoterelationconsumer

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/api"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIRemoteCallerGetter is a mock of APIRemoteCallerGetter interface.
type MockAPIRemoteCallerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIRemoteCallerGetterMockRecorder
}

// MockAPIRemoteCallerGetterMockRecorder is the mock recorder for MockAPIRemoteCallerGetter.
type MockAPIRemoteCallerGetterMockRecorder struct {
	mock *MockAPIRemoteCallerGetter
}

// NewMockAPIRemoteCallerGetter creates a new mock instance.
func NewMockAPIRemoteCallerGetter(ctrl *gomock.Controller) *MockAPIRemoteCallerGetter {
	mock := &MockAPIRemoteCallerGetter{ctrl: ctrl}
	mock.recorder = &MockAPIRemoteCallerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIRemoteCallerGetter) EXPECT() *MockAPIRemoteCallerGetterMockRecorder {
	return m.recorder
}

// GetConnectionForModel mocks base method.
func (m *MockAPIRemoteCallerGetter) GetConnectionForModel(arg0 context.Context, arg1 model.UUID) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionForModel", arg0, arg1)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionForModel indicates an expected call of GetConnectionForModel.
func (mr *MockAPIRemoteCallerGetterMockRecorder) GetConnectionForModel(arg0, arg1 any) *MockAPIRemoteCallerGetterGetConnectionForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionForModel", reflect.TypeOf((*MockAPIRemoteCallerGetter)(nil).GetConnectionForModel), arg0, arg1)
	return &MockAPIRemoteCallerGetterGetConnectionForModelCall{Call: call}
}

// MockAPIRemoteCallerGetterGetConnectionForModelCall wrap *gomock.Call
type MockAPIRemoteCallerGetterGetConnectionForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIRemoteCallerGetterGetConnectionForModelCall) Return(arg0 api.Connection, arg1 error) *MockAPIRemoteCallerGetterGetConnectionForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIRemoteCallerGetterGetConnectionForModelCall) Do(f func(context.Context, model.UUID) (api.Connection, error)) *MockAPIRemoteCallerGetterGetConnectionForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIRemoteCallerGetterGetConnectionForModelCall) DoAndReturn(f func(context.Context, model.UUID) (api.Connection, error)) *MockAPIRemoteCallerGetterGetConnectionForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
