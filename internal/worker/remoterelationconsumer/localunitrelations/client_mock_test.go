// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -typed -package localunitrelations -destination client_mock_test.go -source worker.go
//

// Package localunitrelations is a generated GoMock package.
package localunitrelations

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	watcher "github.com/juju/juju/core/watcher"
	relation "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetRelationUnits mocks base method.
func (m *MockService) GetRelationUnits(arg0 context.Context, arg1 application.UUID) (relation.RelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(relation.RelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnits indicates an expected call of GetRelationUnits.
func (mr *MockServiceMockRecorder) GetRelationUnits(arg0, arg1 any) *MockServiceGetRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnits", reflect.TypeOf((*MockService)(nil).GetRelationUnits), arg0, arg1)
	return &MockServiceGetRelationUnitsCall{Call: call}
}

// MockServiceGetRelationUnitsCall wrap *gomock.Call
type MockServiceGetRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetRelationUnitsCall) Return(arg0 relation.RelationUnitChange, arg1 error) *MockServiceGetRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetRelationUnitsCall) Do(f func(context.Context, application.UUID) (relation.RelationUnitChange, error)) *MockServiceGetRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetRelationUnitsCall) DoAndReturn(f func(context.Context, application.UUID) (relation.RelationUnitChange, error)) *MockServiceGetRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationUnits mocks base method.
func (m *MockService) WatchRelationUnits(arg0 context.Context, arg1 application.UUID) (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationUnits indicates an expected call of WatchRelationUnits.
func (mr *MockServiceMockRecorder) WatchRelationUnits(arg0, arg1 any) *MockServiceWatchRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationUnits", reflect.TypeOf((*MockService)(nil).WatchRelationUnits), arg0, arg1)
	return &MockServiceWatchRelationUnitsCall{Call: call}
}

// MockServiceWatchRelationUnitsCall wrap *gomock.Call
type MockServiceWatchRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceWatchRelationUnitsCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockServiceWatchRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceWatchRelationUnitsCall) Do(f func(context.Context, application.UUID) (watcher.NotifyWatcher, error)) *MockServiceWatchRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceWatchRelationUnitsCall) DoAndReturn(f func(context.Context, application.UUID) (watcher.NotifyWatcher, error)) *MockServiceWatchRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReportableWorker is a mock of ReportableWorker interface.
type MockReportableWorker struct {
	ctrl     *gomock.Controller
	recorder *MockReportableWorkerMockRecorder
}

// MockReportableWorkerMockRecorder is the mock recorder for MockReportableWorker.
type MockReportableWorkerMockRecorder struct {
	mock *MockReportableWorker
}

// NewMockReportableWorker creates a new mock instance.
func NewMockReportableWorker(ctrl *gomock.Controller) *MockReportableWorker {
	mock := &MockReportableWorker{ctrl: ctrl}
	mock.recorder = &MockReportableWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportableWorker) EXPECT() *MockReportableWorkerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockReportableWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockReportableWorkerMockRecorder) Kill() *MockReportableWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockReportableWorker)(nil).Kill))
	return &MockReportableWorkerKillCall{Call: call}
}

// MockReportableWorkerKillCall wrap *gomock.Call
type MockReportableWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerKillCall) Return() *MockReportableWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerKillCall) Do(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerKillCall) DoAndReturn(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockReportableWorker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReportableWorkerMockRecorder) Report() *MockReportableWorkerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportableWorker)(nil).Report))
	return &MockReportableWorkerReportCall{Call: call}
}

// MockReportableWorkerReportCall wrap *gomock.Call
type MockReportableWorkerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerReportCall) Return(arg0 map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerReportCall) Do(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerReportCall) DoAndReturn(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockReportableWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockReportableWorkerMockRecorder) Wait() *MockReportableWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockReportableWorker)(nil).Wait))
	return &MockReportableWorkerWaitCall{Call: call}
}

// MockReportableWorkerWaitCall wrap *gomock.Call
type MockReportableWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerWaitCall) Return(arg0 error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerWaitCall) Do(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerWaitCall) DoAndReturn(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
