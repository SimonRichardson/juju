// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -typed -package remoterelationconsumer -destination service_mock_test.go -source worker.go
//

// Package remoterelationconsumer is a generated GoMock package.
package remoterelationconsumer

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/api/watcher"
	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	watcher0 "github.com/juju/juju/core/watcher"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	relation0 "github.com/juju/juju/domain/relation"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockReportableWorker is a mock of ReportableWorker interface.
type MockReportableWorker struct {
	ctrl     *gomock.Controller
	recorder *MockReportableWorkerMockRecorder
}

// MockReportableWorkerMockRecorder is the mock recorder for MockReportableWorker.
type MockReportableWorkerMockRecorder struct {
	mock *MockReportableWorker
}

// NewMockReportableWorker creates a new mock instance.
func NewMockReportableWorker(ctrl *gomock.Controller) *MockReportableWorker {
	mock := &MockReportableWorker{ctrl: ctrl}
	mock.recorder = &MockReportableWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportableWorker) EXPECT() *MockReportableWorkerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockReportableWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockReportableWorkerMockRecorder) Kill() *MockReportableWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockReportableWorker)(nil).Kill))
	return &MockReportableWorkerKillCall{Call: call}
}

// MockReportableWorkerKillCall wrap *gomock.Call
type MockReportableWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerKillCall) Return() *MockReportableWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerKillCall) Do(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerKillCall) DoAndReturn(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockReportableWorker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReportableWorkerMockRecorder) Report() *MockReportableWorkerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportableWorker)(nil).Report))
	return &MockReportableWorkerReportCall{Call: call}
}

// MockReportableWorkerReportCall wrap *gomock.Call
type MockReportableWorkerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerReportCall) Return(arg0 map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerReportCall) Do(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerReportCall) DoAndReturn(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockReportableWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockReportableWorkerMockRecorder) Wait() *MockReportableWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockReportableWorker)(nil).Wait))
	return &MockReportableWorkerWaitCall{Call: call}
}

// MockReportableWorkerWaitCall wrap *gomock.Call
type MockReportableWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerWaitCall) Return(arg0 error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerWaitCall) Do(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerWaitCall) DoAndReturn(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOffererApplicationWorker is a mock of OffererApplicationWorker interface.
type MockOffererApplicationWorker struct {
	ctrl     *gomock.Controller
	recorder *MockOffererApplicationWorkerMockRecorder
}

// MockOffererApplicationWorkerMockRecorder is the mock recorder for MockOffererApplicationWorker.
type MockOffererApplicationWorkerMockRecorder struct {
	mock *MockOffererApplicationWorker
}

// NewMockOffererApplicationWorker creates a new mock instance.
func NewMockOffererApplicationWorker(ctrl *gomock.Controller) *MockOffererApplicationWorker {
	mock := &MockOffererApplicationWorker{ctrl: ctrl}
	mock.recorder = &MockOffererApplicationWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffererApplicationWorker) EXPECT() *MockOffererApplicationWorkerMockRecorder {
	return m.recorder
}

// ConsumeVersion mocks base method.
func (m *MockOffererApplicationWorker) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockOffererApplicationWorkerMockRecorder) ConsumeVersion() *MockOffererApplicationWorkerConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockOffererApplicationWorker)(nil).ConsumeVersion))
	return &MockOffererApplicationWorkerConsumeVersionCall{Call: call}
}

// MockOffererApplicationWorkerConsumeVersionCall wrap *gomock.Call
type MockOffererApplicationWorkerConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOffererApplicationWorkerConsumeVersionCall) Return(arg0 int) *MockOffererApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOffererApplicationWorkerConsumeVersionCall) Do(f func() int) *MockOffererApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOffererApplicationWorkerConsumeVersionCall) DoAndReturn(f func() int) *MockOffererApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteModelRelationsClient is a mock of RemoteModelRelationsClient interface.
type MockRemoteModelRelationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteModelRelationsClientMockRecorder
}

// MockRemoteModelRelationsClientMockRecorder is the mock recorder for MockRemoteModelRelationsClient.
type MockRemoteModelRelationsClientMockRecorder struct {
	mock *MockRemoteModelRelationsClient
}

// NewMockRemoteModelRelationsClient creates a new mock instance.
func NewMockRemoteModelRelationsClient(ctrl *gomock.Controller) *MockRemoteModelRelationsClient {
	mock := &MockRemoteModelRelationsClient{ctrl: ctrl}
	mock.recorder = &MockRemoteModelRelationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteModelRelationsClient) EXPECT() *MockRemoteModelRelationsClientMockRecorder {
	return m.recorder
}

// PublishRelationChange mocks base method.
func (m *MockRemoteModelRelationsClient) PublishRelationChange(arg0 context.Context, arg1 params.RemoteRelationChangeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRelationChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRelationChange indicates an expected call of PublishRelationChange.
func (mr *MockRemoteModelRelationsClientMockRecorder) PublishRelationChange(arg0, arg1 any) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRelationChange", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).PublishRelationChange), arg0, arg1)
	return &MockRemoteModelRelationsClientPublishRelationChangeCall{Call: call}
}

// MockRemoteModelRelationsClientPublishRelationChangeCall wrap *gomock.Call
type MockRemoteModelRelationsClientPublishRelationChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) Return(arg0 error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) Do(f func(context.Context, params.RemoteRelationChangeEvent) error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) DoAndReturn(f func(context.Context, params.RemoteRelationChangeEvent) error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterRemoteRelations mocks base method.
func (m *MockRemoteModelRelationsClient) RegisterRemoteRelations(arg0 context.Context, relations ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range relations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRemoteRelations", varargs...)
	ret0, _ := ret[0].([]params.RegisterRemoteRelationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRemoteRelations indicates an expected call of RegisterRemoteRelations.
func (mr *MockRemoteModelRelationsClientMockRecorder) RegisterRemoteRelations(arg0 any, relations ...any) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, relations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRemoteRelations", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).RegisterRemoteRelations), varargs...)
	return &MockRemoteModelRelationsClientRegisterRemoteRelationsCall{Call: call}
}

// MockRemoteModelRelationsClientRegisterRemoteRelationsCall wrap *gomock.Call
type MockRemoteModelRelationsClientRegisterRemoteRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) Return(arg0 []params.RegisterRemoteRelationResult, arg1 error) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) Do(f func(context.Context, ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error)) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) DoAndReturn(f func(context.Context, ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error)) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConsumedSecretsChanges mocks base method.
func (m *MockRemoteModelRelationsClient) WatchConsumedSecretsChanges(ctx context.Context, applicationToken, relationToken string, mac *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumedSecretsChanges", ctx, applicationToken, relationToken, mac)
	ret0, _ := ret[0].(watcher0.SecretsRevisionWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumedSecretsChanges indicates an expected call of WatchConsumedSecretsChanges.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchConsumedSecretsChanges(ctx, applicationToken, relationToken, mac any) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumedSecretsChanges", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchConsumedSecretsChanges), ctx, applicationToken, relationToken, mac)
	return &MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall{Call: call}
}

// MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) Return(arg0 watcher0.SecretsRevisionWatcher, arg1 error) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) Do(f func(context.Context, string, string, *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error)) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) DoAndReturn(f func(context.Context, string, string, *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error)) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOfferStatus mocks base method.
func (m *MockRemoteModelRelationsClient) WatchOfferStatus(arg0 context.Context, arg params.OfferArg) (watcher0.OfferStatusWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOfferStatus", arg0, arg)
	ret0, _ := ret[0].(watcher0.OfferStatusWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferStatus indicates an expected call of WatchOfferStatus.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchOfferStatus(arg0, arg any) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferStatus", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchOfferStatus), arg0, arg)
	return &MockRemoteModelRelationsClientWatchOfferStatusCall{Call: call}
}

// MockRemoteModelRelationsClientWatchOfferStatusCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) Return(arg0 watcher0.OfferStatusWatcher, arg1 error) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) Do(f func(context.Context, params.OfferArg) (watcher0.OfferStatusWatcher, error)) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) DoAndReturn(f func(context.Context, params.OfferArg) (watcher0.OfferStatusWatcher, error)) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationChanges mocks base method.
func (m *MockRemoteModelRelationsClient) WatchRelationChanges(arg0 context.Context, relationToken, applicationToken string, macs macaroon.Slice) (watcher.RemoteRelationWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationChanges", arg0, relationToken, applicationToken, macs)
	ret0, _ := ret[0].(watcher.RemoteRelationWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationChanges indicates an expected call of WatchRelationChanges.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchRelationChanges(arg0, relationToken, applicationToken, macs any) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationChanges", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchRelationChanges), arg0, relationToken, applicationToken, macs)
	return &MockRemoteModelRelationsClientWatchRelationChangesCall{Call: call}
}

// MockRemoteModelRelationsClientWatchRelationChangesCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchRelationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) Return(arg0 watcher.RemoteRelationWatcher, arg1 error) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) Do(f func(context.Context, string, string, macaroon.Slice) (watcher.RemoteRelationWatcher, error)) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) DoAndReturn(f func(context.Context, string, string, macaroon.Slice) (watcher.RemoteRelationWatcher, error)) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationSuspendedStatus mocks base method.
func (m *MockRemoteModelRelationsClient) WatchRelationSuspendedStatus(arg0 context.Context, arg params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationSuspendedStatus", arg0, arg)
	ret0, _ := ret[0].(watcher0.RelationStatusWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationSuspendedStatus indicates an expected call of WatchRelationSuspendedStatus.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchRelationSuspendedStatus(arg0, arg any) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationSuspendedStatus", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchRelationSuspendedStatus), arg0, arg)
	return &MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall{Call: call}
}

// MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) Return(arg0 watcher0.RelationStatusWatcher, arg1 error) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) Do(f func(context.Context, params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error)) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) DoAndReturn(f func(context.Context, params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error)) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelService is a mock of CrossModelService interface.
type MockCrossModelService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelServiceMockRecorder
}

// MockCrossModelServiceMockRecorder is the mock recorder for MockCrossModelService.
type MockCrossModelServiceMockRecorder struct {
	mock *MockCrossModelService
}

// NewMockCrossModelService creates a new mock instance.
func NewMockCrossModelService(ctrl *gomock.Controller) *MockCrossModelService {
	mock := &MockCrossModelService{ctrl: ctrl}
	mock.recorder = &MockCrossModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelService) EXPECT() *MockCrossModelServiceMockRecorder {
	return m.recorder
}

// ConsumeRemoteSecretChanges mocks base method.
func (m *MockCrossModelService) ConsumeRemoteSecretChanges(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRemoteSecretChanges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRemoteSecretChanges indicates an expected call of ConsumeRemoteSecretChanges.
func (mr *MockCrossModelServiceMockRecorder) ConsumeRemoteSecretChanges(arg0 any) *MockCrossModelServiceConsumeRemoteSecretChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRemoteSecretChanges", reflect.TypeOf((*MockCrossModelService)(nil).ConsumeRemoteSecretChanges), arg0)
	return &MockCrossModelServiceConsumeRemoteSecretChangesCall{Call: call}
}

// MockCrossModelServiceConsumeRemoteSecretChangesCall wrap *gomock.Call
type MockCrossModelServiceConsumeRemoteSecretChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceConsumeRemoteSecretChangesCall) Return(arg0 error) *MockCrossModelServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceConsumeRemoteSecretChangesCall) Do(f func(context.Context) error) *MockCrossModelServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceConsumeRemoteSecretChangesCall) DoAndReturn(f func(context.Context) error) *MockCrossModelServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockCrossModelService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockCrossModelServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockCrossModelServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockCrossModelService)(nil).GetRelationDetails), arg0, arg1)
	return &MockCrossModelServiceGetRelationDetailsCall{Call: call}
}

// MockCrossModelServiceGetRelationDetailsCall wrap *gomock.Call
type MockCrossModelServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockCrossModelServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockCrossModelServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockCrossModelServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnits mocks base method.
func (m *MockCrossModelService) GetRelationUnits(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.RelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnits indicates an expected call of GetRelationUnits.
func (mr *MockCrossModelServiceMockRecorder) GetRelationUnits(arg0, arg1, arg2 any) *MockCrossModelServiceGetRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnits", reflect.TypeOf((*MockCrossModelService)(nil).GetRelationUnits), arg0, arg1, arg2)
	return &MockCrossModelServiceGetRelationUnitsCall{Call: call}
}

// MockCrossModelServiceGetRelationUnitsCall wrap *gomock.Call
type MockCrossModelServiceGetRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceGetRelationUnitsCall) Return(arg0 relation0.RelationUnitChange, arg1 error) *MockCrossModelServiceGetRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceGetRelationUnitsCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockCrossModelServiceGetRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceGetRelationUnitsCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockCrossModelServiceGetRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOfferers mocks base method.
func (m *MockCrossModelService) GetRemoteApplicationOfferers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOfferers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationOfferer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOfferers indicates an expected call of GetRemoteApplicationOfferers.
func (mr *MockCrossModelServiceMockRecorder) GetRemoteApplicationOfferers(arg0 any) *MockCrossModelServiceGetRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOfferers", reflect.TypeOf((*MockCrossModelService)(nil).GetRemoteApplicationOfferers), arg0)
	return &MockCrossModelServiceGetRemoteApplicationOfferersCall{Call: call}
}

// MockCrossModelServiceGetRemoteApplicationOfferersCall wrap *gomock.Call
type MockCrossModelServiceGetRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceGetRemoteApplicationOfferersCall) Return(arg0 []crossmodelrelation.RemoteApplicationOfferer, arg1 error) *MockCrossModelServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceGetRemoteApplicationOfferersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockCrossModelServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceGetRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockCrossModelServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessRelationChange mocks base method.
func (m *MockCrossModelService) ProcessRelationChange(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRelationChange", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRelationChange indicates an expected call of ProcessRelationChange.
func (mr *MockCrossModelServiceMockRecorder) ProcessRelationChange(arg0 any) *MockCrossModelServiceProcessRelationChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRelationChange", reflect.TypeOf((*MockCrossModelService)(nil).ProcessRelationChange), arg0)
	return &MockCrossModelServiceProcessRelationChangeCall{Call: call}
}

// MockCrossModelServiceProcessRelationChangeCall wrap *gomock.Call
type MockCrossModelServiceProcessRelationChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceProcessRelationChangeCall) Return(arg0 error) *MockCrossModelServiceProcessRelationChangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceProcessRelationChangeCall) Do(f func(context.Context) error) *MockCrossModelServiceProcessRelationChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceProcessRelationChangeCall) DoAndReturn(f func(context.Context) error) *MockCrossModelServiceProcessRelationChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMacaroonForRelation mocks base method.
func (m *MockCrossModelService) SaveMacaroonForRelation(arg0 context.Context, arg1 relation.UUID, arg2 *macaroon.Macaroon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMacaroonForRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMacaroonForRelation indicates an expected call of SaveMacaroonForRelation.
func (mr *MockCrossModelServiceMockRecorder) SaveMacaroonForRelation(arg0, arg1, arg2 any) *MockCrossModelServiceSaveMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMacaroonForRelation", reflect.TypeOf((*MockCrossModelService)(nil).SaveMacaroonForRelation), arg0, arg1, arg2)
	return &MockCrossModelServiceSaveMacaroonForRelationCall{Call: call}
}

// MockCrossModelServiceSaveMacaroonForRelationCall wrap *gomock.Call
type MockCrossModelServiceSaveMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceSaveMacaroonForRelationCall) Return(arg0 error) *MockCrossModelServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceSaveMacaroonForRelationCall) Do(f func(context.Context, relation.UUID, *macaroon.Macaroon) error) *MockCrossModelServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceSaveMacaroonForRelationCall) DoAndReturn(f func(context.Context, relation.UUID, *macaroon.Macaroon) error) *MockCrossModelServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRemoteApplicationOffererStatus mocks base method.
func (m *MockCrossModelService) SetRemoteApplicationOffererStatus(ctx context.Context, appName string, sts status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteApplicationOffererStatus", ctx, appName, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteApplicationOffererStatus indicates an expected call of SetRemoteApplicationOffererStatus.
func (mr *MockCrossModelServiceMockRecorder) SetRemoteApplicationOffererStatus(ctx, appName, sts any) *MockCrossModelServiceSetRemoteApplicationOffererStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteApplicationOffererStatus", reflect.TypeOf((*MockCrossModelService)(nil).SetRemoteApplicationOffererStatus), ctx, appName, sts)
	return &MockCrossModelServiceSetRemoteApplicationOffererStatusCall{Call: call}
}

// MockCrossModelServiceSetRemoteApplicationOffererStatusCall wrap *gomock.Call
type MockCrossModelServiceSetRemoteApplicationOffererStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceSetRemoteApplicationOffererStatusCall) Return(arg0 error) *MockCrossModelServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceSetRemoteApplicationOffererStatusCall) Do(f func(context.Context, string, status.StatusInfo) error) *MockCrossModelServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceSetRemoteApplicationOffererStatusCall) DoAndReturn(f func(context.Context, string, status.StatusInfo) error) *MockCrossModelServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SuspendRelation mocks base method.
func (m *MockCrossModelService) SuspendRelation(ctx context.Context, appUUID application.UUID, relUUID relation.UUID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendRelation", ctx, appUUID, relUUID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendRelation indicates an expected call of SuspendRelation.
func (mr *MockCrossModelServiceMockRecorder) SuspendRelation(ctx, appUUID, relUUID, reason any) *MockCrossModelServiceSuspendRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendRelation", reflect.TypeOf((*MockCrossModelService)(nil).SuspendRelation), ctx, appUUID, relUUID, reason)
	return &MockCrossModelServiceSuspendRelationCall{Call: call}
}

// MockCrossModelServiceSuspendRelationCall wrap *gomock.Call
type MockCrossModelServiceSuspendRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceSuspendRelationCall) Return(arg0 error) *MockCrossModelServiceSuspendRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceSuspendRelationCall) Do(f func(context.Context, application.UUID, relation.UUID, string) error) *MockCrossModelServiceSuspendRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceSuspendRelationCall) DoAndReturn(f func(context.Context, application.UUID, relation.UUID, string) error) *MockCrossModelServiceSuspendRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationLifeSuspendedStatus mocks base method.
func (m *MockCrossModelService) WatchApplicationLifeSuspendedStatus(arg0 context.Context, arg1 application.UUID) (watcher0.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(watcher0.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationLifeSuspendedStatus indicates an expected call of WatchApplicationLifeSuspendedStatus.
func (mr *MockCrossModelServiceMockRecorder) WatchApplicationLifeSuspendedStatus(arg0, arg1 any) *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationLifeSuspendedStatus", reflect.TypeOf((*MockCrossModelService)(nil).WatchApplicationLifeSuspendedStatus), arg0, arg1)
	return &MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall{Call: call}
}

// MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall wrap *gomock.Call
type MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall) Return(arg0 watcher0.StringsWatcher, arg1 error) *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall) Do(f func(context.Context, application.UUID) (watcher0.StringsWatcher, error)) *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, application.UUID) (watcher0.StringsWatcher, error)) *MockCrossModelServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationUnits mocks base method.
func (m *MockCrossModelService) WatchRelationUnits(arg0 context.Context, arg1 application.UUID) (watcher0.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(watcher0.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationUnits indicates an expected call of WatchRelationUnits.
func (mr *MockCrossModelServiceMockRecorder) WatchRelationUnits(arg0, arg1 any) *MockCrossModelServiceWatchRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationUnits", reflect.TypeOf((*MockCrossModelService)(nil).WatchRelationUnits), arg0, arg1)
	return &MockCrossModelServiceWatchRelationUnitsCall{Call: call}
}

// MockCrossModelServiceWatchRelationUnitsCall wrap *gomock.Call
type MockCrossModelServiceWatchRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceWatchRelationUnitsCall) Return(arg0 watcher0.NotifyWatcher, arg1 error) *MockCrossModelServiceWatchRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceWatchRelationUnitsCall) Do(f func(context.Context, application.UUID) (watcher0.NotifyWatcher, error)) *MockCrossModelServiceWatchRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceWatchRelationUnitsCall) DoAndReturn(f func(context.Context, application.UUID) (watcher0.NotifyWatcher, error)) *MockCrossModelServiceWatchRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteApplicationOfferers mocks base method.
func (m *MockCrossModelService) WatchRemoteApplicationOfferers(ctx context.Context) (watcher0.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteApplicationOfferers", ctx)
	ret0, _ := ret[0].(watcher0.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteApplicationOfferers indicates an expected call of WatchRemoteApplicationOfferers.
func (mr *MockCrossModelServiceMockRecorder) WatchRemoteApplicationOfferers(ctx any) *MockCrossModelServiceWatchRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteApplicationOfferers", reflect.TypeOf((*MockCrossModelService)(nil).WatchRemoteApplicationOfferers), ctx)
	return &MockCrossModelServiceWatchRemoteApplicationOfferersCall{Call: call}
}

// MockCrossModelServiceWatchRemoteApplicationOfferersCall wrap *gomock.Call
type MockCrossModelServiceWatchRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelServiceWatchRemoteApplicationOfferersCall) Return(arg0 watcher0.NotifyWatcher, arg1 error) *MockCrossModelServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelServiceWatchRemoteApplicationOfferersCall) Do(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelServiceWatchRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnits mocks base method.
func (m *MockRelationService) GetRelationUnits(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.RelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnits indicates an expected call of GetRelationUnits.
func (mr *MockRelationServiceMockRecorder) GetRelationUnits(arg0, arg1, arg2 any) *MockRelationServiceGetRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnits", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnits), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationUnitsCall{Call: call}
}

// MockRelationServiceGetRelationUnitsCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitsCall) Return(arg0 relation0.RelationUnitChange, arg1 error) *MockRelationServiceGetRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitsCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockRelationServiceGetRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitsCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockRelationServiceGetRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationLifeSuspendedStatus mocks base method.
func (m *MockRelationService) WatchApplicationLifeSuspendedStatus(arg0 context.Context, arg1 application.UUID) (watcher0.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(watcher0.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationLifeSuspendedStatus indicates an expected call of WatchApplicationLifeSuspendedStatus.
func (mr *MockRelationServiceMockRecorder) WatchApplicationLifeSuspendedStatus(arg0, arg1 any) *MockRelationServiceWatchApplicationLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationLifeSuspendedStatus", reflect.TypeOf((*MockRelationService)(nil).WatchApplicationLifeSuspendedStatus), arg0, arg1)
	return &MockRelationServiceWatchApplicationLifeSuspendedStatusCall{Call: call}
}

// MockRelationServiceWatchApplicationLifeSuspendedStatusCall wrap *gomock.Call
type MockRelationServiceWatchApplicationLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchApplicationLifeSuspendedStatusCall) Return(arg0 watcher0.StringsWatcher, arg1 error) *MockRelationServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchApplicationLifeSuspendedStatusCall) Do(f func(context.Context, application.UUID) (watcher0.StringsWatcher, error)) *MockRelationServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchApplicationLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, application.UUID) (watcher0.StringsWatcher, error)) *MockRelationServiceWatchApplicationLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationUnits mocks base method.
func (m *MockRelationService) WatchRelationUnits(arg0 context.Context, arg1 application.UUID) (watcher0.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(watcher0.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationUnits indicates an expected call of WatchRelationUnits.
func (mr *MockRelationServiceMockRecorder) WatchRelationUnits(arg0, arg1 any) *MockRelationServiceWatchRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationUnits", reflect.TypeOf((*MockRelationService)(nil).WatchRelationUnits), arg0, arg1)
	return &MockRelationServiceWatchRelationUnitsCall{Call: call}
}

// MockRelationServiceWatchRelationUnitsCall wrap *gomock.Call
type MockRelationServiceWatchRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchRelationUnitsCall) Return(arg0 watcher0.NotifyWatcher, arg1 error) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchRelationUnitsCall) Do(f func(context.Context, application.UUID) (watcher0.NotifyWatcher, error)) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchRelationUnitsCall) DoAndReturn(f func(context.Context, application.UUID) (watcher0.NotifyWatcher, error)) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// ConsumeRemoteSecretChanges mocks base method.
func (m *MockCrossModelRelationService) ConsumeRemoteSecretChanges(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRemoteSecretChanges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRemoteSecretChanges indicates an expected call of ConsumeRemoteSecretChanges.
func (mr *MockCrossModelRelationServiceMockRecorder) ConsumeRemoteSecretChanges(arg0 any) *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRemoteSecretChanges", reflect.TypeOf((*MockCrossModelRelationService)(nil).ConsumeRemoteSecretChanges), arg0)
	return &MockCrossModelRelationServiceConsumeRemoteSecretChangesCall{Call: call}
}

// MockCrossModelRelationServiceConsumeRemoteSecretChangesCall wrap *gomock.Call
type MockCrossModelRelationServiceConsumeRemoteSecretChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall) Return(arg0 error) *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall) Do(f func(context.Context) error) *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall) DoAndReturn(f func(context.Context) error) *MockCrossModelRelationServiceConsumeRemoteSecretChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOfferers mocks base method.
func (m *MockCrossModelRelationService) GetRemoteApplicationOfferers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOfferers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationOfferer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOfferers indicates an expected call of GetRemoteApplicationOfferers.
func (mr *MockCrossModelRelationServiceMockRecorder) GetRemoteApplicationOfferers(arg0 any) *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOfferers", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetRemoteApplicationOfferers), arg0)
	return &MockCrossModelRelationServiceGetRemoteApplicationOfferersCall{Call: call}
}

// MockCrossModelRelationServiceGetRemoteApplicationOfferersCall wrap *gomock.Call
type MockCrossModelRelationServiceGetRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall) Return(arg0 []crossmodelrelation.RemoteApplicationOfferer, arg1 error) *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockCrossModelRelationServiceGetRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessRelationChange mocks base method.
func (m *MockCrossModelRelationService) ProcessRelationChange(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRelationChange", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRelationChange indicates an expected call of ProcessRelationChange.
func (mr *MockCrossModelRelationServiceMockRecorder) ProcessRelationChange(arg0 any) *MockCrossModelRelationServiceProcessRelationChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRelationChange", reflect.TypeOf((*MockCrossModelRelationService)(nil).ProcessRelationChange), arg0)
	return &MockCrossModelRelationServiceProcessRelationChangeCall{Call: call}
}

// MockCrossModelRelationServiceProcessRelationChangeCall wrap *gomock.Call
type MockCrossModelRelationServiceProcessRelationChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceProcessRelationChangeCall) Return(arg0 error) *MockCrossModelRelationServiceProcessRelationChangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceProcessRelationChangeCall) Do(f func(context.Context) error) *MockCrossModelRelationServiceProcessRelationChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceProcessRelationChangeCall) DoAndReturn(f func(context.Context) error) *MockCrossModelRelationServiceProcessRelationChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMacaroonForRelation mocks base method.
func (m *MockCrossModelRelationService) SaveMacaroonForRelation(arg0 context.Context, arg1 relation.UUID, arg2 *macaroon.Macaroon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMacaroonForRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMacaroonForRelation indicates an expected call of SaveMacaroonForRelation.
func (mr *MockCrossModelRelationServiceMockRecorder) SaveMacaroonForRelation(arg0, arg1, arg2 any) *MockCrossModelRelationServiceSaveMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMacaroonForRelation", reflect.TypeOf((*MockCrossModelRelationService)(nil).SaveMacaroonForRelation), arg0, arg1, arg2)
	return &MockCrossModelRelationServiceSaveMacaroonForRelationCall{Call: call}
}

// MockCrossModelRelationServiceSaveMacaroonForRelationCall wrap *gomock.Call
type MockCrossModelRelationServiceSaveMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceSaveMacaroonForRelationCall) Return(arg0 error) *MockCrossModelRelationServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceSaveMacaroonForRelationCall) Do(f func(context.Context, relation.UUID, *macaroon.Macaroon) error) *MockCrossModelRelationServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceSaveMacaroonForRelationCall) DoAndReturn(f func(context.Context, relation.UUID, *macaroon.Macaroon) error) *MockCrossModelRelationServiceSaveMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SuspendRelation mocks base method.
func (m *MockCrossModelRelationService) SuspendRelation(ctx context.Context, appUUID application.UUID, relUUID relation.UUID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendRelation", ctx, appUUID, relUUID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendRelation indicates an expected call of SuspendRelation.
func (mr *MockCrossModelRelationServiceMockRecorder) SuspendRelation(ctx, appUUID, relUUID, reason any) *MockCrossModelRelationServiceSuspendRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendRelation", reflect.TypeOf((*MockCrossModelRelationService)(nil).SuspendRelation), ctx, appUUID, relUUID, reason)
	return &MockCrossModelRelationServiceSuspendRelationCall{Call: call}
}

// MockCrossModelRelationServiceSuspendRelationCall wrap *gomock.Call
type MockCrossModelRelationServiceSuspendRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceSuspendRelationCall) Return(arg0 error) *MockCrossModelRelationServiceSuspendRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceSuspendRelationCall) Do(f func(context.Context, application.UUID, relation.UUID, string) error) *MockCrossModelRelationServiceSuspendRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceSuspendRelationCall) DoAndReturn(f func(context.Context, application.UUID, relation.UUID, string) error) *MockCrossModelRelationServiceSuspendRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteApplicationOfferers mocks base method.
func (m *MockCrossModelRelationService) WatchRemoteApplicationOfferers(ctx context.Context) (watcher0.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteApplicationOfferers", ctx)
	ret0, _ := ret[0].(watcher0.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteApplicationOfferers indicates an expected call of WatchRemoteApplicationOfferers.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRemoteApplicationOfferers(ctx any) *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteApplicationOfferers", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRemoteApplicationOfferers), ctx)
	return &MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall{Call: call}
}

// MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall) Return(arg0 watcher0.NotifyWatcher, arg1 error) *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall) Do(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// SetRemoteApplicationOffererStatus mocks base method.
func (m *MockStatusService) SetRemoteApplicationOffererStatus(ctx context.Context, appName string, sts status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteApplicationOffererStatus", ctx, appName, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteApplicationOffererStatus indicates an expected call of SetRemoteApplicationOffererStatus.
func (mr *MockStatusServiceMockRecorder) SetRemoteApplicationOffererStatus(ctx, appName, sts any) *MockStatusServiceSetRemoteApplicationOffererStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteApplicationOffererStatus", reflect.TypeOf((*MockStatusService)(nil).SetRemoteApplicationOffererStatus), ctx, appName, sts)
	return &MockStatusServiceSetRemoteApplicationOffererStatusCall{Call: call}
}

// MockStatusServiceSetRemoteApplicationOffererStatusCall wrap *gomock.Call
type MockStatusServiceSetRemoteApplicationOffererStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetRemoteApplicationOffererStatusCall) Return(arg0 error) *MockStatusServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetRemoteApplicationOffererStatusCall) Do(f func(context.Context, string, status.StatusInfo) error) *MockStatusServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetRemoteApplicationOffererStatusCall) DoAndReturn(f func(context.Context, string, status.StatusInfo) error) *MockStatusServiceSetRemoteApplicationOffererStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
