// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/firewaller (interfaces: MachineService,PortService,ApplicationService,CrossModelRelationService,RelationService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/domain_mocks.go github.com/juju/juju/internal/worker/firewaller MachineService,PortService,ApplicationService,CrossModelRelationService,RelationService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	relation "github.com/juju/juju/core/relation"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	application "github.com/juju/juju/domain/application"
	relation0 "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPortService is a mock of PortService interface.
type MockPortService struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceMockRecorder
}

// MockPortServiceMockRecorder is the mock recorder for MockPortService.
type MockPortServiceMockRecorder struct {
	mock *MockPortService
}

// NewMockPortService creates a new mock instance.
func NewMockPortService(ctrl *gomock.Controller) *MockPortService {
	mock := &MockPortService{ctrl: ctrl}
	mock.recorder = &MockPortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService) EXPECT() *MockPortServiceMockRecorder {
	return m.recorder
}

// GetMachineOpenedPorts mocks base method.
func (m *MockPortService) GetMachineOpenedPorts(arg0 context.Context, arg1 string) (map[unit.Name]network.GroupedPortRanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineOpenedPorts", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]network.GroupedPortRanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineOpenedPorts indicates an expected call of GetMachineOpenedPorts.
func (mr *MockPortServiceMockRecorder) GetMachineOpenedPorts(arg0, arg1 any) *MockPortServiceGetMachineOpenedPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineOpenedPorts", reflect.TypeOf((*MockPortService)(nil).GetMachineOpenedPorts), arg0, arg1)
	return &MockPortServiceGetMachineOpenedPortsCall{Call: call}
}

// MockPortServiceGetMachineOpenedPortsCall wrap *gomock.Call
type MockPortServiceGetMachineOpenedPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortServiceGetMachineOpenedPortsCall) Return(arg0 map[unit.Name]network.GroupedPortRanges, arg1 error) *MockPortServiceGetMachineOpenedPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortServiceGetMachineOpenedPortsCall) Do(f func(context.Context, string) (map[unit.Name]network.GroupedPortRanges, error)) *MockPortServiceGetMachineOpenedPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortServiceGetMachineOpenedPortsCall) DoAndReturn(f func(context.Context, string) (map[unit.Name]network.GroupedPortRanges, error)) *MockPortServiceGetMachineOpenedPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineOpenedPorts mocks base method.
func (m *MockPortService) WatchMachineOpenedPorts(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineOpenedPorts", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineOpenedPorts indicates an expected call of WatchMachineOpenedPorts.
func (mr *MockPortServiceMockRecorder) WatchMachineOpenedPorts(arg0 any) *MockPortServiceWatchMachineOpenedPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineOpenedPorts", reflect.TypeOf((*MockPortService)(nil).WatchMachineOpenedPorts), arg0)
	return &MockPortServiceWatchMachineOpenedPortsCall{Call: call}
}

// MockPortServiceWatchMachineOpenedPortsCall wrap *gomock.Call
type MockPortServiceWatchMachineOpenedPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortServiceWatchMachineOpenedPortsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockPortServiceWatchMachineOpenedPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortServiceWatchMachineOpenedPortsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockPortServiceWatchMachineOpenedPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortServiceWatchMachineOpenedPortsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockPortServiceWatchMachineOpenedPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetExposedEndpoints mocks base method.
func (m *MockApplicationService) GetExposedEndpoints(arg0 context.Context, arg1 string) (map[string]application.ExposedEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedEndpoints", arg0, arg1)
	ret0, _ := ret[0].(map[string]application.ExposedEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedEndpoints indicates an expected call of GetExposedEndpoints.
func (mr *MockApplicationServiceMockRecorder) GetExposedEndpoints(arg0, arg1 any) *MockApplicationServiceGetExposedEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedEndpoints", reflect.TypeOf((*MockApplicationService)(nil).GetExposedEndpoints), arg0, arg1)
	return &MockApplicationServiceGetExposedEndpointsCall{Call: call}
}

// MockApplicationServiceGetExposedEndpointsCall wrap *gomock.Call
type MockApplicationServiceGetExposedEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetExposedEndpointsCall) Return(arg0 map[string]application.ExposedEndpoint, arg1 error) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetExposedEndpointsCall) Do(f func(context.Context, string) (map[string]application.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetExposedEndpointsCall) DoAndReturn(f func(context.Context, string) (map[string]application.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitMachineName mocks base method.
func (m *MockApplicationService) GetUnitMachineName(arg0 context.Context, arg1 unit.Name) (machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineName", arg0, arg1)
	ret0, _ := ret[0].(machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineName indicates an expected call of GetUnitMachineName.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineName(arg0, arg1 any) *MockApplicationServiceGetUnitMachineNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineName", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineName), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineNameCall{Call: call}
}

// MockApplicationServiceGetUnitMachineNameCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineNameCall) Return(arg0 machine.Name, arg1 error) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineNameCall) Do(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineNameCall) DoAndReturn(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsApplicationExposed mocks base method.
func (m *MockApplicationService) IsApplicationExposed(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationExposed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApplicationExposed indicates an expected call of IsApplicationExposed.
func (mr *MockApplicationServiceMockRecorder) IsApplicationExposed(arg0, arg1 any) *MockApplicationServiceIsApplicationExposedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationExposed", reflect.TypeOf((*MockApplicationService)(nil).IsApplicationExposed), arg0, arg1)
	return &MockApplicationServiceIsApplicationExposedCall{Call: call}
}

// MockApplicationServiceIsApplicationExposedCall wrap *gomock.Call
type MockApplicationServiceIsApplicationExposedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsApplicationExposedCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsApplicationExposedCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsApplicationExposedCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationExposed mocks base method.
func (m *MockApplicationService) WatchApplicationExposed(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationExposed", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationExposed indicates an expected call of WatchApplicationExposed.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationExposed(arg0, arg1 any) *MockApplicationServiceWatchApplicationExposedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationExposed", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationExposed), arg0, arg1)
	return &MockApplicationServiceWatchApplicationExposedCall{Call: call}
}

// MockApplicationServiceWatchApplicationExposedCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationExposedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationExposedCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationExposedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationExposedCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationExposedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationExposedCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationExposedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitAddRemoveOnMachine mocks base method.
func (m *MockApplicationService) WatchUnitAddRemoveOnMachine(arg0 context.Context, arg1 machine.Name) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitAddRemoveOnMachine", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitAddRemoveOnMachine indicates an expected call of WatchUnitAddRemoveOnMachine.
func (mr *MockApplicationServiceMockRecorder) WatchUnitAddRemoveOnMachine(arg0, arg1 any) *MockApplicationServiceWatchUnitAddRemoveOnMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitAddRemoveOnMachine", reflect.TypeOf((*MockApplicationService)(nil).WatchUnitAddRemoveOnMachine), arg0, arg1)
	return &MockApplicationServiceWatchUnitAddRemoveOnMachineCall{Call: call}
}

// MockApplicationServiceWatchUnitAddRemoveOnMachineCall wrap *gomock.Call
type MockApplicationServiceWatchUnitAddRemoveOnMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchUnitAddRemoveOnMachineCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchUnitAddRemoveOnMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchUnitAddRemoveOnMachineCall) Do(f func(context.Context, machine.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitAddRemoveOnMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchUnitAddRemoveOnMachineCall) DoAndReturn(f func(context.Context, machine.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitAddRemoveOnMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// GetMacaroonForRelation mocks base method.
func (m *MockCrossModelRelationService) GetMacaroonForRelation(arg0 context.Context, arg1 relation.UUID) (*macaroon.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacaroonForRelation", arg0, arg1)
	ret0, _ := ret[0].(*macaroon.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacaroonForRelation indicates an expected call of GetMacaroonForRelation.
func (mr *MockCrossModelRelationServiceMockRecorder) GetMacaroonForRelation(arg0, arg1 any) *MockCrossModelRelationServiceGetMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacaroonForRelation", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetMacaroonForRelation), arg0, arg1)
	return &MockCrossModelRelationServiceGetMacaroonForRelationCall{Call: call}
}

// MockCrossModelRelationServiceGetMacaroonForRelationCall wrap *gomock.Call
type MockCrossModelRelationServiceGetMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetMacaroonForRelationCall) Return(arg0 *macaroon.Macaroon, arg1 error) *MockCrossModelRelationServiceGetMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetMacaroonForRelationCall) Do(f func(context.Context, relation.UUID) (*macaroon.Macaroon, error)) *MockCrossModelRelationServiceGetMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetMacaroonForRelationCall) DoAndReturn(f func(context.Context, relation.UUID) (*macaroon.Macaroon, error)) *MockCrossModelRelationServiceGetMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOffererModelUUID mocks base method.
func (m *MockCrossModelRelationService) GetOffererModelUUID(arg0 context.Context, arg1 string) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffererModelUUID", arg0, arg1)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffererModelUUID indicates an expected call of GetOffererModelUUID.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOffererModelUUID(arg0, arg1 any) *MockCrossModelRelationServiceGetOffererModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffererModelUUID", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOffererModelUUID), arg0, arg1)
	return &MockCrossModelRelationServiceGetOffererModelUUIDCall{Call: call}
}

// MockCrossModelRelationServiceGetOffererModelUUIDCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOffererModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOffererModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockCrossModelRelationServiceGetOffererModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOffererModelUUIDCall) Do(f func(context.Context, string) (model.UUID, error)) *MockCrossModelRelationServiceGetOffererModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOffererModelUUIDCall) DoAndReturn(f func(context.Context, string) (model.UUID, error)) *MockCrossModelRelationServiceGetOffererModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationNetworkIngress mocks base method.
func (m *MockCrossModelRelationService) GetRelationNetworkIngress(arg0 context.Context, arg1 relation.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationNetworkIngress", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationNetworkIngress indicates an expected call of GetRelationNetworkIngress.
func (mr *MockCrossModelRelationServiceMockRecorder) GetRelationNetworkIngress(arg0, arg1 any) *MockCrossModelRelationServiceGetRelationNetworkIngressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationNetworkIngress", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetRelationNetworkIngress), arg0, arg1)
	return &MockCrossModelRelationServiceGetRelationNetworkIngressCall{Call: call}
}

// MockCrossModelRelationServiceGetRelationNetworkIngressCall wrap *gomock.Call
type MockCrossModelRelationServiceGetRelationNetworkIngressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetRelationNetworkIngressCall) Return(arg0 []string, arg1 error) *MockCrossModelRelationServiceGetRelationNetworkIngressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetRelationNetworkIngressCall) Do(f func(context.Context, relation.UUID) ([]string, error)) *MockCrossModelRelationServiceGetRelationNetworkIngressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetRelationNetworkIngressCall) DoAndReturn(f func(context.Context, relation.UUID) ([]string, error)) *MockCrossModelRelationServiceGetRelationNetworkIngressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsApplicationLocal mocks base method.
func (m *MockCrossModelRelationService) IsApplicationLocal(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationLocal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApplicationLocal indicates an expected call of IsApplicationLocal.
func (mr *MockCrossModelRelationServiceMockRecorder) IsApplicationLocal(arg0, arg1 any) *MockCrossModelRelationServiceIsApplicationLocalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationLocal", reflect.TypeOf((*MockCrossModelRelationService)(nil).IsApplicationLocal), arg0, arg1)
	return &MockCrossModelRelationServiceIsApplicationLocalCall{Call: call}
}

// MockCrossModelRelationServiceIsApplicationLocalCall wrap *gomock.Call
type MockCrossModelRelationServiceIsApplicationLocalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceIsApplicationLocalCall) Return(arg0 bool, arg1 error) *MockCrossModelRelationServiceIsApplicationLocalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceIsApplicationLocalCall) Do(f func(context.Context, string) (bool, error)) *MockCrossModelRelationServiceIsApplicationLocalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceIsApplicationLocalCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockCrossModelRelationServiceIsApplicationLocalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConsumerRelations mocks base method.
func (m *MockCrossModelRelationService) WatchConsumerRelations(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumerRelations", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumerRelations indicates an expected call of WatchConsumerRelations.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchConsumerRelations(arg0 any) *MockCrossModelRelationServiceWatchConsumerRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumerRelations", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchConsumerRelations), arg0)
	return &MockCrossModelRelationServiceWatchConsumerRelationsCall{Call: call}
}

// MockCrossModelRelationServiceWatchConsumerRelationsCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchConsumerRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchConsumerRelationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelRelationServiceWatchConsumerRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchConsumerRelationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchConsumerRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchConsumerRelationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchConsumerRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOffererRelations mocks base method.
func (m *MockCrossModelRelationService) WatchOffererRelations(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOffererRelations", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOffererRelations indicates an expected call of WatchOffererRelations.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchOffererRelations(arg0 any) *MockCrossModelRelationServiceWatchOffererRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOffererRelations", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchOffererRelations), arg0)
	return &MockCrossModelRelationServiceWatchOffererRelationsCall{Call: call}
}

// MockCrossModelRelationServiceWatchOffererRelationsCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchOffererRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchOffererRelationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelRelationServiceWatchOffererRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchOffererRelationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchOffererRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchOffererRelationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchOffererRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationEgressNetworks mocks base method.
func (m *MockCrossModelRelationService) WatchRelationEgressNetworks(arg0 context.Context, arg1 relation.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationEgressNetworks", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationEgressNetworks indicates an expected call of WatchRelationEgressNetworks.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRelationEgressNetworks(arg0, arg1 any) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationEgressNetworks", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRelationEgressNetworks), arg0, arg1)
	return &MockCrossModelRelationServiceWatchRelationEgressNetworksCall{Call: call}
}

// MockCrossModelRelationServiceWatchRelationEgressNetworksCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRelationEgressNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) Do(f func(context.Context, relation.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) DoAndReturn(f func(context.Context, relation.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationIngressNetworks mocks base method.
func (m *MockCrossModelRelationService) WatchRelationIngressNetworks(arg0 context.Context, arg1 relation.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationIngressNetworks", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationIngressNetworks indicates an expected call of WatchRelationIngressNetworks.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRelationIngressNetworks(arg0, arg1 any) *MockCrossModelRelationServiceWatchRelationIngressNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationIngressNetworks", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRelationIngressNetworks), arg0, arg1)
	return &MockCrossModelRelationServiceWatchRelationIngressNetworksCall{Call: call}
}

// MockCrossModelRelationServiceWatchRelationIngressNetworksCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRelationIngressNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRelationIngressNetworksCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockCrossModelRelationServiceWatchRelationIngressNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRelationIngressNetworksCall) Do(f func(context.Context, relation.UUID) (watcher.Watcher[struct{}], error)) *MockCrossModelRelationServiceWatchRelationIngressNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRelationIngressNetworksCall) DoAndReturn(f func(context.Context, relation.UUID) (watcher.Watcher[struct{}], error)) *MockCrossModelRelationServiceWatchRelationIngressNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByKey mocks base method.
func (m *MockRelationService) GetRelationUUIDByKey(arg0 context.Context, arg1 relation.Key) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByKey", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByKey indicates an expected call of GetRelationUUIDByKey.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDByKey(arg0, arg1 any) *MockRelationServiceGetRelationUUIDByKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByKey", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDByKey), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDByKeyCall{Call: call}
}

// MockRelationServiceGetRelationUUIDByKeyCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDByKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDByKeyCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDByKeyCall) Do(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDByKeyCall) DoAndReturn(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationErrorStatus mocks base method.
func (m *MockRelationService) SetRelationErrorStatus(arg0 context.Context, arg1 relation.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationErrorStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationErrorStatus indicates an expected call of SetRelationErrorStatus.
func (mr *MockRelationServiceMockRecorder) SetRelationErrorStatus(arg0, arg1, arg2 any) *MockRelationServiceSetRelationErrorStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationErrorStatus", reflect.TypeOf((*MockRelationService)(nil).SetRelationErrorStatus), arg0, arg1, arg2)
	return &MockRelationServiceSetRelationErrorStatusCall{Call: call}
}

// MockRelationServiceSetRelationErrorStatusCall wrap *gomock.Call
type MockRelationServiceSetRelationErrorStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceSetRelationErrorStatusCall) Return(arg0 error) *MockRelationServiceSetRelationErrorStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceSetRelationErrorStatusCall) Do(f func(context.Context, relation.UUID, string) error) *MockRelationServiceSetRelationErrorStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceSetRelationErrorStatusCall) DoAndReturn(f func(context.Context, relation.UUID, string) error) *MockRelationServiceSetRelationErrorStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
