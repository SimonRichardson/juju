// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: ApplicationOps)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/ops_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner ApplicationOps
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	clock "github.com/juju/clock"
	caas "github.com/juju/juju/caas"
	application "github.com/juju/juju/core/application"
	life "github.com/juju/juju/core/life"
	logger "github.com/juju/juju/core/logger"
	caasapplicationprovisioner "github.com/juju/juju/internal/worker/caasapplicationprovisioner"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationOps is a mock of ApplicationOps interface.
type MockApplicationOps struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOpsMockRecorder
}

// MockApplicationOpsMockRecorder is the mock recorder for MockApplicationOps.
type MockApplicationOpsMockRecorder struct {
	mock *MockApplicationOps
}

// NewMockApplicationOps creates a new mock instance.
func NewMockApplicationOps(ctrl *gomock.Controller) *MockApplicationOps {
	mock := &MockApplicationOps{ctrl: ctrl}
	mock.recorder = &MockApplicationOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOps) EXPECT() *MockApplicationOpsMockRecorder {
	return m.recorder
}

// AppAlive mocks base method.
func (m *MockApplicationOps) AppAlive(arg0 context.Context, arg1 string, arg2 caas.Application, arg3 string, arg4 *caas.ApplicationConfig, arg5 *caasapplicationprovisioner.ProvisioningInfo, arg6 caasapplicationprovisioner.StatusService, arg7 clock.Clock, arg8 logger.Logger, arg9 application.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppAlive", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppAlive indicates an expected call of AppAlive.
func (mr *MockApplicationOpsMockRecorder) AppAlive(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *MockApplicationOpsAppAliveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppAlive", reflect.TypeOf((*MockApplicationOps)(nil).AppAlive), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	return &MockApplicationOpsAppAliveCall{Call: call}
}

// MockApplicationOpsAppAliveCall wrap *gomock.Call
type MockApplicationOpsAppAliveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsAppAliveCall) Return(arg0 error) *MockApplicationOpsAppAliveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsAppAliveCall) Do(f func(context.Context, string, caas.Application, string, *caas.ApplicationConfig, *caasapplicationprovisioner.ProvisioningInfo, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger, application.UUID) error) *MockApplicationOpsAppAliveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsAppAliveCall) DoAndReturn(f func(context.Context, string, caas.Application, string, *caas.ApplicationConfig, *caasapplicationprovisioner.ProvisioningInfo, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger, application.UUID) error) *MockApplicationOpsAppAliveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AppDead mocks base method.
func (m *MockApplicationOps) AppDead(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 caasapplicationprovisioner.CAASBroker, arg5 caasapplicationprovisioner.ApplicationService, arg6 caasapplicationprovisioner.StatusService, arg7 clock.Clock, arg8 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppDead", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppDead indicates an expected call of AppDead.
func (mr *MockApplicationOpsMockRecorder) AppDead(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *MockApplicationOpsAppDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppDead", reflect.TypeOf((*MockApplicationOps)(nil).AppDead), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	return &MockApplicationOpsAppDeadCall{Call: call}
}

// MockApplicationOpsAppDeadCall wrap *gomock.Call
type MockApplicationOpsAppDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsAppDeadCall) Return(arg0 error) *MockApplicationOpsAppDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsAppDeadCall) Do(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.CAASBroker, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) error) *MockApplicationOpsAppDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsAppDeadCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.CAASBroker, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) error) *MockApplicationOpsAppDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AppDying mocks base method.
func (m *MockApplicationOps) AppDying(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 life.Value, arg5 caasapplicationprovisioner.CAASProvisionerFacade, arg6 caasapplicationprovisioner.ApplicationService, arg7 caasapplicationprovisioner.StatusService, arg8 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppDying", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppDying indicates an expected call of AppDying.
func (mr *MockApplicationOpsMockRecorder) AppDying(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *MockApplicationOpsAppDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppDying", reflect.TypeOf((*MockApplicationOps)(nil).AppDying), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	return &MockApplicationOpsAppDyingCall{Call: call}
}

// MockApplicationOpsAppDyingCall wrap *gomock.Call
type MockApplicationOpsAppDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsAppDyingCall) Return(arg0 error) *MockApplicationOpsAppDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsAppDyingCall) Do(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsAppDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsAppDyingCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsAppDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureScale mocks base method.
func (m *MockApplicationOps) EnsureScale(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 life.Value, arg5 caasapplicationprovisioner.CAASProvisionerFacade, arg6 caasapplicationprovisioner.ApplicationService, arg7 caasapplicationprovisioner.StatusService, arg8 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureScale", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureScale indicates an expected call of EnsureScale.
func (mr *MockApplicationOpsMockRecorder) EnsureScale(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *MockApplicationOpsEnsureScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureScale", reflect.TypeOf((*MockApplicationOps)(nil).EnsureScale), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	return &MockApplicationOpsEnsureScaleCall{Call: call}
}

// MockApplicationOpsEnsureScaleCall wrap *gomock.Call
type MockApplicationOpsEnsureScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsEnsureScaleCall) Return(arg0 error) *MockApplicationOpsEnsureScaleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsEnsureScaleCall) Do(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsEnsureScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsEnsureScaleCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsEnsureScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureTrust mocks base method.
func (m *MockApplicationOps) EnsureTrust(arg0 context.Context, arg1 string, arg2 caas.Application, arg3 caasapplicationprovisioner.ApplicationService, arg4 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTrust", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureTrust indicates an expected call of EnsureTrust.
func (mr *MockApplicationOpsMockRecorder) EnsureTrust(arg0, arg1, arg2, arg3, arg4 any) *MockApplicationOpsEnsureTrustCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTrust", reflect.TypeOf((*MockApplicationOps)(nil).EnsureTrust), arg0, arg1, arg2, arg3, arg4)
	return &MockApplicationOpsEnsureTrustCall{Call: call}
}

// MockApplicationOpsEnsureTrustCall wrap *gomock.Call
type MockApplicationOpsEnsureTrustCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsEnsureTrustCall) Return(arg0 error) *MockApplicationOpsEnsureTrustCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsEnsureTrustCall) Do(f func(context.Context, string, caas.Application, caasapplicationprovisioner.ApplicationService, logger.Logger) error) *MockApplicationOpsEnsureTrustCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsEnsureTrustCall) DoAndReturn(f func(context.Context, string, caas.Application, caasapplicationprovisioner.ApplicationService, logger.Logger) error) *MockApplicationOpsEnsureTrustCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProvisioningInfo mocks base method.
func (m *MockApplicationOps) ProvisioningInfo(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caasapplicationprovisioner.CAASProvisionerFacade, arg4 caasapplicationprovisioner.StorageProvisioningService, arg5 caasapplicationprovisioner.ApplicationService, arg6 caasapplicationprovisioner.ResourceOpenerGetter, arg7 *caasapplicationprovisioner.ProvisioningInfo, arg8 logger.Logger) (*caasapplicationprovisioner.ProvisioningInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisioningInfo", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*caasapplicationprovisioner.ProvisioningInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisioningInfo indicates an expected call of ProvisioningInfo.
func (mr *MockApplicationOpsMockRecorder) ProvisioningInfo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *MockApplicationOpsProvisioningInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisioningInfo", reflect.TypeOf((*MockApplicationOps)(nil).ProvisioningInfo), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	return &MockApplicationOpsProvisioningInfoCall{Call: call}
}

// MockApplicationOpsProvisioningInfoCall wrap *gomock.Call
type MockApplicationOpsProvisioningInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsProvisioningInfoCall) Return(arg0 *caasapplicationprovisioner.ProvisioningInfo, arg1 error) *MockApplicationOpsProvisioningInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsProvisioningInfoCall) Do(f func(context.Context, string, application.UUID, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.StorageProvisioningService, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.ResourceOpenerGetter, *caasapplicationprovisioner.ProvisioningInfo, logger.Logger) (*caasapplicationprovisioner.ProvisioningInfo, error)) *MockApplicationOpsProvisioningInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsProvisioningInfoCall) DoAndReturn(f func(context.Context, string, application.UUID, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.StorageProvisioningService, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.ResourceOpenerGetter, *caasapplicationprovisioner.ProvisioningInfo, logger.Logger) (*caasapplicationprovisioner.ProvisioningInfo, error)) *MockApplicationOpsProvisioningInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReconcileDeadUnitScale mocks base method.
func (m *MockApplicationOps) ReconcileDeadUnitScale(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 caasapplicationprovisioner.CAASProvisionerFacade, arg5 caasapplicationprovisioner.ApplicationService, arg6 caasapplicationprovisioner.StatusService, arg7 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDeadUnitScale", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDeadUnitScale indicates an expected call of ReconcileDeadUnitScale.
func (mr *MockApplicationOpsMockRecorder) ReconcileDeadUnitScale(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockApplicationOpsReconcileDeadUnitScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDeadUnitScale", reflect.TypeOf((*MockApplicationOps)(nil).ReconcileDeadUnitScale), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockApplicationOpsReconcileDeadUnitScaleCall{Call: call}
}

// MockApplicationOpsReconcileDeadUnitScaleCall wrap *gomock.Call
type MockApplicationOpsReconcileDeadUnitScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsReconcileDeadUnitScaleCall) Return(arg0 error) *MockApplicationOpsReconcileDeadUnitScaleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsReconcileDeadUnitScaleCall) Do(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsReconcileDeadUnitScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsReconcileDeadUnitScaleCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.CAASProvisionerFacade, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, logger.Logger) error) *MockApplicationOpsReconcileDeadUnitScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshApplicationStatus mocks base method.
func (m *MockApplicationOps) RefreshApplicationStatus(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 life.Value, arg5 caasapplicationprovisioner.StatusService, arg6 clock.Clock, arg7 logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshApplicationStatus", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshApplicationStatus indicates an expected call of RefreshApplicationStatus.
func (mr *MockApplicationOpsMockRecorder) RefreshApplicationStatus(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockApplicationOpsRefreshApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshApplicationStatus", reflect.TypeOf((*MockApplicationOps)(nil).RefreshApplicationStatus), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockApplicationOpsRefreshApplicationStatusCall{Call: call}
}

// MockApplicationOpsRefreshApplicationStatusCall wrap *gomock.Call
type MockApplicationOpsRefreshApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsRefreshApplicationStatusCall) Return(arg0 error) *MockApplicationOpsRefreshApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsRefreshApplicationStatusCall) Do(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) error) *MockApplicationOpsRefreshApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsRefreshApplicationStatusCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, life.Value, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) error) *MockApplicationOpsRefreshApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateState mocks base method.
func (m *MockApplicationOps) UpdateState(arg0 context.Context, arg1 string, arg2 application.UUID, arg3 caas.Application, arg4 caasapplicationprovisioner.UpdateStatusState, arg5 caasapplicationprovisioner.CAASBroker, arg6 caasapplicationprovisioner.ApplicationService, arg7 caasapplicationprovisioner.StatusService, arg8 clock.Clock, arg9 logger.Logger) (caasapplicationprovisioner.UpdateStatusState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(caasapplicationprovisioner.UpdateStatusState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockApplicationOpsMockRecorder) UpdateState(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *MockApplicationOpsUpdateStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockApplicationOps)(nil).UpdateState), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	return &MockApplicationOpsUpdateStateCall{Call: call}
}

// MockApplicationOpsUpdateStateCall wrap *gomock.Call
type MockApplicationOpsUpdateStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsUpdateStateCall) Return(arg0 caasapplicationprovisioner.UpdateStatusState, arg1 error) *MockApplicationOpsUpdateStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsUpdateStateCall) Do(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.UpdateStatusState, caasapplicationprovisioner.CAASBroker, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) (caasapplicationprovisioner.UpdateStatusState, error)) *MockApplicationOpsUpdateStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsUpdateStateCall) DoAndReturn(f func(context.Context, string, application.UUID, caas.Application, caasapplicationprovisioner.UpdateStatusState, caasapplicationprovisioner.CAASBroker, caasapplicationprovisioner.ApplicationService, caasapplicationprovisioner.StatusService, clock.Clock, logger.Logger) (caasapplicationprovisioner.UpdateStatusState, error)) *MockApplicationOpsUpdateStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitForTerminated mocks base method.
func (m *MockApplicationOps) WaitForTerminated(arg0 string, arg1 caas.Application, arg2 clock.Clock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTerminated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForTerminated indicates an expected call of WaitForTerminated.
func (mr *MockApplicationOpsMockRecorder) WaitForTerminated(arg0, arg1, arg2 any) *MockApplicationOpsWaitForTerminatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTerminated", reflect.TypeOf((*MockApplicationOps)(nil).WaitForTerminated), arg0, arg1, arg2)
	return &MockApplicationOpsWaitForTerminatedCall{Call: call}
}

// MockApplicationOpsWaitForTerminatedCall wrap *gomock.Call
type MockApplicationOpsWaitForTerminatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpsWaitForTerminatedCall) Return(arg0 error) *MockApplicationOpsWaitForTerminatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpsWaitForTerminatedCall) Do(f func(string, caas.Application, clock.Clock) error) *MockApplicationOpsWaitForTerminatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpsWaitForTerminatedCall) DoAndReturn(f func(string, caas.Application, clock.Clock) error) *MockApplicationOpsWaitForTerminatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
