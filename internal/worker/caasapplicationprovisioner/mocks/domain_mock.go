// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: ApplicationService,StatusService,AgentPasswordService,StorageProvisioningService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/domain_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner ApplicationService,StatusService,AgentPasswordService,StorageProvisioningService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	life "github.com/juju/juju/core/life"
	network "github.com/juju/juju/core/network"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	charm "github.com/juju/juju/domain/application/charm"
	service "github.com/juju/juju/domain/application/service"
	storageprovisioning "github.com/juju/juju/domain/storageprovisioning"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetAllUnitCloudContainerIDsForApplication mocks base method.
func (m *MockApplicationService) GetAllUnitCloudContainerIDsForApplication(arg0 context.Context, arg1 application.UUID) (map[unit.Name]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitCloudContainerIDsForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitCloudContainerIDsForApplication indicates an expected call of GetAllUnitCloudContainerIDsForApplication.
func (mr *MockApplicationServiceMockRecorder) GetAllUnitCloudContainerIDsForApplication(arg0, arg1 any) *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitCloudContainerIDsForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetAllUnitCloudContainerIDsForApplication), arg0, arg1)
	return &MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall{Call: call}
}

// MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall) Return(arg0 map[unit.Name]string, arg1 error) *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall) Do(f func(context.Context, application.UUID) (map[unit.Name]string, error)) *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (map[unit.Name]string, error)) *MockApplicationServiceGetAllUnitCloudContainerIDsForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitLifeForApplication mocks base method.
func (m *MockApplicationService) GetAllUnitLifeForApplication(arg0 context.Context, arg1 application.UUID) (map[unit.Name]life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitLifeForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitLifeForApplication indicates an expected call of GetAllUnitLifeForApplication.
func (mr *MockApplicationServiceMockRecorder) GetAllUnitLifeForApplication(arg0, arg1 any) *MockApplicationServiceGetAllUnitLifeForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitLifeForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetAllUnitLifeForApplication), arg0, arg1)
	return &MockApplicationServiceGetAllUnitLifeForApplicationCall{Call: call}
}

// MockApplicationServiceGetAllUnitLifeForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetAllUnitLifeForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAllUnitLifeForApplicationCall) Return(arg0 map[unit.Name]life.Value, arg1 error) *MockApplicationServiceGetAllUnitLifeForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAllUnitLifeForApplicationCall) Do(f func(context.Context, application.UUID) (map[unit.Name]life.Value, error)) *MockApplicationServiceGetAllUnitLifeForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAllUnitLifeForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (map[unit.Name]life.Value, error)) *MockApplicationServiceGetAllUnitLifeForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockApplicationService) GetApplicationLife(arg0 context.Context, arg1 application.UUID) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLife(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLife), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeCall) Do(f func(context.Context, application.UUID) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeCall) DoAndReturn(f func(context.Context, application.UUID) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationName mocks base method.
func (m *MockApplicationService) GetApplicationName(arg0 context.Context, arg1 application.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationName indicates an expected call of GetApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationName(arg0, arg1 any) *MockApplicationServiceGetApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationName), arg0, arg1)
	return &MockApplicationServiceGetApplicationNameCall{Call: call}
}

// MockApplicationServiceGetApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationNameCall) Return(arg0 string, arg1 error) *MockApplicationServiceGetApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationNameCall) Do(f func(context.Context, application.UUID) (string, error)) *MockApplicationServiceGetApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationNameCall) DoAndReturn(f func(context.Context, application.UUID) (string, error)) *MockApplicationServiceGetApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationScale mocks base method.
func (m *MockApplicationService) GetApplicationScale(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationScale", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationScale indicates an expected call of GetApplicationScale.
func (mr *MockApplicationServiceMockRecorder) GetApplicationScale(arg0, arg1 any) *MockApplicationServiceGetApplicationScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationScale", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationScale), arg0, arg1)
	return &MockApplicationServiceGetApplicationScaleCall{Call: call}
}

// MockApplicationServiceGetApplicationScaleCall wrap *gomock.Call
type MockApplicationServiceGetApplicationScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationScaleCall) Return(arg0 int, arg1 error) *MockApplicationServiceGetApplicationScaleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationScaleCall) Do(f func(context.Context, string) (int, error)) *MockApplicationServiceGetApplicationScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationScaleCall) DoAndReturn(f func(context.Context, string) (int, error)) *MockApplicationServiceGetApplicationScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationScalingState mocks base method.
func (m *MockApplicationService) GetApplicationScalingState(arg0 context.Context, arg1 string) (service.ScalingState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationScalingState", arg0, arg1)
	ret0, _ := ret[0].(service.ScalingState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationScalingState indicates an expected call of GetApplicationScalingState.
func (mr *MockApplicationServiceMockRecorder) GetApplicationScalingState(arg0, arg1 any) *MockApplicationServiceGetApplicationScalingStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationScalingState", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationScalingState), arg0, arg1)
	return &MockApplicationServiceGetApplicationScalingStateCall{Call: call}
}

// MockApplicationServiceGetApplicationScalingStateCall wrap *gomock.Call
type MockApplicationServiceGetApplicationScalingStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationScalingStateCall) Return(arg0 service.ScalingState, arg1 error) *MockApplicationServiceGetApplicationScalingStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationScalingStateCall) Do(f func(context.Context, string) (service.ScalingState, error)) *MockApplicationServiceGetApplicationScalingStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationScalingStateCall) DoAndReturn(f func(context.Context, string) (service.ScalingState, error)) *MockApplicationServiceGetApplicationScalingStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationTrustSetting mocks base method.
func (m *MockApplicationService) GetApplicationTrustSetting(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTrustSetting", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTrustSetting indicates an expected call of GetApplicationTrustSetting.
func (mr *MockApplicationServiceMockRecorder) GetApplicationTrustSetting(arg0, arg1 any) *MockApplicationServiceGetApplicationTrustSettingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationTrustSetting", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationTrustSetting), arg0, arg1)
	return &MockApplicationServiceGetApplicationTrustSettingCall{Call: call}
}

// MockApplicationServiceGetApplicationTrustSettingCall wrap *gomock.Call
type MockApplicationServiceGetApplicationTrustSettingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationTrustSettingCall) Return(arg0 bool, arg1 error) *MockApplicationServiceGetApplicationTrustSettingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationTrustSettingCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceGetApplicationTrustSettingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationTrustSettingCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceGetApplicationTrustSettingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmByApplicationID mocks base method.
func (m *MockApplicationService) GetCharmByApplicationID(arg0 context.Context, arg1 application.UUID) (charm0.Charm, charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmByApplicationID", arg0, arg1)
	ret0, _ := ret[0].(charm0.Charm)
	ret1, _ := ret[1].(charm.CharmLocator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmByApplicationID indicates an expected call of GetCharmByApplicationID.
func (mr *MockApplicationServiceMockRecorder) GetCharmByApplicationID(arg0, arg1 any) *MockApplicationServiceGetCharmByApplicationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmByApplicationID", reflect.TypeOf((*MockApplicationService)(nil).GetCharmByApplicationID), arg0, arg1)
	return &MockApplicationServiceGetCharmByApplicationIDCall{Call: call}
}

// MockApplicationServiceGetCharmByApplicationIDCall wrap *gomock.Call
type MockApplicationServiceGetCharmByApplicationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmByApplicationIDCall) Return(arg0 charm0.Charm, arg1 charm.CharmLocator, arg2 error) *MockApplicationServiceGetCharmByApplicationIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmByApplicationIDCall) Do(f func(context.Context, application.UUID) (charm0.Charm, charm.CharmLocator, error)) *MockApplicationServiceGetCharmByApplicationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmByApplicationIDCall) DoAndReturn(f func(context.Context, application.UUID) (charm0.Charm, charm.CharmLocator, error)) *MockApplicationServiceGetCharmByApplicationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerApplication mocks base method.
func (m *MockApplicationService) IsControllerApplication(arg0 context.Context, arg1 application.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerApplication indicates an expected call of IsControllerApplication.
func (mr *MockApplicationServiceMockRecorder) IsControllerApplication(arg0, arg1 any) *MockApplicationServiceIsControllerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerApplication", reflect.TypeOf((*MockApplicationService)(nil).IsControllerApplication), arg0, arg1)
	return &MockApplicationServiceIsControllerApplicationCall{Call: call}
}

// MockApplicationServiceIsControllerApplicationCall wrap *gomock.Call
type MockApplicationServiceIsControllerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsControllerApplicationCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsControllerApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsControllerApplicationCall) Do(f func(context.Context, application.UUID) (bool, error)) *MockApplicationServiceIsControllerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsControllerApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (bool, error)) *MockApplicationServiceIsControllerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationScalingState mocks base method.
func (m *MockApplicationService) SetApplicationScalingState(arg0 context.Context, arg1 string, arg2 int, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationScalingState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationScalingState indicates an expected call of SetApplicationScalingState.
func (mr *MockApplicationServiceMockRecorder) SetApplicationScalingState(arg0, arg1, arg2, arg3 any) *MockApplicationServiceSetApplicationScalingStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationScalingState", reflect.TypeOf((*MockApplicationService)(nil).SetApplicationScalingState), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceSetApplicationScalingStateCall{Call: call}
}

// MockApplicationServiceSetApplicationScalingStateCall wrap *gomock.Call
type MockApplicationServiceSetApplicationScalingStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetApplicationScalingStateCall) Return(arg0 error) *MockApplicationServiceSetApplicationScalingStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetApplicationScalingStateCall) Do(f func(context.Context, string, int, bool) error) *MockApplicationServiceSetApplicationScalingStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetApplicationScalingStateCall) DoAndReturn(f func(context.Context, string, int, bool) error) *MockApplicationServiceSetApplicationScalingStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCAASUnit mocks base method.
func (m *MockApplicationService) UpdateCAASUnit(arg0 context.Context, arg1 unit.Name, arg2 service.UpdateCAASUnitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCAASUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCAASUnit indicates an expected call of UpdateCAASUnit.
func (mr *MockApplicationServiceMockRecorder) UpdateCAASUnit(arg0, arg1, arg2 any) *MockApplicationServiceUpdateCAASUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCAASUnit", reflect.TypeOf((*MockApplicationService)(nil).UpdateCAASUnit), arg0, arg1, arg2)
	return &MockApplicationServiceUpdateCAASUnitCall{Call: call}
}

// MockApplicationServiceUpdateCAASUnitCall wrap *gomock.Call
type MockApplicationServiceUpdateCAASUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUpdateCAASUnitCall) Return(arg0 error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUpdateCAASUnitCall) Do(f func(context.Context, unit.Name, service.UpdateCAASUnitParams) error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUpdateCAASUnitCall) DoAndReturn(f func(context.Context, unit.Name, service.UpdateCAASUnitParams) error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudService mocks base method.
func (m *MockApplicationService) UpdateCloudService(arg0 context.Context, arg1, arg2 string, arg3 network.ProviderAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudService indicates an expected call of UpdateCloudService.
func (mr *MockApplicationServiceMockRecorder) UpdateCloudService(arg0, arg1, arg2, arg3 any) *MockApplicationServiceUpdateCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudService", reflect.TypeOf((*MockApplicationService)(nil).UpdateCloudService), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceUpdateCloudServiceCall{Call: call}
}

// MockApplicationServiceUpdateCloudServiceCall wrap *gomock.Call
type MockApplicationServiceUpdateCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUpdateCloudServiceCall) Return(arg0 error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUpdateCloudServiceCall) Do(f func(context.Context, string, string, network.ProviderAddresses) error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUpdateCloudServiceCall) DoAndReturn(f func(context.Context, string, string, network.ProviderAddresses) error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationScale mocks base method.
func (m *MockApplicationService) WatchApplicationScale(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationScale", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationScale indicates an expected call of WatchApplicationScale.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationScale(arg0, arg1 any) *MockApplicationServiceWatchApplicationScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationScale", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationScale), arg0, arg1)
	return &MockApplicationServiceWatchApplicationScaleCall{Call: call}
}

// MockApplicationServiceWatchApplicationScaleCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationScaleCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationScaleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationScaleCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationScaleCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationSettings mocks base method.
func (m *MockApplicationService) WatchApplicationSettings(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationSettings", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationSettings indicates an expected call of WatchApplicationSettings.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationSettings(arg0, arg1 any) *MockApplicationServiceWatchApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationSettings", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationSettings), arg0, arg1)
	return &MockApplicationServiceWatchApplicationSettingsCall{Call: call}
}

// MockApplicationServiceWatchApplicationSettingsCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationSettingsCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationSettingsCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationSettingsCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationUnitLife mocks base method.
func (m *MockApplicationService) WatchApplicationUnitLife(arg0 context.Context, arg1 string) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationUnitLife", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationUnitLife indicates an expected call of WatchApplicationUnitLife.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationUnitLife(arg0, arg1 any) *MockApplicationServiceWatchApplicationUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationUnitLife", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationUnitLife), arg0, arg1)
	return &MockApplicationServiceWatchApplicationUnitLifeCall{Call: call}
}

// MockApplicationServiceWatchApplicationUnitLifeCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationUnitLifeCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationUnitLifeCall) Do(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationUnitLifeCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplications mocks base method.
func (m *MockApplicationService) WatchApplications(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplications", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplications indicates an expected call of WatchApplications.
func (mr *MockApplicationServiceMockRecorder) WatchApplications(arg0 any) *MockApplicationServiceWatchApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplications", reflect.TypeOf((*MockApplicationService)(nil).WatchApplications), arg0)
	return &MockApplicationServiceWatchApplicationsCall{Call: call}
}

// MockApplicationServiceWatchApplicationsCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetUnitAgentStatusesForApplication mocks base method.
func (m *MockStatusService) GetUnitAgentStatusesForApplication(arg0 context.Context, arg1 application.UUID) (map[unit.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAgentStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAgentStatusesForApplication indicates an expected call of GetUnitAgentStatusesForApplication.
func (mr *MockStatusServiceMockRecorder) GetUnitAgentStatusesForApplication(arg0, arg1 any) *MockStatusServiceGetUnitAgentStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAgentStatusesForApplication", reflect.TypeOf((*MockStatusService)(nil).GetUnitAgentStatusesForApplication), arg0, arg1)
	return &MockStatusServiceGetUnitAgentStatusesForApplicationCall{Call: call}
}

// MockStatusServiceGetUnitAgentStatusesForApplicationCall wrap *gomock.Call
type MockStatusServiceGetUnitAgentStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetUnitAgentStatusesForApplicationCall) Return(arg0 map[unit.Name]status.StatusInfo, arg1 error) *MockStatusServiceGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetUnitAgentStatusesForApplicationCall) Do(f func(context.Context, application.UUID) (map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetUnitAgentStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationStatus mocks base method.
func (m *MockStatusService) SetApplicationStatus(arg0 context.Context, arg1 string, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatus indicates an expected call of SetApplicationStatus.
func (mr *MockStatusServiceMockRecorder) SetApplicationStatus(arg0, arg1, arg2 any) *MockStatusServiceSetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatus", reflect.TypeOf((*MockStatusService)(nil).SetApplicationStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetApplicationStatusCall{Call: call}
}

// MockStatusServiceSetApplicationStatusCall wrap *gomock.Call
type MockStatusServiceSetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetApplicationStatusCall) Return(arg0 error) *MockStatusServiceSetApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetApplicationStatusCall) Do(f func(context.Context, string, status.StatusInfo) error) *MockStatusServiceSetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetApplicationStatusCall) DoAndReturn(f func(context.Context, string, status.StatusInfo) error) *MockStatusServiceSetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// SetApplicationPassword mocks base method.
func (m *MockAgentPasswordService) SetApplicationPassword(arg0 context.Context, arg1 application.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationPassword indicates an expected call of SetApplicationPassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetApplicationPassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetApplicationPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationPassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetApplicationPassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetApplicationPasswordCall{Call: call}
}

// MockAgentPasswordServiceSetApplicationPasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetApplicationPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetApplicationPasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetApplicationPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetApplicationPasswordCall) Do(f func(context.Context, application.UUID, string) error) *MockAgentPasswordServiceSetApplicationPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetApplicationPasswordCall) DoAndReturn(f func(context.Context, application.UUID, string) error) *MockAgentPasswordServiceSetApplicationPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProvisioningService is a mock of StorageProvisioningService interface.
type MockStorageProvisioningService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProvisioningServiceMockRecorder
}

// MockStorageProvisioningServiceMockRecorder is the mock recorder for MockStorageProvisioningService.
type MockStorageProvisioningServiceMockRecorder struct {
	mock *MockStorageProvisioningService
}

// NewMockStorageProvisioningService creates a new mock instance.
func NewMockStorageProvisioningService(ctrl *gomock.Controller) *MockStorageProvisioningService {
	mock := &MockStorageProvisioningService{ctrl: ctrl}
	mock.recorder = &MockStorageProvisioningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvisioningService) EXPECT() *MockStorageProvisioningServiceMockRecorder {
	return m.recorder
}

// GetFilesystemTemplatesForApplication mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemTemplatesForApplication(arg0 context.Context, arg1 application.UUID) ([]storageprovisioning.FilesystemTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemTemplatesForApplication", arg0, arg1)
	ret0, _ := ret[0].([]storageprovisioning.FilesystemTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemTemplatesForApplication indicates an expected call of GetFilesystemTemplatesForApplication.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemTemplatesForApplication(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemTemplatesForApplication", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemTemplatesForApplication), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall) Return(arg0 []storageprovisioning.FilesystemTemplate, arg1 error) *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall) Do(f func(context.Context, application.UUID) ([]storageprovisioning.FilesystemTemplate, error)) *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) ([]storageprovisioning.FilesystemTemplate, error)) *MockStorageProvisioningServiceGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageResourceTagsForApplication mocks base method.
func (m *MockStorageProvisioningService) GetStorageResourceTagsForApplication(arg0 context.Context, arg1 application.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageResourceTagsForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageResourceTagsForApplication indicates an expected call of GetStorageResourceTagsForApplication.
func (mr *MockStorageProvisioningServiceMockRecorder) GetStorageResourceTagsForApplication(arg0, arg1 any) *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageResourceTagsForApplication", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetStorageResourceTagsForApplication), arg0, arg1)
	return &MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall{Call: call}
}

// MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall wrap *gomock.Call
type MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall) Return(arg0 map[string]string, arg1 error) *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall) Do(f func(context.Context, application.UUID) (map[string]string, error)) *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (map[string]string, error)) *MockStorageProvisioningServiceGetStorageResourceTagsForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
