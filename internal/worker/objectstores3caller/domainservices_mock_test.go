// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: DomainServices)
//
// Generated by this command:
//
//	mockgen -typed -package objectstores3caller -destination domainservices_mock_test.go github.com/juju/juju/internal/services DomainServices
//

// Package objectstores3caller is a generated GoMock package.
package objectstores3caller

import (
	reflect "reflect"

	service "github.com/juju/juju/domain/access/service"
	service0 "github.com/juju/juju/domain/agentbinary/service"
	service1 "github.com/juju/juju/domain/agentpassword/service"
	service2 "github.com/juju/juju/domain/agentprovisioner/service"
	service3 "github.com/juju/juju/domain/annotation/service"
	service4 "github.com/juju/juju/domain/application/service"
	service5 "github.com/juju/juju/domain/autocert/service"
	service6 "github.com/juju/juju/domain/blockcommand/service"
	service7 "github.com/juju/juju/domain/blockdevice/service"
	service8 "github.com/juju/juju/domain/changestream/service"
	service9 "github.com/juju/juju/domain/cloud/service"
	service10 "github.com/juju/juju/domain/cloudimagemetadata/service"
	service11 "github.com/juju/juju/domain/controller/service"
	service12 "github.com/juju/juju/domain/controllerconfig/service"
	service13 "github.com/juju/juju/domain/controllernode/service"
	service14 "github.com/juju/juju/domain/controllerupgrader/service"
	service15 "github.com/juju/juju/domain/credential/service"
	service16 "github.com/juju/juju/domain/crossmodelrelation/service"
	service17 "github.com/juju/juju/domain/externalcontroller/service"
	service18 "github.com/juju/juju/domain/flag/service"
	service19 "github.com/juju/juju/domain/keymanager/service"
	service20 "github.com/juju/juju/domain/keyupdater/service"
	service21 "github.com/juju/juju/domain/macaroon/service"
	service22 "github.com/juju/juju/domain/machine/service"
	service23 "github.com/juju/juju/domain/model/service"
	service24 "github.com/juju/juju/domain/modelagent/service"
	service25 "github.com/juju/juju/domain/modelconfig/service"
	service26 "github.com/juju/juju/domain/modeldefaults/service"
	service27 "github.com/juju/juju/domain/modelmigration/service"
	service28 "github.com/juju/juju/domain/modelprovider/service"
	service29 "github.com/juju/juju/domain/network/service"
	service30 "github.com/juju/juju/domain/operation/service"
	service31 "github.com/juju/juju/domain/port/service"
	service32 "github.com/juju/juju/domain/proxy/service"
	service33 "github.com/juju/juju/domain/relation/service"
	service34 "github.com/juju/juju/domain/removal/service"
	service35 "github.com/juju/juju/domain/resolve/service"
	service36 "github.com/juju/juju/domain/resource/service"
	service37 "github.com/juju/juju/domain/secret/service"
	service38 "github.com/juju/juju/domain/secretbackend/service"
	service39 "github.com/juju/juju/domain/status/service"
	service40 "github.com/juju/juju/domain/storage/service"
	service41 "github.com/juju/juju/domain/storageprovisioning/service"
	service42 "github.com/juju/juju/domain/unitstate/service"
	service43 "github.com/juju/juju/domain/upgrade/service"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockDomainServices) Access() *service.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access")
	ret0, _ := ret[0].(*service.Service)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockDomainServicesMockRecorder) Access() *MockDomainServicesAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockDomainServices)(nil).Access))
	return &MockDomainServicesAccessCall{Call: call}
}

// MockDomainServicesAccessCall wrap *gomock.Call
type MockDomainServicesAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAccessCall) Return(arg0 *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAccessCall) Do(f func() *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAccessCall) DoAndReturn(f func() *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Agent mocks base method.
func (m *MockDomainServices) Agent() *service24.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(*service24.WatchableService)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockDomainServicesMockRecorder) Agent() *MockDomainServicesAgentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockDomainServices)(nil).Agent))
	return &MockDomainServicesAgentCall{Call: call}
}

// MockDomainServicesAgentCall wrap *gomock.Call
type MockDomainServicesAgentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentCall) Return(arg0 *service24.WatchableService) *MockDomainServicesAgentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentCall) Do(f func() *service24.WatchableService) *MockDomainServicesAgentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentCall) DoAndReturn(f func() *service24.WatchableService) *MockDomainServicesAgentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentBinary mocks base method.
func (m *MockDomainServices) AgentBinary() *service0.AgentBinaryService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBinary")
	ret0, _ := ret[0].(*service0.AgentBinaryService)
	return ret0
}

// AgentBinary indicates an expected call of AgentBinary.
func (mr *MockDomainServicesMockRecorder) AgentBinary() *MockDomainServicesAgentBinaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBinary", reflect.TypeOf((*MockDomainServices)(nil).AgentBinary))
	return &MockDomainServicesAgentBinaryCall{Call: call}
}

// MockDomainServicesAgentBinaryCall wrap *gomock.Call
type MockDomainServicesAgentBinaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentBinaryCall) Return(arg0 *service0.AgentBinaryService) *MockDomainServicesAgentBinaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentBinaryCall) Do(f func() *service0.AgentBinaryService) *MockDomainServicesAgentBinaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentBinaryCall) DoAndReturn(f func() *service0.AgentBinaryService) *MockDomainServicesAgentBinaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentBinaryStore mocks base method.
func (m *MockDomainServices) AgentBinaryStore() *service0.AgentBinaryStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBinaryStore")
	ret0, _ := ret[0].(*service0.AgentBinaryStore)
	return ret0
}

// AgentBinaryStore indicates an expected call of AgentBinaryStore.
func (mr *MockDomainServicesMockRecorder) AgentBinaryStore() *MockDomainServicesAgentBinaryStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBinaryStore", reflect.TypeOf((*MockDomainServices)(nil).AgentBinaryStore))
	return &MockDomainServicesAgentBinaryStoreCall{Call: call}
}

// MockDomainServicesAgentBinaryStoreCall wrap *gomock.Call
type MockDomainServicesAgentBinaryStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentBinaryStoreCall) Return(arg0 *service0.AgentBinaryStore) *MockDomainServicesAgentBinaryStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentBinaryStoreCall) Do(f func() *service0.AgentBinaryStore) *MockDomainServicesAgentBinaryStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentBinaryStoreCall) DoAndReturn(f func() *service0.AgentBinaryStore) *MockDomainServicesAgentBinaryStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentPassword mocks base method.
func (m *MockDomainServices) AgentPassword() *service1.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentPassword")
	ret0, _ := ret[0].(*service1.Service)
	return ret0
}

// AgentPassword indicates an expected call of AgentPassword.
func (mr *MockDomainServicesMockRecorder) AgentPassword() *MockDomainServicesAgentPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentPassword", reflect.TypeOf((*MockDomainServices)(nil).AgentPassword))
	return &MockDomainServicesAgentPasswordCall{Call: call}
}

// MockDomainServicesAgentPasswordCall wrap *gomock.Call
type MockDomainServicesAgentPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentPasswordCall) Return(arg0 *service1.Service) *MockDomainServicesAgentPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentPasswordCall) Do(f func() *service1.Service) *MockDomainServicesAgentPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentPasswordCall) DoAndReturn(f func() *service1.Service) *MockDomainServicesAgentPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentProvisioner mocks base method.
func (m *MockDomainServices) AgentProvisioner() *service2.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentProvisioner")
	ret0, _ := ret[0].(*service2.Service)
	return ret0
}

// AgentProvisioner indicates an expected call of AgentProvisioner.
func (mr *MockDomainServicesMockRecorder) AgentProvisioner() *MockDomainServicesAgentProvisionerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentProvisioner", reflect.TypeOf((*MockDomainServices)(nil).AgentProvisioner))
	return &MockDomainServicesAgentProvisionerCall{Call: call}
}

// MockDomainServicesAgentProvisionerCall wrap *gomock.Call
type MockDomainServicesAgentProvisionerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentProvisionerCall) Return(arg0 *service2.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentProvisionerCall) Do(f func() *service2.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentProvisionerCall) DoAndReturn(f func() *service2.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotation mocks base method.
func (m *MockDomainServices) Annotation() *service3.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotation")
	ret0, _ := ret[0].(*service3.Service)
	return ret0
}

// Annotation indicates an expected call of Annotation.
func (mr *MockDomainServicesMockRecorder) Annotation() *MockDomainServicesAnnotationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotation", reflect.TypeOf((*MockDomainServices)(nil).Annotation))
	return &MockDomainServicesAnnotationCall{Call: call}
}

// MockDomainServicesAnnotationCall wrap *gomock.Call
type MockDomainServicesAnnotationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAnnotationCall) Return(arg0 *service3.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAnnotationCall) Do(f func() *service3.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAnnotationCall) DoAndReturn(f func() *service3.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockDomainServices) Application() *service4.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(*service4.WatchableService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockDomainServicesMockRecorder) Application() *MockDomainServicesApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockDomainServices)(nil).Application))
	return &MockDomainServicesApplicationCall{Call: call}
}

// MockDomainServicesApplicationCall wrap *gomock.Call
type MockDomainServicesApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesApplicationCall) Return(arg0 *service4.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesApplicationCall) Do(f func() *service4.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesApplicationCall) DoAndReturn(f func() *service4.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AutocertCache mocks base method.
func (m *MockDomainServices) AutocertCache() *service5.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocertCache")
	ret0, _ := ret[0].(*service5.Service)
	return ret0
}

// AutocertCache indicates an expected call of AutocertCache.
func (mr *MockDomainServicesMockRecorder) AutocertCache() *MockDomainServicesAutocertCacheCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocertCache", reflect.TypeOf((*MockDomainServices)(nil).AutocertCache))
	return &MockDomainServicesAutocertCacheCall{Call: call}
}

// MockDomainServicesAutocertCacheCall wrap *gomock.Call
type MockDomainServicesAutocertCacheCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAutocertCacheCall) Return(arg0 *service5.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAutocertCacheCall) Do(f func() *service5.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAutocertCacheCall) DoAndReturn(f func() *service5.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockCommand mocks base method.
func (m *MockDomainServices) BlockCommand() *service6.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommand")
	ret0, _ := ret[0].(*service6.Service)
	return ret0
}

// BlockCommand indicates an expected call of BlockCommand.
func (mr *MockDomainServicesMockRecorder) BlockCommand() *MockDomainServicesBlockCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommand", reflect.TypeOf((*MockDomainServices)(nil).BlockCommand))
	return &MockDomainServicesBlockCommandCall{Call: call}
}

// MockDomainServicesBlockCommandCall wrap *gomock.Call
type MockDomainServicesBlockCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesBlockCommandCall) Return(arg0 *service6.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesBlockCommandCall) Do(f func() *service6.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesBlockCommandCall) DoAndReturn(f func() *service6.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockDevice mocks base method.
func (m *MockDomainServices) BlockDevice() *service7.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevice")
	ret0, _ := ret[0].(*service7.WatchableService)
	return ret0
}

// BlockDevice indicates an expected call of BlockDevice.
func (mr *MockDomainServicesMockRecorder) BlockDevice() *MockDomainServicesBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevice", reflect.TypeOf((*MockDomainServices)(nil).BlockDevice))
	return &MockDomainServicesBlockDeviceCall{Call: call}
}

// MockDomainServicesBlockDeviceCall wrap *gomock.Call
type MockDomainServicesBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesBlockDeviceCall) Return(arg0 *service7.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesBlockDeviceCall) Do(f func() *service7.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesBlockDeviceCall) DoAndReturn(f func() *service7.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChangeStream mocks base method.
func (m *MockDomainServices) ChangeStream() *service8.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStream")
	ret0, _ := ret[0].(*service8.Service)
	return ret0
}

// ChangeStream indicates an expected call of ChangeStream.
func (mr *MockDomainServicesMockRecorder) ChangeStream() *MockDomainServicesChangeStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStream", reflect.TypeOf((*MockDomainServices)(nil).ChangeStream))
	return &MockDomainServicesChangeStreamCall{Call: call}
}

// MockDomainServicesChangeStreamCall wrap *gomock.Call
type MockDomainServicesChangeStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesChangeStreamCall) Return(arg0 *service8.Service) *MockDomainServicesChangeStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesChangeStreamCall) Do(f func() *service8.Service) *MockDomainServicesChangeStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesChangeStreamCall) DoAndReturn(f func() *service8.Service) *MockDomainServicesChangeStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockDomainServices) Cloud() *service9.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(*service9.WatchableService)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockDomainServicesMockRecorder) Cloud() *MockDomainServicesCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockDomainServices)(nil).Cloud))
	return &MockDomainServicesCloudCall{Call: call}
}

// MockDomainServicesCloudCall wrap *gomock.Call
type MockDomainServicesCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCloudCall) Return(arg0 *service9.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCloudCall) Do(f func() *service9.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCloudCall) DoAndReturn(f func() *service9.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudImageMetadata mocks base method.
func (m *MockDomainServices) CloudImageMetadata() *service10.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudImageMetadata")
	ret0, _ := ret[0].(*service10.Service)
	return ret0
}

// CloudImageMetadata indicates an expected call of CloudImageMetadata.
func (mr *MockDomainServicesMockRecorder) CloudImageMetadata() *MockDomainServicesCloudImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudImageMetadata", reflect.TypeOf((*MockDomainServices)(nil).CloudImageMetadata))
	return &MockDomainServicesCloudImageMetadataCall{Call: call}
}

// MockDomainServicesCloudImageMetadataCall wrap *gomock.Call
type MockDomainServicesCloudImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCloudImageMetadataCall) Return(arg0 *service10.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCloudImageMetadataCall) Do(f func() *service10.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCloudImageMetadataCall) DoAndReturn(f func() *service10.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockDomainServices) Config() *service25.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*service25.WatchableService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockDomainServicesMockRecorder) Config() *MockDomainServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockDomainServices)(nil).Config))
	return &MockDomainServicesConfigCall{Call: call}
}

// MockDomainServicesConfigCall wrap *gomock.Call
type MockDomainServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesConfigCall) Return(arg0 *service25.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesConfigCall) Do(f func() *service25.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesConfigCall) DoAndReturn(f func() *service25.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockDomainServices) Controller() *service11.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(*service11.Service)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockDomainServicesMockRecorder) Controller() *MockDomainServicesControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockDomainServices)(nil).Controller))
	return &MockDomainServicesControllerCall{Call: call}
}

// MockDomainServicesControllerCall wrap *gomock.Call
type MockDomainServicesControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerCall) Return(arg0 *service11.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerCall) Do(f func() *service11.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerCall) DoAndReturn(f func() *service11.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerAgentBinaryStore mocks base method.
func (m *MockDomainServices) ControllerAgentBinaryStore() *service0.AgentBinaryStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAgentBinaryStore")
	ret0, _ := ret[0].(*service0.AgentBinaryStore)
	return ret0
}

// ControllerAgentBinaryStore indicates an expected call of ControllerAgentBinaryStore.
func (mr *MockDomainServicesMockRecorder) ControllerAgentBinaryStore() *MockDomainServicesControllerAgentBinaryStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAgentBinaryStore", reflect.TypeOf((*MockDomainServices)(nil).ControllerAgentBinaryStore))
	return &MockDomainServicesControllerAgentBinaryStoreCall{Call: call}
}

// MockDomainServicesControllerAgentBinaryStoreCall wrap *gomock.Call
type MockDomainServicesControllerAgentBinaryStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerAgentBinaryStoreCall) Return(arg0 *service0.AgentBinaryStore) *MockDomainServicesControllerAgentBinaryStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerAgentBinaryStoreCall) Do(f func() *service0.AgentBinaryStore) *MockDomainServicesControllerAgentBinaryStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerAgentBinaryStoreCall) DoAndReturn(f func() *service0.AgentBinaryStore) *MockDomainServicesControllerAgentBinaryStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerChangeStream mocks base method.
func (m *MockDomainServices) ControllerChangeStream() *service8.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerChangeStream")
	ret0, _ := ret[0].(*service8.Service)
	return ret0
}

// ControllerChangeStream indicates an expected call of ControllerChangeStream.
func (mr *MockDomainServicesMockRecorder) ControllerChangeStream() *MockDomainServicesControllerChangeStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerChangeStream", reflect.TypeOf((*MockDomainServices)(nil).ControllerChangeStream))
	return &MockDomainServicesControllerChangeStreamCall{Call: call}
}

// MockDomainServicesControllerChangeStreamCall wrap *gomock.Call
type MockDomainServicesControllerChangeStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerChangeStreamCall) Return(arg0 *service8.Service) *MockDomainServicesControllerChangeStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerChangeStreamCall) Do(f func() *service8.Service) *MockDomainServicesControllerChangeStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerChangeStreamCall) DoAndReturn(f func() *service8.Service) *MockDomainServicesControllerChangeStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockDomainServices) ControllerConfig() *service12.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(*service12.WatchableService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockDomainServicesMockRecorder) ControllerConfig() *MockDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockDomainServices)(nil).ControllerConfig))
	return &MockDomainServicesControllerConfigCall{Call: call}
}

// MockDomainServicesControllerConfigCall wrap *gomock.Call
type MockDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerConfigCall) Return(arg0 *service12.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerConfigCall) Do(f func() *service12.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerConfigCall) DoAndReturn(f func() *service12.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockDomainServices) ControllerNode() *service13.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(*service13.WatchableService)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockDomainServicesMockRecorder) ControllerNode() *MockDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockDomainServices)(nil).ControllerNode))
	return &MockDomainServicesControllerNodeCall{Call: call}
}

// MockDomainServicesControllerNodeCall wrap *gomock.Call
type MockDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerNodeCall) Return(arg0 *service13.WatchableService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerNodeCall) Do(f func() *service13.WatchableService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerNodeCall) DoAndReturn(f func() *service13.WatchableService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerUpgraderService mocks base method.
func (m *MockDomainServices) ControllerUpgraderService() *service14.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerUpgraderService")
	ret0, _ := ret[0].(*service14.Service)
	return ret0
}

// ControllerUpgraderService indicates an expected call of ControllerUpgraderService.
func (mr *MockDomainServicesMockRecorder) ControllerUpgraderService() *MockDomainServicesControllerUpgraderServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerUpgraderService", reflect.TypeOf((*MockDomainServices)(nil).ControllerUpgraderService))
	return &MockDomainServicesControllerUpgraderServiceCall{Call: call}
}

// MockDomainServicesControllerUpgraderServiceCall wrap *gomock.Call
type MockDomainServicesControllerUpgraderServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerUpgraderServiceCall) Return(arg0 *service14.Service) *MockDomainServicesControllerUpgraderServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerUpgraderServiceCall) Do(f func() *service14.Service) *MockDomainServicesControllerUpgraderServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerUpgraderServiceCall) DoAndReturn(f func() *service14.Service) *MockDomainServicesControllerUpgraderServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Credential mocks base method.
func (m *MockDomainServices) Credential() *service15.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credential")
	ret0, _ := ret[0].(*service15.WatchableService)
	return ret0
}

// Credential indicates an expected call of Credential.
func (mr *MockDomainServicesMockRecorder) Credential() *MockDomainServicesCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credential", reflect.TypeOf((*MockDomainServices)(nil).Credential))
	return &MockDomainServicesCredentialCall{Call: call}
}

// MockDomainServicesCredentialCall wrap *gomock.Call
type MockDomainServicesCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCredentialCall) Return(arg0 *service15.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCredentialCall) Do(f func() *service15.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCredentialCall) DoAndReturn(f func() *service15.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CrossModelRelation mocks base method.
func (m *MockDomainServices) CrossModelRelation() *service16.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossModelRelation")
	ret0, _ := ret[0].(*service16.WatchableService)
	return ret0
}

// CrossModelRelation indicates an expected call of CrossModelRelation.
func (mr *MockDomainServicesMockRecorder) CrossModelRelation() *MockDomainServicesCrossModelRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossModelRelation", reflect.TypeOf((*MockDomainServices)(nil).CrossModelRelation))
	return &MockDomainServicesCrossModelRelationCall{Call: call}
}

// MockDomainServicesCrossModelRelationCall wrap *gomock.Call
type MockDomainServicesCrossModelRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCrossModelRelationCall) Return(arg0 *service16.WatchableService) *MockDomainServicesCrossModelRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCrossModelRelationCall) Do(f func() *service16.WatchableService) *MockDomainServicesCrossModelRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCrossModelRelationCall) DoAndReturn(f func() *service16.WatchableService) *MockDomainServicesCrossModelRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExternalController mocks base method.
func (m *MockDomainServices) ExternalController() *service17.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalController")
	ret0, _ := ret[0].(*service17.WatchableService)
	return ret0
}

// ExternalController indicates an expected call of ExternalController.
func (mr *MockDomainServicesMockRecorder) ExternalController() *MockDomainServicesExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalController", reflect.TypeOf((*MockDomainServices)(nil).ExternalController))
	return &MockDomainServicesExternalControllerCall{Call: call}
}

// MockDomainServicesExternalControllerCall wrap *gomock.Call
type MockDomainServicesExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesExternalControllerCall) Return(arg0 *service17.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesExternalControllerCall) Do(f func() *service17.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesExternalControllerCall) DoAndReturn(f func() *service17.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flag mocks base method.
func (m *MockDomainServices) Flag() *service18.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flag")
	ret0, _ := ret[0].(*service18.Service)
	return ret0
}

// Flag indicates an expected call of Flag.
func (mr *MockDomainServicesMockRecorder) Flag() *MockDomainServicesFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flag", reflect.TypeOf((*MockDomainServices)(nil).Flag))
	return &MockDomainServicesFlagCall{Call: call}
}

// MockDomainServicesFlagCall wrap *gomock.Call
type MockDomainServicesFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesFlagCall) Return(arg0 *service18.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesFlagCall) Do(f func() *service18.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesFlagCall) DoAndReturn(f func() *service18.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManager mocks base method.
func (m *MockDomainServices) KeyManager() *service19.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManager")
	ret0, _ := ret[0].(*service19.Service)
	return ret0
}

// KeyManager indicates an expected call of KeyManager.
func (mr *MockDomainServicesMockRecorder) KeyManager() *MockDomainServicesKeyManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManager", reflect.TypeOf((*MockDomainServices)(nil).KeyManager))
	return &MockDomainServicesKeyManagerCall{Call: call}
}

// MockDomainServicesKeyManagerCall wrap *gomock.Call
type MockDomainServicesKeyManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyManagerCall) Return(arg0 *service19.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyManagerCall) Do(f func() *service19.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyManagerCall) DoAndReturn(f func() *service19.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManagerWithImporter mocks base method.
func (m *MockDomainServices) KeyManagerWithImporter() *service19.ImporterService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManagerWithImporter")
	ret0, _ := ret[0].(*service19.ImporterService)
	return ret0
}

// KeyManagerWithImporter indicates an expected call of KeyManagerWithImporter.
func (mr *MockDomainServicesMockRecorder) KeyManagerWithImporter() *MockDomainServicesKeyManagerWithImporterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManagerWithImporter", reflect.TypeOf((*MockDomainServices)(nil).KeyManagerWithImporter))
	return &MockDomainServicesKeyManagerWithImporterCall{Call: call}
}

// MockDomainServicesKeyManagerWithImporterCall wrap *gomock.Call
type MockDomainServicesKeyManagerWithImporterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyManagerWithImporterCall) Return(arg0 *service19.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyManagerWithImporterCall) Do(f func() *service19.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyManagerWithImporterCall) DoAndReturn(f func() *service19.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyUpdater mocks base method.
func (m *MockDomainServices) KeyUpdater() *service20.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyUpdater")
	ret0, _ := ret[0].(*service20.WatchableService)
	return ret0
}

// KeyUpdater indicates an expected call of KeyUpdater.
func (mr *MockDomainServicesMockRecorder) KeyUpdater() *MockDomainServicesKeyUpdaterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyUpdater", reflect.TypeOf((*MockDomainServices)(nil).KeyUpdater))
	return &MockDomainServicesKeyUpdaterCall{Call: call}
}

// MockDomainServicesKeyUpdaterCall wrap *gomock.Call
type MockDomainServicesKeyUpdaterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyUpdaterCall) Return(arg0 *service20.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyUpdaterCall) Do(f func() *service20.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyUpdaterCall) DoAndReturn(f func() *service20.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockDomainServices) Macaroon() *service21.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(*service21.Service)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockDomainServicesMockRecorder) Macaroon() *MockDomainServicesMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockDomainServices)(nil).Macaroon))
	return &MockDomainServicesMacaroonCall{Call: call}
}

// MockDomainServicesMacaroonCall wrap *gomock.Call
type MockDomainServicesMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesMacaroonCall) Return(arg0 *service21.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesMacaroonCall) Do(f func() *service21.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesMacaroonCall) DoAndReturn(f func() *service21.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockDomainServices) Machine() *service22.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine")
	ret0, _ := ret[0].(*service22.WatchableService)
	return ret0
}

// Machine indicates an expected call of Machine.
func (mr *MockDomainServicesMockRecorder) Machine() *MockDomainServicesMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockDomainServices)(nil).Machine))
	return &MockDomainServicesMachineCall{Call: call}
}

// MockDomainServicesMachineCall wrap *gomock.Call
type MockDomainServicesMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesMachineCall) Return(arg0 *service22.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesMachineCall) Do(f func() *service22.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesMachineCall) DoAndReturn(f func() *service22.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockDomainServices) Model() *service23.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service23.WatchableService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDomainServicesMockRecorder) Model() *MockDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDomainServices)(nil).Model))
	return &MockDomainServicesModelCall{Call: call}
}

// MockDomainServicesModelCall wrap *gomock.Call
type MockDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelCall) Return(arg0 *service23.WatchableService) *MockDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelCall) Do(f func() *service23.WatchableService) *MockDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelCall) DoAndReturn(f func() *service23.WatchableService) *MockDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelDefaults mocks base method.
func (m *MockDomainServices) ModelDefaults() *service26.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDefaults")
	ret0, _ := ret[0].(*service26.Service)
	return ret0
}

// ModelDefaults indicates an expected call of ModelDefaults.
func (mr *MockDomainServicesMockRecorder) ModelDefaults() *MockDomainServicesModelDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDefaults", reflect.TypeOf((*MockDomainServices)(nil).ModelDefaults))
	return &MockDomainServicesModelDefaultsCall{Call: call}
}

// MockDomainServicesModelDefaultsCall wrap *gomock.Call
type MockDomainServicesModelDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelDefaultsCall) Return(arg0 *service26.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelDefaultsCall) Do(f func() *service26.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelDefaultsCall) DoAndReturn(f func() *service26.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelInfo mocks base method.
func (m *MockDomainServices) ModelInfo() *service23.ProviderModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(*service23.ProviderModelService)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockDomainServicesMockRecorder) ModelInfo() *MockDomainServicesModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockDomainServices)(nil).ModelInfo))
	return &MockDomainServicesModelInfoCall{Call: call}
}

// MockDomainServicesModelInfoCall wrap *gomock.Call
type MockDomainServicesModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelInfoCall) Return(arg0 *service23.ProviderModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelInfoCall) Do(f func() *service23.ProviderModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelInfoCall) DoAndReturn(f func() *service23.ProviderModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMigration mocks base method.
func (m *MockDomainServices) ModelMigration() *service27.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMigration")
	ret0, _ := ret[0].(*service27.Service)
	return ret0
}

// ModelMigration indicates an expected call of ModelMigration.
func (mr *MockDomainServicesMockRecorder) ModelMigration() *MockDomainServicesModelMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMigration", reflect.TypeOf((*MockDomainServices)(nil).ModelMigration))
	return &MockDomainServicesModelMigrationCall{Call: call}
}

// MockDomainServicesModelMigrationCall wrap *gomock.Call
type MockDomainServicesModelMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelMigrationCall) Return(arg0 *service27.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelMigrationCall) Do(f func() *service27.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelMigrationCall) DoAndReturn(f func() *service27.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelProvider mocks base method.
func (m *MockDomainServices) ModelProvider() *service28.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelProvider")
	ret0, _ := ret[0].(*service28.Service)
	return ret0
}

// ModelProvider indicates an expected call of ModelProvider.
func (mr *MockDomainServicesMockRecorder) ModelProvider() *MockDomainServicesModelProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelProvider", reflect.TypeOf((*MockDomainServices)(nil).ModelProvider))
	return &MockDomainServicesModelProviderCall{Call: call}
}

// MockDomainServicesModelProviderCall wrap *gomock.Call
type MockDomainServicesModelProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelProviderCall) Return(arg0 *service28.Service) *MockDomainServicesModelProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelProviderCall) Do(f func() *service28.Service) *MockDomainServicesModelProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelProviderCall) DoAndReturn(f func() *service28.Service) *MockDomainServicesModelProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelSecretBackend mocks base method.
func (m *MockDomainServices) ModelSecretBackend() *service38.ModelSecretBackendService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSecretBackend")
	ret0, _ := ret[0].(*service38.ModelSecretBackendService)
	return ret0
}

// ModelSecretBackend indicates an expected call of ModelSecretBackend.
func (mr *MockDomainServicesMockRecorder) ModelSecretBackend() *MockDomainServicesModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSecretBackend", reflect.TypeOf((*MockDomainServices)(nil).ModelSecretBackend))
	return &MockDomainServicesModelSecretBackendCall{Call: call}
}

// MockDomainServicesModelSecretBackendCall wrap *gomock.Call
type MockDomainServicesModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelSecretBackendCall) Return(arg0 *service38.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelSecretBackendCall) Do(f func() *service38.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelSecretBackendCall) DoAndReturn(f func() *service38.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockDomainServices) Network() *service29.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(*service29.WatchableService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockDomainServicesMockRecorder) Network() *MockDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockDomainServices)(nil).Network))
	return &MockDomainServicesNetworkCall{Call: call}
}

// MockDomainServicesNetworkCall wrap *gomock.Call
type MockDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesNetworkCall) Return(arg0 *service29.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesNetworkCall) Do(f func() *service29.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesNetworkCall) DoAndReturn(f func() *service29.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Operation mocks base method.
func (m *MockDomainServices) Operation() *service30.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation")
	ret0, _ := ret[0].(*service30.WatchableService)
	return ret0
}

// Operation indicates an expected call of Operation.
func (mr *MockDomainServicesMockRecorder) Operation() *MockDomainServicesOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockDomainServices)(nil).Operation))
	return &MockDomainServicesOperationCall{Call: call}
}

// MockDomainServicesOperationCall wrap *gomock.Call
type MockDomainServicesOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesOperationCall) Return(arg0 *service30.WatchableService) *MockDomainServicesOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesOperationCall) Do(f func() *service30.WatchableService) *MockDomainServicesOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesOperationCall) DoAndReturn(f func() *service30.WatchableService) *MockDomainServicesOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Port mocks base method.
func (m *MockDomainServices) Port() *service31.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(*service31.WatchableService)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockDomainServicesMockRecorder) Port() *MockDomainServicesPortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockDomainServices)(nil).Port))
	return &MockDomainServicesPortCall{Call: call}
}

// MockDomainServicesPortCall wrap *gomock.Call
type MockDomainServicesPortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesPortCall) Return(arg0 *service31.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesPortCall) Do(f func() *service31.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesPortCall) DoAndReturn(f func() *service31.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proxy mocks base method.
func (m *MockDomainServices) Proxy() *service32.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxy")
	ret0, _ := ret[0].(*service32.Service)
	return ret0
}

// Proxy indicates an expected call of Proxy.
func (mr *MockDomainServicesMockRecorder) Proxy() *MockDomainServicesProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockDomainServices)(nil).Proxy))
	return &MockDomainServicesProxyCall{Call: call}
}

// MockDomainServicesProxyCall wrap *gomock.Call
type MockDomainServicesProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesProxyCall) Return(arg0 *service32.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesProxyCall) Do(f func() *service32.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesProxyCall) DoAndReturn(f func() *service32.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relation mocks base method.
func (m *MockDomainServices) Relation() *service33.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation")
	ret0, _ := ret[0].(*service33.WatchableService)
	return ret0
}

// Relation indicates an expected call of Relation.
func (mr *MockDomainServicesMockRecorder) Relation() *MockDomainServicesRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockDomainServices)(nil).Relation))
	return &MockDomainServicesRelationCall{Call: call}
}

// MockDomainServicesRelationCall wrap *gomock.Call
type MockDomainServicesRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesRelationCall) Return(arg0 *service33.WatchableService) *MockDomainServicesRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesRelationCall) Do(f func() *service33.WatchableService) *MockDomainServicesRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesRelationCall) DoAndReturn(f func() *service33.WatchableService) *MockDomainServicesRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Removal mocks base method.
func (m *MockDomainServices) Removal() *service34.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Removal")
	ret0, _ := ret[0].(*service34.WatchableService)
	return ret0
}

// Removal indicates an expected call of Removal.
func (mr *MockDomainServicesMockRecorder) Removal() *MockDomainServicesRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Removal", reflect.TypeOf((*MockDomainServices)(nil).Removal))
	return &MockDomainServicesRemovalCall{Call: call}
}

// MockDomainServicesRemovalCall wrap *gomock.Call
type MockDomainServicesRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesRemovalCall) Return(arg0 *service34.WatchableService) *MockDomainServicesRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesRemovalCall) Do(f func() *service34.WatchableService) *MockDomainServicesRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesRemovalCall) DoAndReturn(f func() *service34.WatchableService) *MockDomainServicesRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resolve mocks base method.
func (m *MockDomainServices) Resolve() *service35.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve")
	ret0, _ := ret[0].(*service35.WatchableService)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockDomainServicesMockRecorder) Resolve() *MockDomainServicesResolveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockDomainServices)(nil).Resolve))
	return &MockDomainServicesResolveCall{Call: call}
}

// MockDomainServicesResolveCall wrap *gomock.Call
type MockDomainServicesResolveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesResolveCall) Return(arg0 *service35.WatchableService) *MockDomainServicesResolveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesResolveCall) Do(f func() *service35.WatchableService) *MockDomainServicesResolveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesResolveCall) DoAndReturn(f func() *service35.WatchableService) *MockDomainServicesResolveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resource mocks base method.
func (m *MockDomainServices) Resource() *service36.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(*service36.Service)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockDomainServicesMockRecorder) Resource() *MockDomainServicesResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockDomainServices)(nil).Resource))
	return &MockDomainServicesResourceCall{Call: call}
}

// MockDomainServicesResourceCall wrap *gomock.Call
type MockDomainServicesResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesResourceCall) Return(arg0 *service36.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesResourceCall) Do(f func() *service36.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesResourceCall) DoAndReturn(f func() *service36.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secret mocks base method.
func (m *MockDomainServices) Secret() *service37.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret")
	ret0, _ := ret[0].(*service37.WatchableService)
	return ret0
}

// Secret indicates an expected call of Secret.
func (mr *MockDomainServicesMockRecorder) Secret() *MockDomainServicesSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockDomainServices)(nil).Secret))
	return &MockDomainServicesSecretCall{Call: call}
}

// MockDomainServicesSecretCall wrap *gomock.Call
type MockDomainServicesSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesSecretCall) Return(arg0 *service37.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesSecretCall) Do(f func() *service37.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesSecretCall) DoAndReturn(f func() *service37.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretBackend mocks base method.
func (m *MockDomainServices) SecretBackend() *service38.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackend")
	ret0, _ := ret[0].(*service38.WatchableService)
	return ret0
}

// SecretBackend indicates an expected call of SecretBackend.
func (mr *MockDomainServicesMockRecorder) SecretBackend() *MockDomainServicesSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackend", reflect.TypeOf((*MockDomainServices)(nil).SecretBackend))
	return &MockDomainServicesSecretBackendCall{Call: call}
}

// MockDomainServicesSecretBackendCall wrap *gomock.Call
type MockDomainServicesSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesSecretBackendCall) Return(arg0 *service38.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesSecretBackendCall) Do(f func() *service38.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesSecretBackendCall) DoAndReturn(f func() *service38.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockDomainServices) Status() *service39.LeadershipService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*service39.LeadershipService)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockDomainServicesMockRecorder) Status() *MockDomainServicesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDomainServices)(nil).Status))
	return &MockDomainServicesStatusCall{Call: call}
}

// MockDomainServicesStatusCall wrap *gomock.Call
type MockDomainServicesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesStatusCall) Return(arg0 *service39.LeadershipService) *MockDomainServicesStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesStatusCall) Do(f func() *service39.LeadershipService) *MockDomainServicesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesStatusCall) DoAndReturn(f func() *service39.LeadershipService) *MockDomainServicesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockDomainServices) Storage() *service40.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(*service40.Service)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockDomainServicesMockRecorder) Storage() *MockDomainServicesStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockDomainServices)(nil).Storage))
	return &MockDomainServicesStorageCall{Call: call}
}

// MockDomainServicesStorageCall wrap *gomock.Call
type MockDomainServicesStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesStorageCall) Return(arg0 *service40.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesStorageCall) Do(f func() *service40.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesStorageCall) DoAndReturn(f func() *service40.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvisioning mocks base method.
func (m *MockDomainServices) StorageProvisioning() *service41.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvisioning")
	ret0, _ := ret[0].(*service41.Service)
	return ret0
}

// StorageProvisioning indicates an expected call of StorageProvisioning.
func (mr *MockDomainServicesMockRecorder) StorageProvisioning() *MockDomainServicesStorageProvisioningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvisioning", reflect.TypeOf((*MockDomainServices)(nil).StorageProvisioning))
	return &MockDomainServicesStorageProvisioningCall{Call: call}
}

// MockDomainServicesStorageProvisioningCall wrap *gomock.Call
type MockDomainServicesStorageProvisioningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesStorageProvisioningCall) Return(arg0 *service41.Service) *MockDomainServicesStorageProvisioningCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesStorageProvisioningCall) Do(f func() *service41.Service) *MockDomainServicesStorageProvisioningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesStorageProvisioningCall) DoAndReturn(f func() *service41.Service) *MockDomainServicesStorageProvisioningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitState mocks base method.
func (m *MockDomainServices) UnitState() *service42.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitState")
	ret0, _ := ret[0].(*service42.Service)
	return ret0
}

// UnitState indicates an expected call of UnitState.
func (mr *MockDomainServicesMockRecorder) UnitState() *MockDomainServicesUnitStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitState", reflect.TypeOf((*MockDomainServices)(nil).UnitState))
	return &MockDomainServicesUnitStateCall{Call: call}
}

// MockDomainServicesUnitStateCall wrap *gomock.Call
type MockDomainServicesUnitStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesUnitStateCall) Return(arg0 *service42.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesUnitStateCall) Do(f func() *service42.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesUnitStateCall) DoAndReturn(f func() *service42.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upgrade mocks base method.
func (m *MockDomainServices) Upgrade() *service43.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade")
	ret0, _ := ret[0].(*service43.WatchableService)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockDomainServicesMockRecorder) Upgrade() *MockDomainServicesUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockDomainServices)(nil).Upgrade))
	return &MockDomainServicesUpgradeCall{Call: call}
}

// MockDomainServicesUpgradeCall wrap *gomock.Call
type MockDomainServicesUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesUpgradeCall) Return(arg0 *service43.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesUpgradeCall) Do(f func() *service43.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesUpgradeCall) DoAndReturn(f func() *service43.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
