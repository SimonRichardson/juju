// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/secrets (interfaces: SecretsClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/client_mock.go github.com/juju/juju/internal/worker/uniter/secrets SecretsClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsClient is a mock of SecretsClient interface.
type MockSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsClientMockRecorder
}

// MockSecretsClientMockRecorder is the mock recorder for MockSecretsClient.
type MockSecretsClientMockRecorder struct {
	mock *MockSecretsClient
}

// NewMockSecretsClient creates a new mock instance.
func NewMockSecretsClient(ctrl *gomock.Controller) *MockSecretsClient {
	mock := &MockSecretsClient{ctrl: ctrl}
	mock.recorder = &MockSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsClient) EXPECT() *MockSecretsClientMockRecorder {
	return m.recorder
}

// CreateSecretURIs mocks base method.
func (m *MockSecretsClient) CreateSecretURIs(arg0 context.Context, arg1 int) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretURIs", arg0, arg1)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretURIs indicates an expected call of CreateSecretURIs.
func (mr *MockSecretsClientMockRecorder) CreateSecretURIs(arg0, arg1 any) *MockSecretsClientCreateSecretURIsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretURIs", reflect.TypeOf((*MockSecretsClient)(nil).CreateSecretURIs), arg0, arg1)
	return &MockSecretsClientCreateSecretURIsCall{Call: call}
}

// MockSecretsClientCreateSecretURIsCall wrap *gomock.Call
type MockSecretsClientCreateSecretURIsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientCreateSecretURIsCall) Return(arg0 []*secrets.URI, arg1 error) *MockSecretsClientCreateSecretURIsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientCreateSecretURIsCall) Do(f func(context.Context, int) ([]*secrets.URI, error)) *MockSecretsClientCreateSecretURIsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientCreateSecretURIsCall) DoAndReturn(f func(context.Context, int) ([]*secrets.URI, error)) *MockSecretsClientCreateSecretURIsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumerSecretsRevisionInfo mocks base method.
func (m *MockSecretsClient) GetConsumerSecretsRevisionInfo(arg0 context.Context, arg1 string, arg2 []string) (map[string]secrets.SecretRevisionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerSecretsRevisionInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]secrets.SecretRevisionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerSecretsRevisionInfo indicates an expected call of GetConsumerSecretsRevisionInfo.
func (mr *MockSecretsClientMockRecorder) GetConsumerSecretsRevisionInfo(arg0, arg1, arg2 any) *MockSecretsClientGetConsumerSecretsRevisionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerSecretsRevisionInfo", reflect.TypeOf((*MockSecretsClient)(nil).GetConsumerSecretsRevisionInfo), arg0, arg1, arg2)
	return &MockSecretsClientGetConsumerSecretsRevisionInfoCall{Call: call}
}

// MockSecretsClientGetConsumerSecretsRevisionInfoCall wrap *gomock.Call
type MockSecretsClientGetConsumerSecretsRevisionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientGetConsumerSecretsRevisionInfoCall) Return(arg0 map[string]secrets.SecretRevisionInfo, arg1 error) *MockSecretsClientGetConsumerSecretsRevisionInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientGetConsumerSecretsRevisionInfoCall) Do(f func(context.Context, string, []string) (map[string]secrets.SecretRevisionInfo, error)) *MockSecretsClientGetConsumerSecretsRevisionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientGetConsumerSecretsRevisionInfoCall) DoAndReturn(f func(context.Context, string, []string) (map[string]secrets.SecretRevisionInfo, error)) *MockSecretsClientGetConsumerSecretsRevisionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OwnedSecretRevisions mocks base method.
func (m *MockSecretsClient) OwnedSecretRevisions(arg0 context.Context, arg1 names.UnitTag, arg2 *secrets.URI) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnedSecretRevisions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnedSecretRevisions indicates an expected call of OwnedSecretRevisions.
func (mr *MockSecretsClientMockRecorder) OwnedSecretRevisions(arg0, arg1, arg2 any) *MockSecretsClientOwnedSecretRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnedSecretRevisions", reflect.TypeOf((*MockSecretsClient)(nil).OwnedSecretRevisions), arg0, arg1, arg2)
	return &MockSecretsClientOwnedSecretRevisionsCall{Call: call}
}

// MockSecretsClientOwnedSecretRevisionsCall wrap *gomock.Call
type MockSecretsClientOwnedSecretRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientOwnedSecretRevisionsCall) Return(arg0 []int, arg1 error) *MockSecretsClientOwnedSecretRevisionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientOwnedSecretRevisionsCall) Do(f func(context.Context, names.UnitTag, *secrets.URI) ([]int, error)) *MockSecretsClientOwnedSecretRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientOwnedSecretRevisionsCall) DoAndReturn(f func(context.Context, names.UnitTag, *secrets.URI) ([]int, error)) *MockSecretsClientOwnedSecretRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretMetadata mocks base method.
func (m *MockSecretsClient) SecretMetadata(arg0 context.Context) ([]secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretMetadata", arg0)
	ret0, _ := ret[0].([]secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretMetadata indicates an expected call of SecretMetadata.
func (mr *MockSecretsClientMockRecorder) SecretMetadata(arg0 any) *MockSecretsClientSecretMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretMetadata", reflect.TypeOf((*MockSecretsClient)(nil).SecretMetadata), arg0)
	return &MockSecretsClientSecretMetadataCall{Call: call}
}

// MockSecretsClientSecretMetadataCall wrap *gomock.Call
type MockSecretsClientSecretMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientSecretMetadataCall) Return(arg0 []secrets.SecretMetadata, arg1 error) *MockSecretsClientSecretMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientSecretMetadataCall) Do(f func(context.Context) ([]secrets.SecretMetadata, error)) *MockSecretsClientSecretMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientSecretMetadataCall) DoAndReturn(f func(context.Context) ([]secrets.SecretMetadata, error)) *MockSecretsClientSecretMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretRotated mocks base method.
func (m *MockSecretsClient) SecretRotated(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretRotated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretRotated indicates an expected call of SecretRotated.
func (mr *MockSecretsClientMockRecorder) SecretRotated(arg0, arg1, arg2 any) *MockSecretsClientSecretRotatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretRotated", reflect.TypeOf((*MockSecretsClient)(nil).SecretRotated), arg0, arg1, arg2)
	return &MockSecretsClientSecretRotatedCall{Call: call}
}

// MockSecretsClientSecretRotatedCall wrap *gomock.Call
type MockSecretsClientSecretRotatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientSecretRotatedCall) Return(arg0 error) *MockSecretsClientSecretRotatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientSecretRotatedCall) Do(f func(context.Context, string, int) error) *MockSecretsClientSecretRotatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientSecretRotatedCall) DoAndReturn(f func(context.Context, string, int) error) *MockSecretsClientSecretRotatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitOwnedSecretsAndRevisions mocks base method.
func (m *MockSecretsClient) UnitOwnedSecretsAndRevisions(arg0 context.Context, arg1 names.UnitTag) ([]secrets.SecretURIWithRevisions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitOwnedSecretsAndRevisions", arg0, arg1)
	ret0, _ := ret[0].([]secrets.SecretURIWithRevisions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitOwnedSecretsAndRevisions indicates an expected call of UnitOwnedSecretsAndRevisions.
func (mr *MockSecretsClientMockRecorder) UnitOwnedSecretsAndRevisions(arg0, arg1 any) *MockSecretsClientUnitOwnedSecretsAndRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitOwnedSecretsAndRevisions", reflect.TypeOf((*MockSecretsClient)(nil).UnitOwnedSecretsAndRevisions), arg0, arg1)
	return &MockSecretsClientUnitOwnedSecretsAndRevisionsCall{Call: call}
}

// MockSecretsClientUnitOwnedSecretsAndRevisionsCall wrap *gomock.Call
type MockSecretsClientUnitOwnedSecretsAndRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientUnitOwnedSecretsAndRevisionsCall) Return(arg0 []secrets.SecretURIWithRevisions, arg1 error) *MockSecretsClientUnitOwnedSecretsAndRevisionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientUnitOwnedSecretsAndRevisionsCall) Do(f func(context.Context, names.UnitTag) ([]secrets.SecretURIWithRevisions, error)) *MockSecretsClientUnitOwnedSecretsAndRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientUnitOwnedSecretsAndRevisionsCall) DoAndReturn(f func(context.Context, names.UnitTag) ([]secrets.SecretURIWithRevisions, error)) *MockSecretsClientUnitOwnedSecretsAndRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConsumedSecretsChanges mocks base method.
func (m *MockSecretsClient) WatchConsumedSecretsChanges(arg0 context.Context, arg1 string) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumedSecretsChanges", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumedSecretsChanges indicates an expected call of WatchConsumedSecretsChanges.
func (mr *MockSecretsClientMockRecorder) WatchConsumedSecretsChanges(arg0, arg1 any) *MockSecretsClientWatchConsumedSecretsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumedSecretsChanges", reflect.TypeOf((*MockSecretsClient)(nil).WatchConsumedSecretsChanges), arg0, arg1)
	return &MockSecretsClientWatchConsumedSecretsChangesCall{Call: call}
}

// MockSecretsClientWatchConsumedSecretsChangesCall wrap *gomock.Call
type MockSecretsClientWatchConsumedSecretsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientWatchConsumedSecretsChangesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockSecretsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientWatchConsumedSecretsChangesCall) Do(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientWatchConsumedSecretsChangesCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchDeleted mocks base method.
func (m *MockSecretsClient) WatchDeleted(arg0 context.Context, arg1 ...names.Tag) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchDeleted", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDeleted indicates an expected call of WatchDeleted.
func (mr *MockSecretsClientMockRecorder) WatchDeleted(arg0 any, arg1 ...any) *MockSecretsClientWatchDeletedCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDeleted", reflect.TypeOf((*MockSecretsClient)(nil).WatchDeleted), varargs...)
	return &MockSecretsClientWatchDeletedCall{Call: call}
}

// MockSecretsClientWatchDeletedCall wrap *gomock.Call
type MockSecretsClientWatchDeletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientWatchDeletedCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockSecretsClientWatchDeletedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientWatchDeletedCall) Do(f func(context.Context, ...names.Tag) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchDeletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientWatchDeletedCall) DoAndReturn(f func(context.Context, ...names.Tag) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchDeletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchObsolete mocks base method.
func (m *MockSecretsClient) WatchObsolete(arg0 context.Context, arg1 ...names.Tag) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchObsolete", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchObsolete indicates an expected call of WatchObsolete.
func (mr *MockSecretsClientMockRecorder) WatchObsolete(arg0 any, arg1 ...any) *MockSecretsClientWatchObsoleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchObsolete", reflect.TypeOf((*MockSecretsClient)(nil).WatchObsolete), varargs...)
	return &MockSecretsClientWatchObsoleteCall{Call: call}
}

// MockSecretsClientWatchObsoleteCall wrap *gomock.Call
type MockSecretsClientWatchObsoleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsClientWatchObsoleteCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockSecretsClientWatchObsoleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsClientWatchObsoleteCall) Do(f func(context.Context, ...names.Tag) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchObsoleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsClientWatchObsoleteCall) DoAndReturn(f func(context.Context, ...names.Tag) (watcher.Watcher[[]string], error)) *MockSecretsClientWatchObsoleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
