// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/gce (interfaces: ComputeService)
//
// Generated by this command:
//
//	mockgen -package gce -destination gcemock_test.go github.com/juju/juju/internal/provider/gce ComputeService
//

// Package gce is a generated GoMock package.
package gce

import (
	context "context"
	reflect "reflect"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	google "github.com/juju/juju/internal/provider/gce/internal/google"
	gomock "go.uber.org/mock/gomock"
)

// MockComputeService is a mock of ComputeService interface.
type MockComputeService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeServiceMockRecorder
}

// MockComputeServiceMockRecorder is the mock recorder for MockComputeService.
type MockComputeServiceMockRecorder struct {
	mock *MockComputeService
}

// NewMockComputeService creates a new mock instance.
func NewMockComputeService(ctrl *gomock.Controller) *MockComputeService {
	mock := &MockComputeService{ctrl: ctrl}
	mock.recorder = &MockComputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeService) EXPECT() *MockComputeServiceMockRecorder {
	return m.recorder
}

// AddFirewall mocks base method.
func (m *MockComputeService) AddFirewall(arg0 context.Context, arg1 *computepb.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFirewall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFirewall indicates an expected call of AddFirewall.
func (mr *MockComputeServiceMockRecorder) AddFirewall(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFirewall", reflect.TypeOf((*MockComputeService)(nil).AddFirewall), arg0, arg1)
}

// AddInstance mocks base method.
func (m *MockComputeService) AddInstance(arg0 context.Context, arg1 *computepb.Instance) (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstance", arg0, arg1)
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstance indicates an expected call of AddInstance.
func (mr *MockComputeServiceMockRecorder) AddInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstance", reflect.TypeOf((*MockComputeService)(nil).AddInstance), arg0, arg1)
}

// AttachDisk mocks base method.
func (m *MockComputeService) AttachDisk(arg0 context.Context, arg1, arg2, arg3 string, arg4 google.DiskMode) (*computepb.AttachedDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*computepb.AttachedDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachDisk indicates an expected call of AttachDisk.
func (mr *MockComputeServiceMockRecorder) AttachDisk(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockComputeService)(nil).AttachDisk), arg0, arg1, arg2, arg3, arg4)
}

// AvailabilityZones mocks base method.
func (m *MockComputeService) AvailabilityZones(arg0 context.Context, arg1 string) ([]*computepb.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones", arg0, arg1)
	ret0, _ := ret[0].([]*computepb.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZones indicates an expected call of AvailabilityZones.
func (mr *MockComputeServiceMockRecorder) AvailabilityZones(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockComputeService)(nil).AvailabilityZones), arg0, arg1)
}

// CreateDisks mocks base method.
func (m *MockComputeService) CreateDisks(arg0 context.Context, arg1 string, arg2 []*computepb.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisks indicates an expected call of CreateDisks.
func (mr *MockComputeServiceMockRecorder) CreateDisks(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisks", reflect.TypeOf((*MockComputeService)(nil).CreateDisks), arg0, arg1, arg2)
}

// DefaultServiceAccount mocks base method.
func (m *MockComputeService) DefaultServiceAccount(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultServiceAccount", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultServiceAccount indicates an expected call of DefaultServiceAccount.
func (mr *MockComputeServiceMockRecorder) DefaultServiceAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultServiceAccount", reflect.TypeOf((*MockComputeService)(nil).DefaultServiceAccount), arg0)
}

// DetachDisk mocks base method.
func (m *MockComputeService) DetachDisk(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk.
func (mr *MockComputeServiceMockRecorder) DetachDisk(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockComputeService)(nil).DetachDisk), arg0, arg1, arg2, arg3)
}

// Disk mocks base method.
func (m *MockComputeService) Disk(arg0 context.Context, arg1, arg2 string) (*computepb.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disk", arg0, arg1, arg2)
	ret0, _ := ret[0].(*computepb.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disk indicates an expected call of Disk.
func (mr *MockComputeServiceMockRecorder) Disk(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disk", reflect.TypeOf((*MockComputeService)(nil).Disk), arg0, arg1, arg2)
}

// Disks mocks base method.
func (m *MockComputeService) Disks(arg0 context.Context) ([]*computepb.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disks", arg0)
	ret0, _ := ret[0].([]*computepb.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disks indicates an expected call of Disks.
func (mr *MockComputeServiceMockRecorder) Disks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disks", reflect.TypeOf((*MockComputeService)(nil).Disks), arg0)
}

// Firewalls mocks base method.
func (m *MockComputeService) Firewalls(arg0 context.Context, arg1 string) ([]*computepb.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Firewalls", arg0, arg1)
	ret0, _ := ret[0].([]*computepb.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Firewalls indicates an expected call of Firewalls.
func (mr *MockComputeServiceMockRecorder) Firewalls(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Firewalls", reflect.TypeOf((*MockComputeService)(nil).Firewalls), arg0, arg1)
}

// Instance mocks base method.
func (m *MockComputeService) Instance(arg0 context.Context, arg1, arg2 string) (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instance indicates an expected call of Instance.
func (mr *MockComputeServiceMockRecorder) Instance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockComputeService)(nil).Instance), arg0, arg1, arg2)
}

// InstanceDisks mocks base method.
func (m *MockComputeService) InstanceDisks(arg0 context.Context, arg1, arg2 string) ([]*computepb.AttachedDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceDisks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*computepb.AttachedDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceDisks indicates an expected call of InstanceDisks.
func (mr *MockComputeServiceMockRecorder) InstanceDisks(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceDisks", reflect.TypeOf((*MockComputeService)(nil).InstanceDisks), arg0, arg1, arg2)
}

// Instances mocks base method.
func (m *MockComputeService) Instances(arg0 context.Context, arg1 string, arg2 ...string) ([]*computepb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Instances", varargs...)
	ret0, _ := ret[0].([]*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockComputeServiceMockRecorder) Instances(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockComputeService)(nil).Instances), varargs...)
}

// ListMachineTypes mocks base method.
func (m *MockComputeService) ListMachineTypes(arg0 context.Context, arg1 string) ([]*computepb.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineTypes", arg0, arg1)
	ret0, _ := ret[0].([]*computepb.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypes indicates an expected call of ListMachineTypes.
func (mr *MockComputeServiceMockRecorder) ListMachineTypes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypes", reflect.TypeOf((*MockComputeService)(nil).ListMachineTypes), arg0, arg1)
}

// MachineType mocks base method.
func (m *MockComputeService) MachineType(arg0 context.Context, arg1, arg2 string) (*computepb.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*computepb.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineType indicates an expected call of MachineType.
func (mr *MockComputeServiceMockRecorder) MachineType(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineType", reflect.TypeOf((*MockComputeService)(nil).MachineType), arg0, arg1, arg2)
}

// Network mocks base method.
func (m *MockComputeService) Network(arg0 context.Context, arg1 string) (*computepb.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", arg0, arg1)
	ret0, _ := ret[0].(*computepb.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network.
func (mr *MockComputeServiceMockRecorder) Network(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockComputeService)(nil).Network), arg0, arg1)
}

// NetworkFirewalls mocks base method.
func (m *MockComputeService) NetworkFirewalls(arg0 context.Context, arg1 string) ([]*computepb.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkFirewalls", arg0, arg1)
	ret0, _ := ret[0].([]*computepb.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkFirewalls indicates an expected call of NetworkFirewalls.
func (mr *MockComputeServiceMockRecorder) NetworkFirewalls(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkFirewalls", reflect.TypeOf((*MockComputeService)(nil).NetworkFirewalls), arg0, arg1)
}

// NetworkSubnetworks mocks base method.
func (m *MockComputeService) NetworkSubnetworks(arg0 context.Context, arg1, arg2 string) ([]*computepb.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkSubnetworks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*computepb.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkSubnetworks indicates an expected call of NetworkSubnetworks.
func (mr *MockComputeServiceMockRecorder) NetworkSubnetworks(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkSubnetworks", reflect.TypeOf((*MockComputeService)(nil).NetworkSubnetworks), arg0, arg1, arg2)
}

// Networks mocks base method.
func (m *MockComputeService) Networks(arg0 context.Context) ([]*computepb.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Networks", arg0)
	ret0, _ := ret[0].([]*computepb.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networks indicates an expected call of Networks.
func (mr *MockComputeServiceMockRecorder) Networks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networks", reflect.TypeOf((*MockComputeService)(nil).Networks), arg0)
}

// RemoveDisk mocks base method.
func (m *MockComputeService) RemoveDisk(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDisk", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDisk indicates an expected call of RemoveDisk.
func (mr *MockComputeServiceMockRecorder) RemoveDisk(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDisk", reflect.TypeOf((*MockComputeService)(nil).RemoveDisk), arg0, arg1, arg2)
}

// RemoveFirewall mocks base method.
func (m *MockComputeService) RemoveFirewall(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFirewall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFirewall indicates an expected call of RemoveFirewall.
func (mr *MockComputeServiceMockRecorder) RemoveFirewall(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFirewall", reflect.TypeOf((*MockComputeService)(nil).RemoveFirewall), arg0, arg1)
}

// RemoveInstances mocks base method.
func (m *MockComputeService) RemoveInstances(arg0 context.Context, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInstances indicates an expected call of RemoveInstances.
func (mr *MockComputeServiceMockRecorder) RemoveInstances(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstances", reflect.TypeOf((*MockComputeService)(nil).RemoveInstances), varargs...)
}

// SetDiskLabels mocks base method.
func (m *MockComputeService) SetDiskLabels(arg0 context.Context, arg1, arg2, arg3 string, arg4 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiskLabels", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiskLabels indicates an expected call of SetDiskLabels.
func (mr *MockComputeServiceMockRecorder) SetDiskLabels(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskLabels", reflect.TypeOf((*MockComputeService)(nil).SetDiskLabels), arg0, arg1, arg2, arg3, arg4)
}

// Subnetworks mocks base method.
func (m *MockComputeService) Subnetworks(arg0 context.Context, arg1 string, arg2 ...string) ([]*computepb.Subnetwork, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subnetworks", varargs...)
	ret0, _ := ret[0].([]*computepb.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnetworks indicates an expected call of Subnetworks.
func (mr *MockComputeServiceMockRecorder) Subnetworks(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnetworks", reflect.TypeOf((*MockComputeService)(nil).Subnetworks), varargs...)
}

// UpdateFirewall mocks base method.
func (m *MockComputeService) UpdateFirewall(arg0 context.Context, arg1 string, arg2 *computepb.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirewall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirewall indicates an expected call of UpdateFirewall.
func (mr *MockComputeServiceMockRecorder) UpdateFirewall(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewall", reflect.TypeOf((*MockComputeService)(nil).UpdateFirewall), arg0, arg1, arg2)
}

// UpdateMetadata mocks base method.
func (m *MockComputeService) UpdateMetadata(arg0 context.Context, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetadata", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockComputeServiceMockRecorder) UpdateMetadata(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockComputeService)(nil).UpdateMetadata), varargs...)
}

// VerifyCredentials mocks base method.
func (m *MockComputeService) VerifyCredentials(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCredentials", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCredentials indicates an expected call of VerifyCredentials.
func (mr *MockComputeServiceMockRecorder) VerifyCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCredentials", reflect.TypeOf((*MockComputeService)(nil).VerifyCredentials), arg0)
}
