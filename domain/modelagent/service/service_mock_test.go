// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelagent/service (interfaces: AgentBinaryFinder,ModelState,ControllerState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modelagent/service AgentBinaryFinder,ModelState,ControllerState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	base "github.com/juju/juju/core/base"
	machine "github.com/juju/juju/core/machine"
	semversion "github.com/juju/juju/core/semversion"
	unit "github.com/juju/juju/core/unit"
	agentbinary0 "github.com/juju/juju/domain/agentbinary"
	modelagent "github.com/juju/juju/domain/modelagent"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryFinder is a mock of AgentBinaryFinder interface.
type MockAgentBinaryFinder struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryFinderMockRecorder
}

// MockAgentBinaryFinderMockRecorder is the mock recorder for MockAgentBinaryFinder.
type MockAgentBinaryFinderMockRecorder struct {
	mock *MockAgentBinaryFinder
}

// NewMockAgentBinaryFinder creates a new mock instance.
func NewMockAgentBinaryFinder(ctrl *gomock.Controller) *MockAgentBinaryFinder {
	mock := &MockAgentBinaryFinder{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryFinder) EXPECT() *MockAgentBinaryFinderMockRecorder {
	return m.recorder
}

// HasBinariesForVersion mocks base method.
func (m *MockAgentBinaryFinder) HasBinariesForVersion(arg0 semversion.Number) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinariesForVersion", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBinariesForVersion indicates an expected call of HasBinariesForVersion.
func (mr *MockAgentBinaryFinderMockRecorder) HasBinariesForVersion(arg0 any) *MockAgentBinaryFinderHasBinariesForVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinariesForVersion", reflect.TypeOf((*MockAgentBinaryFinder)(nil).HasBinariesForVersion), arg0)
	return &MockAgentBinaryFinderHasBinariesForVersionCall{Call: call}
}

// MockAgentBinaryFinderHasBinariesForVersionCall wrap *gomock.Call
type MockAgentBinaryFinderHasBinariesForVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) Return(arg0 bool, arg1 error) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) Do(f func(semversion.Number) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) DoAndReturn(f func(semversion.Number) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// GetMachineAgentBinaryMetadata mocks base method.
func (m *MockModelState) GetMachineAgentBinaryMetadata(arg0 context.Context, arg1 string) (agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineAgentBinaryMetadata", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineAgentBinaryMetadata indicates an expected call of GetMachineAgentBinaryMetadata.
func (mr *MockModelStateMockRecorder) GetMachineAgentBinaryMetadata(arg0, arg1 any) *MockModelStateGetMachineAgentBinaryMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineAgentBinaryMetadata", reflect.TypeOf((*MockModelState)(nil).GetMachineAgentBinaryMetadata), arg0, arg1)
	return &MockModelStateGetMachineAgentBinaryMetadataCall{Call: call}
}

// MockModelStateGetMachineAgentBinaryMetadataCall wrap *gomock.Call
type MockModelStateGetMachineAgentBinaryMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineAgentBinaryMetadataCall) Return(arg0 agentbinary.Metadata, arg1 error) *MockModelStateGetMachineAgentBinaryMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineAgentBinaryMetadataCall) Do(f func(context.Context, string) (agentbinary.Metadata, error)) *MockModelStateGetMachineAgentBinaryMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineAgentBinaryMetadataCall) DoAndReturn(f func(context.Context, string) (agentbinary.Metadata, error)) *MockModelStateGetMachineAgentBinaryMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineCountNotUsingBase mocks base method.
func (m *MockModelState) GetMachineCountNotUsingBase(arg0 context.Context, arg1 []base.Base) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineCountNotUsingBase", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineCountNotUsingBase indicates an expected call of GetMachineCountNotUsingBase.
func (mr *MockModelStateMockRecorder) GetMachineCountNotUsingBase(arg0, arg1 any) *MockModelStateGetMachineCountNotUsingBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineCountNotUsingBase", reflect.TypeOf((*MockModelState)(nil).GetMachineCountNotUsingBase), arg0, arg1)
	return &MockModelStateGetMachineCountNotUsingBaseCall{Call: call}
}

// MockModelStateGetMachineCountNotUsingBaseCall wrap *gomock.Call
type MockModelStateGetMachineCountNotUsingBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineCountNotUsingBaseCall) Return(arg0 int, arg1 error) *MockModelStateGetMachineCountNotUsingBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineCountNotUsingBaseCall) Do(f func(context.Context, []base.Base) (int, error)) *MockModelStateGetMachineCountNotUsingBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineCountNotUsingBaseCall) DoAndReturn(f func(context.Context, []base.Base) (int, error)) *MockModelStateGetMachineCountNotUsingBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineRunningAgentBinaryVersion mocks base method.
func (m *MockModelState) GetMachineRunningAgentBinaryVersion(arg0 context.Context, arg1 string) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineRunningAgentBinaryVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineRunningAgentBinaryVersion indicates an expected call of GetMachineRunningAgentBinaryVersion.
func (mr *MockModelStateMockRecorder) GetMachineRunningAgentBinaryVersion(arg0, arg1 any) *MockModelStateGetMachineRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineRunningAgentBinaryVersion", reflect.TypeOf((*MockModelState)(nil).GetMachineRunningAgentBinaryVersion), arg0, arg1)
	return &MockModelStateGetMachineRunningAgentBinaryVersionCall{Call: call}
}

// MockModelStateGetMachineRunningAgentBinaryVersionCall wrap *gomock.Call
type MockModelStateGetMachineRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineRunningAgentBinaryVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineRunningAgentBinaryVersionCall) Do(f func(context.Context, string) (agentbinary.Version, error)) *MockModelStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string) (agentbinary.Version, error)) *MockModelStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineTargetAgentVersion mocks base method.
func (m *MockModelState) GetMachineTargetAgentVersion(arg0 context.Context, arg1 string) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTargetAgentVersion indicates an expected call of GetMachineTargetAgentVersion.
func (mr *MockModelStateMockRecorder) GetMachineTargetAgentVersion(arg0, arg1 any) *MockModelStateGetMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).GetMachineTargetAgentVersion), arg0, arg1)
	return &MockModelStateGetMachineTargetAgentVersionCall{Call: call}
}

// MockModelStateGetMachineTargetAgentVersionCall wrap *gomock.Call
type MockModelStateGetMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineTargetAgentVersionCall) Do(f func(context.Context, string) (agentbinary.Version, error)) *MockModelStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, string) (agentbinary.Version, error)) *MockModelStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUIDByName mocks base method.
func (m *MockModelState) GetMachineUUIDByName(arg0 context.Context, arg1 machine.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUIDByName indicates an expected call of GetMachineUUIDByName.
func (mr *MockModelStateMockRecorder) GetMachineUUIDByName(arg0, arg1 any) *MockModelStateGetMachineUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUIDByName", reflect.TypeOf((*MockModelState)(nil).GetMachineUUIDByName), arg0, arg1)
	return &MockModelStateGetMachineUUIDByNameCall{Call: call}
}

// MockModelStateGetMachineUUIDByNameCall wrap *gomock.Call
type MockModelStateGetMachineUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineUUIDByNameCall) Return(arg0 string, arg1 error) *MockModelStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineUUIDByNameCall) Do(f func(context.Context, machine.Name) (string, error)) *MockModelStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineUUIDByNameCall) DoAndReturn(f func(context.Context, machine.Name) (string, error)) *MockModelStateGetMachineUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinesAgentBinaryMetadata mocks base method.
func (m *MockModelState) GetMachinesAgentBinaryMetadata(arg0 context.Context) (map[machine.Name]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesAgentBinaryMetadata", arg0)
	ret0, _ := ret[0].(map[machine.Name]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesAgentBinaryMetadata indicates an expected call of GetMachinesAgentBinaryMetadata.
func (mr *MockModelStateMockRecorder) GetMachinesAgentBinaryMetadata(arg0 any) *MockModelStateGetMachinesAgentBinaryMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesAgentBinaryMetadata", reflect.TypeOf((*MockModelState)(nil).GetMachinesAgentBinaryMetadata), arg0)
	return &MockModelStateGetMachinesAgentBinaryMetadataCall{Call: call}
}

// MockModelStateGetMachinesAgentBinaryMetadataCall wrap *gomock.Call
type MockModelStateGetMachinesAgentBinaryMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachinesAgentBinaryMetadataCall) Return(arg0 map[machine.Name]agentbinary.Metadata, arg1 error) *MockModelStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachinesAgentBinaryMetadataCall) Do(f func(context.Context) (map[machine.Name]agentbinary.Metadata, error)) *MockModelStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachinesAgentBinaryMetadataCall) DoAndReturn(f func(context.Context) (map[machine.Name]agentbinary.Metadata, error)) *MockModelStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinesNotAtTargetAgentVersion mocks base method.
func (m *MockModelState) GetMachinesNotAtTargetAgentVersion(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesNotAtTargetAgentVersion indicates an expected call of GetMachinesNotAtTargetAgentVersion.
func (mr *MockModelStateMockRecorder) GetMachinesNotAtTargetAgentVersion(arg0 any) *MockModelStateGetMachinesNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesNotAtTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).GetMachinesNotAtTargetAgentVersion), arg0)
	return &MockModelStateGetMachinesNotAtTargetAgentVersionCall{Call: call}
}

// MockModelStateGetMachinesNotAtTargetAgentVersionCall wrap *gomock.Call
type MockModelStateGetMachinesNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachinesNotAtTargetAgentVersionCall) Return(arg0 []machine.Name, arg1 error) *MockModelStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachinesNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]machine.Name, error)) *MockModelStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachinesNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockModelStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelState) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelStateMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelStateGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelStateGetModelTargetAgentVersionCall{Call: call}
}

// MockModelStateGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelStateGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitRunningAgentBinaryVersion mocks base method.
func (m *MockModelState) GetUnitRunningAgentBinaryVersion(arg0 context.Context, arg1 unit.UUID) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitRunningAgentBinaryVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitRunningAgentBinaryVersion indicates an expected call of GetUnitRunningAgentBinaryVersion.
func (mr *MockModelStateMockRecorder) GetUnitRunningAgentBinaryVersion(arg0, arg1 any) *MockModelStateGetUnitRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitRunningAgentBinaryVersion", reflect.TypeOf((*MockModelState)(nil).GetUnitRunningAgentBinaryVersion), arg0, arg1)
	return &MockModelStateGetUnitRunningAgentBinaryVersionCall{Call: call}
}

// MockModelStateGetUnitRunningAgentBinaryVersionCall wrap *gomock.Call
type MockModelStateGetUnitRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitRunningAgentBinaryVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitRunningAgentBinaryVersionCall) Do(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockModelStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockModelStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitTargetAgentVersion mocks base method.
func (m *MockModelState) GetUnitTargetAgentVersion(arg0 context.Context, arg1 unit.UUID) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTargetAgentVersion indicates an expected call of GetUnitTargetAgentVersion.
func (mr *MockModelStateMockRecorder) GetUnitTargetAgentVersion(arg0, arg1 any) *MockModelStateGetUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).GetUnitTargetAgentVersion), arg0, arg1)
	return &MockModelStateGetUnitTargetAgentVersionCall{Call: call}
}

// MockModelStateGetUnitTargetAgentVersionCall wrap *gomock.Call
type MockModelStateGetUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitTargetAgentVersionCall) Do(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockModelStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockModelStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockModelState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockModelStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockModelStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockModelState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockModelStateGetUnitUUIDByNameCall{Call: call}
}

// MockModelStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockModelStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitsAgentBinaryMetadata mocks base method.
func (m *MockModelState) GetUnitsAgentBinaryMetadata(arg0 context.Context) (map[unit.Name]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsAgentBinaryMetadata", arg0)
	ret0, _ := ret[0].(map[unit.Name]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsAgentBinaryMetadata indicates an expected call of GetUnitsAgentBinaryMetadata.
func (mr *MockModelStateMockRecorder) GetUnitsAgentBinaryMetadata(arg0 any) *MockModelStateGetUnitsAgentBinaryMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsAgentBinaryMetadata", reflect.TypeOf((*MockModelState)(nil).GetUnitsAgentBinaryMetadata), arg0)
	return &MockModelStateGetUnitsAgentBinaryMetadataCall{Call: call}
}

// MockModelStateGetUnitsAgentBinaryMetadataCall wrap *gomock.Call
type MockModelStateGetUnitsAgentBinaryMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitsAgentBinaryMetadataCall) Return(arg0 map[unit.Name]agentbinary.Metadata, arg1 error) *MockModelStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitsAgentBinaryMetadataCall) Do(f func(context.Context) (map[unit.Name]agentbinary.Metadata, error)) *MockModelStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitsAgentBinaryMetadataCall) DoAndReturn(f func(context.Context) (map[unit.Name]agentbinary.Metadata, error)) *MockModelStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitsNotAtTargetAgentVersion mocks base method.
func (m *MockModelState) GetUnitsNotAtTargetAgentVersion(arg0 context.Context) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsNotAtTargetAgentVersion indicates an expected call of GetUnitsNotAtTargetAgentVersion.
func (mr *MockModelStateMockRecorder) GetUnitsNotAtTargetAgentVersion(arg0 any) *MockModelStateGetUnitsNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsNotAtTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).GetUnitsNotAtTargetAgentVersion), arg0)
	return &MockModelStateGetUnitsNotAtTargetAgentVersionCall{Call: call}
}

// MockModelStateGetUnitsNotAtTargetAgentVersionCall wrap *gomock.Call
type MockModelStateGetUnitsNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitsNotAtTargetAgentVersionCall) Return(arg0 []unit.Name, arg1 error) *MockModelStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitsNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]unit.Name, error)) *MockModelStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitsNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]unit.Name, error)) *MockModelStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerModel mocks base method.
func (m *MockModelState) IsControllerModel(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerModel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerModel indicates an expected call of IsControllerModel.
func (mr *MockModelStateMockRecorder) IsControllerModel(arg0 any) *MockModelStateIsControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerModel", reflect.TypeOf((*MockModelState)(nil).IsControllerModel), arg0)
	return &MockModelStateIsControllerModelCall{Call: call}
}

// MockModelStateIsControllerModelCall wrap *gomock.Call
type MockModelStateIsControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateIsControllerModelCall) Return(arg0 bool, arg1 error) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateIsControllerModelCall) Do(f func(context.Context) (bool, error)) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateIsControllerModelCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchAgentVersion mocks base method.
func (m *MockModelState) NamespaceForWatchAgentVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchAgentVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchAgentVersion indicates an expected call of NamespaceForWatchAgentVersion.
func (mr *MockModelStateMockRecorder) NamespaceForWatchAgentVersion() *MockModelStateNamespaceForWatchAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchAgentVersion", reflect.TypeOf((*MockModelState)(nil).NamespaceForWatchAgentVersion))
	return &MockModelStateNamespaceForWatchAgentVersionCall{Call: call}
}

// MockModelStateNamespaceForWatchAgentVersionCall wrap *gomock.Call
type MockModelStateNamespaceForWatchAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateNamespaceForWatchAgentVersionCall) Return(arg0 string) *MockModelStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateNamespaceForWatchAgentVersionCall) Do(f func() string) *MockModelStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateNamespaceForWatchAgentVersionCall) DoAndReturn(f func() string) *MockModelStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineRunningAgentBinaryVersion mocks base method.
func (m *MockModelState) SetMachineRunningAgentBinaryVersion(arg0 context.Context, arg1 string, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineRunningAgentBinaryVersion indicates an expected call of SetMachineRunningAgentBinaryVersion.
func (mr *MockModelStateMockRecorder) SetMachineRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockModelStateSetMachineRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineRunningAgentBinaryVersion", reflect.TypeOf((*MockModelState)(nil).SetMachineRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockModelStateSetMachineRunningAgentBinaryVersionCall{Call: call}
}

// MockModelStateSetMachineRunningAgentBinaryVersionCall wrap *gomock.Call
type MockModelStateSetMachineRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetMachineRunningAgentBinaryVersionCall) Return(arg0 error) *MockModelStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetMachineRunningAgentBinaryVersionCall) Do(f func(context.Context, string, agentbinary.Version) error) *MockModelStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetMachineRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string, agentbinary.Version) error) *MockModelStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelAgentStream mocks base method.
func (m *MockModelState) SetModelAgentStream(arg0 context.Context, arg1 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelAgentStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelAgentStream indicates an expected call of SetModelAgentStream.
func (mr *MockModelStateMockRecorder) SetModelAgentStream(arg0, arg1 any) *MockModelStateSetModelAgentStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelAgentStream", reflect.TypeOf((*MockModelState)(nil).SetModelAgentStream), arg0, arg1)
	return &MockModelStateSetModelAgentStreamCall{Call: call}
}

// MockModelStateSetModelAgentStreamCall wrap *gomock.Call
type MockModelStateSetModelAgentStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelAgentStreamCall) Return(arg0 error) *MockModelStateSetModelAgentStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelAgentStreamCall) Do(f func(context.Context, modelagent.AgentStream) error) *MockModelStateSetModelAgentStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelAgentStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) error) *MockModelStateSetModelAgentStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersion mocks base method.
func (m *MockModelState) SetModelTargetAgentVersion(arg0 context.Context, arg1, arg2 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersion indicates an expected call of SetModelTargetAgentVersion.
func (mr *MockModelStateMockRecorder) SetModelTargetAgentVersion(arg0, arg1, arg2 any) *MockModelStateSetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersion", reflect.TypeOf((*MockModelState)(nil).SetModelTargetAgentVersion), arg0, arg1, arg2)
	return &MockModelStateSetModelTargetAgentVersionCall{Call: call}
}

// MockModelStateSetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelStateSetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelTargetAgentVersionCall) Return(arg0 error) *MockModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelTargetAgentVersionCall) Do(f func(context.Context, semversion.Number, semversion.Number) error) *MockModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number) error) *MockModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersionAndStream mocks base method.
func (m *MockModelState) SetModelTargetAgentVersionAndStream(arg0 context.Context, arg1, arg2 semversion.Number, arg3 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersionAndStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersionAndStream indicates an expected call of SetModelTargetAgentVersionAndStream.
func (mr *MockModelStateMockRecorder) SetModelTargetAgentVersionAndStream(arg0, arg1, arg2, arg3 any) *MockModelStateSetModelTargetAgentVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersionAndStream", reflect.TypeOf((*MockModelState)(nil).SetModelTargetAgentVersionAndStream), arg0, arg1, arg2, arg3)
	return &MockModelStateSetModelTargetAgentVersionAndStreamCall{Call: call}
}

// MockModelStateSetModelTargetAgentVersionAndStreamCall wrap *gomock.Call
type MockModelStateSetModelTargetAgentVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelTargetAgentVersionAndStreamCall) Return(arg0 error) *MockModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelTargetAgentVersionAndStreamCall) Do(f func(context.Context, semversion.Number, semversion.Number, modelagent.AgentStream) error) *MockModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelTargetAgentVersionAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number, modelagent.AgentStream) error) *MockModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitRunningAgentBinaryVersion mocks base method.
func (m *MockModelState) SetUnitRunningAgentBinaryVersion(arg0 context.Context, arg1 unit.UUID, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitRunningAgentBinaryVersion indicates an expected call of SetUnitRunningAgentBinaryVersion.
func (mr *MockModelStateMockRecorder) SetUnitRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockModelStateSetUnitRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitRunningAgentBinaryVersion", reflect.TypeOf((*MockModelState)(nil).SetUnitRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockModelStateSetUnitRunningAgentBinaryVersionCall{Call: call}
}

// MockModelStateSetUnitRunningAgentBinaryVersionCall wrap *gomock.Call
type MockModelStateSetUnitRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetUnitRunningAgentBinaryVersionCall) Return(arg0 error) *MockModelStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetUnitRunningAgentBinaryVersionCall) Do(f func(context.Context, unit.UUID, agentbinary.Version) error) *MockModelStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetUnitRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, unit.UUID, agentbinary.Version) error) *MockModelStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLatestAgentVersion mocks base method.
func (m *MockModelState) UpdateLatestAgentVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLatestAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLatestAgentVersion indicates an expected call of UpdateLatestAgentVersion.
func (mr *MockModelStateMockRecorder) UpdateLatestAgentVersion(arg0, arg1 any) *MockModelStateUpdateLatestAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLatestAgentVersion", reflect.TypeOf((*MockModelState)(nil).UpdateLatestAgentVersion), arg0, arg1)
	return &MockModelStateUpdateLatestAgentVersionCall{Call: call}
}

// MockModelStateUpdateLatestAgentVersionCall wrap *gomock.Call
type MockModelStateUpdateLatestAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateUpdateLatestAgentVersionCall) Return(arg0 error) *MockModelStateUpdateLatestAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateUpdateLatestAgentVersionCall) Do(f func(context.Context, semversion.Number) error) *MockModelStateUpdateLatestAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateUpdateLatestAgentVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockModelStateUpdateLatestAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetControllerAgentVersionsByArchitecture mocks base method.
func (m *MockControllerState) GetControllerAgentVersionsByArchitecture(arg0 context.Context, arg1 []agentbinary0.Architecture) ([]semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerAgentVersionsByArchitecture", arg0, arg1)
	ret0, _ := ret[0].([]semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerAgentVersionsByArchitecture indicates an expected call of GetControllerAgentVersionsByArchitecture.
func (mr *MockControllerStateMockRecorder) GetControllerAgentVersionsByArchitecture(arg0, arg1 any) *MockControllerStateGetControllerAgentVersionsByArchitectureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerAgentVersionsByArchitecture", reflect.TypeOf((*MockControllerState)(nil).GetControllerAgentVersionsByArchitecture), arg0, arg1)
	return &MockControllerStateGetControllerAgentVersionsByArchitectureCall{Call: call}
}

// MockControllerStateGetControllerAgentVersionsByArchitectureCall wrap *gomock.Call
type MockControllerStateGetControllerAgentVersionsByArchitectureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetControllerAgentVersionsByArchitectureCall) Return(arg0 []semversion.Number, arg1 error) *MockControllerStateGetControllerAgentVersionsByArchitectureCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetControllerAgentVersionsByArchitectureCall) Do(f func(context.Context, []agentbinary0.Architecture) ([]semversion.Number, error)) *MockControllerStateGetControllerAgentVersionsByArchitectureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetControllerAgentVersionsByArchitectureCall) DoAndReturn(f func(context.Context, []agentbinary0.Architecture) ([]semversion.Number, error)) *MockControllerStateGetControllerAgentVersionsByArchitectureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
