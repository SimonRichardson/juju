// Code generated by MockGen. DO NOT EDIT.
// Source: ./migration.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination migration_mock_test.go -source=./migration.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/domain/machine"
	gomock "go.uber.org/mock/gomock"
)

// MockMigrationState is a mock of MigrationState interface.
type MockMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationStateMockRecorder
}

// MockMigrationStateMockRecorder is the mock recorder for MockMigrationState.
type MockMigrationStateMockRecorder struct {
	mock *MockMigrationState
}

// NewMockMigrationState creates a new mock instance.
func NewMockMigrationState(ctrl *gomock.Controller) *MockMigrationState {
	mock := &MockMigrationState{ctrl: ctrl}
	mock.recorder = &MockMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationState) EXPECT() *MockMigrationStateMockRecorder {
	return m.recorder
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMigrationState) GetHardwareCharacteristics(arg0 context.Context, arg1 string) (instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMigrationStateMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMigrationStateGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMigrationState)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMigrationStateGetHardwareCharacteristicsCall{Call: call}
}

// MockMigrationStateGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMigrationStateGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetHardwareCharacteristicsCall) Return(arg0 instance.HardwareCharacteristics, arg1 error) *MockMigrationStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetHardwareCharacteristicsCall) Do(f func(context.Context, string) (instance.HardwareCharacteristics, error)) *MockMigrationStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, string) (instance.HardwareCharacteristics, error)) *MockMigrationStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceID mocks base method.
func (m *MockMigrationState) GetInstanceID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockMigrationStateMockRecorder) GetInstanceID(arg0, arg1 any) *MockMigrationStateGetInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockMigrationState)(nil).GetInstanceID), arg0, arg1)
	return &MockMigrationStateGetInstanceIDCall{Call: call}
}

// MockMigrationStateGetInstanceIDCall wrap *gomock.Call
type MockMigrationStateGetInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetInstanceIDCall) Return(arg0 string, arg1 error) *MockMigrationStateGetInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetInstanceIDCall) Do(f func(context.Context, string) (string, error)) *MockMigrationStateGetInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetInstanceIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockMigrationStateGetInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinesForExport mocks base method.
func (m *MockMigrationState) GetMachinesForExport(ctx context.Context) ([]machine.ExportMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesForExport", ctx)
	ret0, _ := ret[0].([]machine.ExportMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesForExport indicates an expected call of GetMachinesForExport.
func (mr *MockMigrationStateMockRecorder) GetMachinesForExport(ctx any) *MockMigrationStateGetMachinesForExportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesForExport", reflect.TypeOf((*MockMigrationState)(nil).GetMachinesForExport), ctx)
	return &MockMigrationStateGetMachinesForExportCall{Call: call}
}

// MockMigrationStateGetMachinesForExportCall wrap *gomock.Call
type MockMigrationStateGetMachinesForExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetMachinesForExportCall) Return(arg0 []machine.ExportMachine, arg1 error) *MockMigrationStateGetMachinesForExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetMachinesForExportCall) Do(f func(context.Context) ([]machine.ExportMachine, error)) *MockMigrationStateGetMachinesForExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetMachinesForExportCall) DoAndReturn(f func(context.Context) ([]machine.ExportMachine, error)) *MockMigrationStateGetMachinesForExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertMigratingMachine mocks base method.
func (m *MockMigrationState) InsertMigratingMachine(ctx context.Context, machineName string, args machine.CreateMachineArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMigratingMachine", ctx, machineName, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMigratingMachine indicates an expected call of InsertMigratingMachine.
func (mr *MockMigrationStateMockRecorder) InsertMigratingMachine(ctx, machineName, args any) *MockMigrationStateInsertMigratingMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMigratingMachine", reflect.TypeOf((*MockMigrationState)(nil).InsertMigratingMachine), ctx, machineName, args)
	return &MockMigrationStateInsertMigratingMachineCall{Call: call}
}

// MockMigrationStateInsertMigratingMachineCall wrap *gomock.Call
type MockMigrationStateInsertMigratingMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateInsertMigratingMachineCall) Return(arg0 error) *MockMigrationStateInsertMigratingMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateInsertMigratingMachineCall) Do(f func(context.Context, string, machine.CreateMachineArgs) error) *MockMigrationStateInsertMigratingMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateInsertMigratingMachineCall) DoAndReturn(f func(context.Context, string, machine.CreateMachineArgs) error) *MockMigrationStateInsertMigratingMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineCloudInstance mocks base method.
func (m *MockMigrationState) SetMachineCloudInstance(arg0 context.Context, arg1 string, arg2 instance.Id, arg3, arg4 string, arg5 *instance.HardwareCharacteristics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineCloudInstance", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineCloudInstance indicates an expected call of SetMachineCloudInstance.
func (mr *MockMigrationStateMockRecorder) SetMachineCloudInstance(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockMigrationStateSetMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineCloudInstance", reflect.TypeOf((*MockMigrationState)(nil).SetMachineCloudInstance), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockMigrationStateSetMachineCloudInstanceCall{Call: call}
}

// MockMigrationStateSetMachineCloudInstanceCall wrap *gomock.Call
type MockMigrationStateSetMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetMachineCloudInstanceCall) Return(arg0 error) *MockMigrationStateSetMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetMachineCloudInstanceCall) Do(f func(context.Context, string, instance.Id, string, string, *instance.HardwareCharacteristics) error) *MockMigrationStateSetMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetMachineCloudInstanceCall) DoAndReturn(f func(context.Context, string, instance.Id, string, string, *instance.HardwareCharacteristics) error) *MockMigrationStateSetMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
