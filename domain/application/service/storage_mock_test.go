// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: StorageService)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination storage_mock_test.go github.com/juju/juju/domain/application/service StorageService
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	application "github.com/juju/juju/core/application"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	internal "github.com/juju/juju/domain/application/internal"
	storage "github.com/juju/juju/domain/application/service/storage"
	network "github.com/juju/juju/domain/network"
	charm "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// GetApplicationStorageDirectives mocks base method.
func (m *MockStorageService) GetApplicationStorageDirectives(arg0 context.Context, arg1 application.ID) ([]application0.StorageDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStorageDirectives", arg0, arg1)
	ret0, _ := ret[0].([]application0.StorageDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStorageDirectives indicates an expected call of GetApplicationStorageDirectives.
func (mr *MockStorageServiceMockRecorder) GetApplicationStorageDirectives(arg0, arg1 any) *MockStorageServiceGetApplicationStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStorageDirectives", reflect.TypeOf((*MockStorageService)(nil).GetApplicationStorageDirectives), arg0, arg1)
	return &MockStorageServiceGetApplicationStorageDirectivesCall{Call: call}
}

// MockStorageServiceGetApplicationStorageDirectivesCall wrap *gomock.Call
type MockStorageServiceGetApplicationStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetApplicationStorageDirectivesCall) Return(arg0 []application0.StorageDirective, arg1 error) *MockStorageServiceGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetApplicationStorageDirectivesCall) Do(f func(context.Context, application.ID) ([]application0.StorageDirective, error)) *MockStorageServiceGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetApplicationStorageDirectivesCall) DoAndReturn(f func(context.Context, application.ID) ([]application0.StorageDirective, error)) *MockStorageServiceGetApplicationStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegisterCAASUnitStorageArg mocks base method.
func (m *MockStorageService) GetRegisterCAASUnitStorageArg(arg0 context.Context, arg1 application.ID, arg2 unit.UUID, arg3 network.NetNodeUUID, arg4 []caas.FilesystemInfo) (application0.RegisterUnitStorageArg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterCAASUnitStorageArg", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(application0.RegisterUnitStorageArg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterCAASUnitStorageArg indicates an expected call of GetRegisterCAASUnitStorageArg.
func (mr *MockStorageServiceMockRecorder) GetRegisterCAASUnitStorageArg(arg0, arg1, arg2, arg3, arg4 any) *MockStorageServiceGetRegisterCAASUnitStorageArgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterCAASUnitStorageArg", reflect.TypeOf((*MockStorageService)(nil).GetRegisterCAASUnitStorageArg), arg0, arg1, arg2, arg3, arg4)
	return &MockStorageServiceGetRegisterCAASUnitStorageArgCall{Call: call}
}

// MockStorageServiceGetRegisterCAASUnitStorageArgCall wrap *gomock.Call
type MockStorageServiceGetRegisterCAASUnitStorageArgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetRegisterCAASUnitStorageArgCall) Return(arg0 application0.RegisterUnitStorageArg, arg1 error) *MockStorageServiceGetRegisterCAASUnitStorageArgCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetRegisterCAASUnitStorageArgCall) Do(f func(context.Context, application.ID, unit.UUID, network.NetNodeUUID, []caas.FilesystemInfo) (application0.RegisterUnitStorageArg, error)) *MockStorageServiceGetRegisterCAASUnitStorageArgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetRegisterCAASUnitStorageArgCall) DoAndReturn(f func(context.Context, application.ID, unit.UUID, network.NetNodeUUID, []caas.FilesystemInfo) (application0.RegisterUnitStorageArg, error)) *MockStorageServiceGetRegisterCAASUnitStorageArgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeApplicationStorageDirectiveArgs mocks base method.
func (m *MockStorageService) MakeApplicationStorageDirectiveArgs(arg0 context.Context, arg1 map[string]storage.ApplicationStorageDirectiveOverride, arg2 map[string]charm.Storage) ([]application0.CreateStorageDirectiveArg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeApplicationStorageDirectiveArgs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]application0.CreateStorageDirectiveArg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeApplicationStorageDirectiveArgs indicates an expected call of MakeApplicationStorageDirectiveArgs.
func (mr *MockStorageServiceMockRecorder) MakeApplicationStorageDirectiveArgs(arg0, arg1, arg2 any) *MockStorageServiceMakeApplicationStorageDirectiveArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeApplicationStorageDirectiveArgs", reflect.TypeOf((*MockStorageService)(nil).MakeApplicationStorageDirectiveArgs), arg0, arg1, arg2)
	return &MockStorageServiceMakeApplicationStorageDirectiveArgsCall{Call: call}
}

// MockStorageServiceMakeApplicationStorageDirectiveArgsCall wrap *gomock.Call
type MockStorageServiceMakeApplicationStorageDirectiveArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceMakeApplicationStorageDirectiveArgsCall) Return(arg0 []application0.CreateStorageDirectiveArg, arg1 error) *MockStorageServiceMakeApplicationStorageDirectiveArgsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceMakeApplicationStorageDirectiveArgsCall) Do(f func(context.Context, map[string]storage.ApplicationStorageDirectiveOverride, map[string]charm.Storage) ([]application0.CreateStorageDirectiveArg, error)) *MockStorageServiceMakeApplicationStorageDirectiveArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceMakeApplicationStorageDirectiveArgsCall) DoAndReturn(f func(context.Context, map[string]storage.ApplicationStorageDirectiveOverride, map[string]charm.Storage) ([]application0.CreateStorageDirectiveArg, error)) *MockStorageServiceMakeApplicationStorageDirectiveArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeUnitStorageArgs mocks base method.
func (m *MockStorageService) MakeUnitStorageArgs(arg0 context.Context, arg1 network.NetNodeUUID, arg2 []application0.StorageDirective, arg3 []internal.StorageInstanceComposition) (application0.CreateUnitStorageArg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUnitStorageArgs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(application0.CreateUnitStorageArg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeUnitStorageArgs indicates an expected call of MakeUnitStorageArgs.
func (mr *MockStorageServiceMockRecorder) MakeUnitStorageArgs(arg0, arg1, arg2, arg3 any) *MockStorageServiceMakeUnitStorageArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUnitStorageArgs", reflect.TypeOf((*MockStorageService)(nil).MakeUnitStorageArgs), arg0, arg1, arg2, arg3)
	return &MockStorageServiceMakeUnitStorageArgsCall{Call: call}
}

// MockStorageServiceMakeUnitStorageArgsCall wrap *gomock.Call
type MockStorageServiceMakeUnitStorageArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceMakeUnitStorageArgsCall) Return(arg0 application0.CreateUnitStorageArg, arg1 error) *MockStorageServiceMakeUnitStorageArgsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceMakeUnitStorageArgsCall) Do(f func(context.Context, network.NetNodeUUID, []application0.StorageDirective, []internal.StorageInstanceComposition) (application0.CreateUnitStorageArg, error)) *MockStorageServiceMakeUnitStorageArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceMakeUnitStorageArgsCall) DoAndReturn(f func(context.Context, network.NetNodeUUID, []application0.StorageDirective, []internal.StorageInstanceComposition) (application0.CreateUnitStorageArg, error)) *MockStorageServiceMakeUnitStorageArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateApplicationStorageDirectiveOverrides mocks base method.
func (m *MockStorageService) ValidateApplicationStorageDirectiveOverrides(arg0 context.Context, arg1 map[string]charm.Storage, arg2 map[string]storage.ApplicationStorageDirectiveOverride) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationStorageDirectiveOverrides", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplicationStorageDirectiveOverrides indicates an expected call of ValidateApplicationStorageDirectiveOverrides.
func (mr *MockStorageServiceMockRecorder) ValidateApplicationStorageDirectiveOverrides(arg0, arg1, arg2 any) *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationStorageDirectiveOverrides", reflect.TypeOf((*MockStorageService)(nil).ValidateApplicationStorageDirectiveOverrides), arg0, arg1, arg2)
	return &MockStorageServiceValidateApplicationStorageDirectiveOverridesCall{Call: call}
}

// MockStorageServiceValidateApplicationStorageDirectiveOverridesCall wrap *gomock.Call
type MockStorageServiceValidateApplicationStorageDirectiveOverridesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall) Return(arg0 error) *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall) Do(f func(context.Context, map[string]charm.Storage, map[string]storage.ApplicationStorageDirectiveOverride) error) *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall) DoAndReturn(f func(context.Context, map[string]charm.Storage, map[string]storage.ApplicationStorageDirectiveOverride) error) *MockStorageServiceValidateApplicationStorageDirectiveOverridesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
