// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: StorageProviderState,StoragePoolProvider,StorageState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination storage_mock_test.go github.com/juju/juju/domain/application/service StorageProviderState,StoragePoolProvider,StorageState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	storage "github.com/juju/juju/core/storage"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	internal "github.com/juju/juju/domain/application/internal"
	storage0 "github.com/juju/juju/domain/storage"
	charm "github.com/juju/juju/internal/charm"
	storage1 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProviderState is a mock of StorageProviderState interface.
type MockStorageProviderState struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderStateMockRecorder
}

// MockStorageProviderStateMockRecorder is the mock recorder for MockStorageProviderState.
type MockStorageProviderStateMockRecorder struct {
	mock *MockStorageProviderState
}

// NewMockStorageProviderState creates a new mock instance.
func NewMockStorageProviderState(ctrl *gomock.Controller) *MockStorageProviderState {
	mock := &MockStorageProviderState{ctrl: ctrl}
	mock.recorder = &MockStorageProviderStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderState) EXPECT() *MockStorageProviderStateMockRecorder {
	return m.recorder
}

// GetProviderTypeForPool mocks base method.
func (m *MockStorageProviderState) GetProviderTypeForPool(arg0 context.Context, arg1 storage0.StoragePoolUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderTypeForPool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderTypeForPool indicates an expected call of GetProviderTypeForPool.
func (mr *MockStorageProviderStateMockRecorder) GetProviderTypeForPool(arg0, arg1 any) *MockStorageProviderStateGetProviderTypeForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderTypeForPool", reflect.TypeOf((*MockStorageProviderState)(nil).GetProviderTypeForPool), arg0, arg1)
	return &MockStorageProviderStateGetProviderTypeForPoolCall{Call: call}
}

// MockStorageProviderStateGetProviderTypeForPoolCall wrap *gomock.Call
type MockStorageProviderStateGetProviderTypeForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) Return(arg0 string, arg1 error) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) Do(f func(context.Context, storage0.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStoragePoolProvider is a mock of StoragePoolProvider interface.
type MockStoragePoolProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePoolProviderMockRecorder
}

// MockStoragePoolProviderMockRecorder is the mock recorder for MockStoragePoolProvider.
type MockStoragePoolProviderMockRecorder struct {
	mock *MockStoragePoolProvider
}

// NewMockStoragePoolProvider creates a new mock instance.
func NewMockStoragePoolProvider(ctrl *gomock.Controller) *MockStoragePoolProvider {
	mock := &MockStoragePoolProvider{ctrl: ctrl}
	mock.recorder = &MockStoragePoolProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePoolProvider) EXPECT() *MockStoragePoolProviderMockRecorder {
	return m.recorder
}

// CheckPoolSupportsCharmStorage mocks base method.
func (m *MockStoragePoolProvider) CheckPoolSupportsCharmStorage(arg0 context.Context, arg1 storage0.StoragePoolUUID, arg2 charm.StorageType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPoolSupportsCharmStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPoolSupportsCharmStorage indicates an expected call of CheckPoolSupportsCharmStorage.
func (mr *MockStoragePoolProviderMockRecorder) CheckPoolSupportsCharmStorage(arg0, arg1, arg2 any) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPoolSupportsCharmStorage", reflect.TypeOf((*MockStoragePoolProvider)(nil).CheckPoolSupportsCharmStorage), arg0, arg1, arg2)
	return &MockStoragePoolProviderCheckPoolSupportsCharmStorageCall{Call: call}
}

// MockStoragePoolProviderCheckPoolSupportsCharmStorageCall wrap *gomock.Call
type MockStoragePoolProviderCheckPoolSupportsCharmStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Return(arg0 bool, arg1 error) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Do(f func(context.Context, storage0.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderForPool mocks base method.
func (m *MockStoragePoolProvider) GetProviderForPool(arg0 context.Context, arg1 storage0.StoragePoolUUID) (storage1.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderForPool", arg0, arg1)
	ret0, _ := ret[0].(storage1.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderForPool indicates an expected call of GetProviderForPool.
func (mr *MockStoragePoolProviderMockRecorder) GetProviderForPool(arg0, arg1 any) *MockStoragePoolProviderGetProviderForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderForPool", reflect.TypeOf((*MockStoragePoolProvider)(nil).GetProviderForPool), arg0, arg1)
	return &MockStoragePoolProviderGetProviderForPoolCall{Call: call}
}

// MockStoragePoolProviderGetProviderForPoolCall wrap *gomock.Call
type MockStoragePoolProviderGetProviderForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderGetProviderForPoolCall) Return(arg0 storage1.Provider, arg1 error) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderGetProviderForPoolCall) Do(f func(context.Context, storage0.StoragePoolUUID) (storage1.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderGetProviderForPoolCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID) (storage1.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageState is a mock of StorageState interface.
type MockStorageState struct {
	ctrl     *gomock.Controller
	recorder *MockStorageStateMockRecorder
}

// MockStorageStateMockRecorder is the mock recorder for MockStorageState.
type MockStorageStateMockRecorder struct {
	mock *MockStorageState
}

// NewMockStorageState creates a new mock instance.
func NewMockStorageState(ctrl *gomock.Controller) *MockStorageState {
	mock := &MockStorageState{ctrl: ctrl}
	mock.recorder = &MockStorageStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageState) EXPECT() *MockStorageStateMockRecorder {
	return m.recorder
}

// AddStorageForUnit mocks base method.
func (m *MockStorageState) AddStorageForUnit(arg0 context.Context, arg1 storage.Name, arg2 unit.UUID, arg3 storage1.Directive) ([]storage.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageForUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]storage.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStorageForUnit indicates an expected call of AddStorageForUnit.
func (mr *MockStorageStateMockRecorder) AddStorageForUnit(arg0, arg1, arg2, arg3 any) *MockStorageStateAddStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageForUnit", reflect.TypeOf((*MockStorageState)(nil).AddStorageForUnit), arg0, arg1, arg2, arg3)
	return &MockStorageStateAddStorageForUnitCall{Call: call}
}

// MockStorageStateAddStorageForUnitCall wrap *gomock.Call
type MockStorageStateAddStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateAddStorageForUnitCall) Return(arg0 []storage.ID, arg1 error) *MockStorageStateAddStorageForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateAddStorageForUnitCall) Do(f func(context.Context, storage.Name, unit.UUID, storage1.Directive) ([]storage.ID, error)) *MockStorageStateAddStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateAddStorageForUnitCall) DoAndReturn(f func(context.Context, storage.Name, unit.UUID, storage1.Directive) ([]storage.ID, error)) *MockStorageStateAddStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachStorage mocks base method.
func (m *MockStorageState) AttachStorage(arg0 context.Context, arg1 storage0.StorageInstanceUUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachStorage indicates an expected call of AttachStorage.
func (mr *MockStorageStateMockRecorder) AttachStorage(arg0, arg1, arg2 any) *MockStorageStateAttachStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStorage", reflect.TypeOf((*MockStorageState)(nil).AttachStorage), arg0, arg1, arg2)
	return &MockStorageStateAttachStorageCall{Call: call}
}

// MockStorageStateAttachStorageCall wrap *gomock.Call
type MockStorageStateAttachStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateAttachStorageCall) Return(arg0 error) *MockStorageStateAttachStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateAttachStorageCall) Do(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStorageStateAttachStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateAttachStorageCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStorageStateAttachStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUnitExists mocks base method.
func (m *MockStorageState) CheckUnitExists(arg0 context.Context, arg1 unit.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnitExists indicates an expected call of CheckUnitExists.
func (mr *MockStorageStateMockRecorder) CheckUnitExists(arg0, arg1 any) *MockStorageStateCheckUnitExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitExists", reflect.TypeOf((*MockStorageState)(nil).CheckUnitExists), arg0, arg1)
	return &MockStorageStateCheckUnitExistsCall{Call: call}
}

// MockStorageStateCheckUnitExistsCall wrap *gomock.Call
type MockStorageStateCheckUnitExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateCheckUnitExistsCall) Return(arg0 bool, arg1 error) *MockStorageStateCheckUnitExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateCheckUnitExistsCall) Do(f func(context.Context, unit.UUID) (bool, error)) *MockStorageStateCheckUnitExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateCheckUnitExistsCall) DoAndReturn(f func(context.Context, unit.UUID) (bool, error)) *MockStorageStateCheckUnitExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorage mocks base method.
func (m *MockStorageState) DetachStorage(arg0 context.Context, arg1 storage0.StorageInstanceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorage indicates an expected call of DetachStorage.
func (mr *MockStorageStateMockRecorder) DetachStorage(arg0, arg1 any) *MockStorageStateDetachStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorage", reflect.TypeOf((*MockStorageState)(nil).DetachStorage), arg0, arg1)
	return &MockStorageStateDetachStorageCall{Call: call}
}

// MockStorageStateDetachStorageCall wrap *gomock.Call
type MockStorageStateDetachStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateDetachStorageCall) Return(arg0 error) *MockStorageStateDetachStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateDetachStorageCall) Do(f func(context.Context, storage0.StorageInstanceUUID) error) *MockStorageStateDetachStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateDetachStorageCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID) error) *MockStorageStateDetachStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorageForUnit mocks base method.
func (m *MockStorageState) DetachStorageForUnit(arg0 context.Context, arg1 storage0.StorageInstanceUUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorageForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorageForUnit indicates an expected call of DetachStorageForUnit.
func (mr *MockStorageStateMockRecorder) DetachStorageForUnit(arg0, arg1, arg2 any) *MockStorageStateDetachStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorageForUnit", reflect.TypeOf((*MockStorageState)(nil).DetachStorageForUnit), arg0, arg1, arg2)
	return &MockStorageStateDetachStorageForUnitCall{Call: call}
}

// MockStorageStateDetachStorageForUnitCall wrap *gomock.Call
type MockStorageStateDetachStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateDetachStorageForUnitCall) Return(arg0 error) *MockStorageStateDetachStorageForUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateDetachStorageForUnitCall) Do(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStorageStateDetachStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateDetachStorageForUnitCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStorageStateDetachStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStorageDirectives mocks base method.
func (m *MockStorageState) GetApplicationStorageDirectives(arg0 context.Context, arg1 application.ID) ([]application0.StorageDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStorageDirectives", arg0, arg1)
	ret0, _ := ret[0].([]application0.StorageDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStorageDirectives indicates an expected call of GetApplicationStorageDirectives.
func (mr *MockStorageStateMockRecorder) GetApplicationStorageDirectives(arg0, arg1 any) *MockStorageStateGetApplicationStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStorageDirectives", reflect.TypeOf((*MockStorageState)(nil).GetApplicationStorageDirectives), arg0, arg1)
	return &MockStorageStateGetApplicationStorageDirectivesCall{Call: call}
}

// MockStorageStateGetApplicationStorageDirectivesCall wrap *gomock.Call
type MockStorageStateGetApplicationStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetApplicationStorageDirectivesCall) Return(arg0 []application0.StorageDirective, arg1 error) *MockStorageStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetApplicationStorageDirectivesCall) Do(f func(context.Context, application.ID) ([]application0.StorageDirective, error)) *MockStorageStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetApplicationStorageDirectivesCall) DoAndReturn(f func(context.Context, application.ID) ([]application0.StorageDirective, error)) *MockStorageStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDefaultStorageProvisioners mocks base method.
func (m *MockStorageState) GetDefaultStorageProvisioners(arg0 context.Context) (application0.DefaultStorageProvisioners, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultStorageProvisioners", arg0)
	ret0, _ := ret[0].(application0.DefaultStorageProvisioners)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultStorageProvisioners indicates an expected call of GetDefaultStorageProvisioners.
func (mr *MockStorageStateMockRecorder) GetDefaultStorageProvisioners(arg0 any) *MockStorageStateGetDefaultStorageProvisionersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultStorageProvisioners", reflect.TypeOf((*MockStorageState)(nil).GetDefaultStorageProvisioners), arg0)
	return &MockStorageStateGetDefaultStorageProvisionersCall{Call: call}
}

// MockStorageStateGetDefaultStorageProvisionersCall wrap *gomock.Call
type MockStorageStateGetDefaultStorageProvisionersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetDefaultStorageProvisionersCall) Return(arg0 application0.DefaultStorageProvisioners, arg1 error) *MockStorageStateGetDefaultStorageProvisionersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetDefaultStorageProvisionersCall) Do(f func(context.Context) (application0.DefaultStorageProvisioners, error)) *MockStorageStateGetDefaultStorageProvisionersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetDefaultStorageProvisionersCall) DoAndReturn(f func(context.Context) (application0.DefaultStorageProvisioners, error)) *MockStorageStateGetDefaultStorageProvisionersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstancesForProviderIDs mocks base method.
func (m *MockStorageState) GetStorageInstancesForProviderIDs(arg0 context.Context, arg1 []string) ([]internal.StorageInstanceComposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstancesForProviderIDs", arg0, arg1)
	ret0, _ := ret[0].([]internal.StorageInstanceComposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstancesForProviderIDs indicates an expected call of GetStorageInstancesForProviderIDs.
func (mr *MockStorageStateMockRecorder) GetStorageInstancesForProviderIDs(arg0, arg1 any) *MockStorageStateGetStorageInstancesForProviderIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstancesForProviderIDs", reflect.TypeOf((*MockStorageState)(nil).GetStorageInstancesForProviderIDs), arg0, arg1)
	return &MockStorageStateGetStorageInstancesForProviderIDsCall{Call: call}
}

// MockStorageStateGetStorageInstancesForProviderIDsCall wrap *gomock.Call
type MockStorageStateGetStorageInstancesForProviderIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetStorageInstancesForProviderIDsCall) Return(arg0 []internal.StorageInstanceComposition, arg1 error) *MockStorageStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetStorageInstancesForProviderIDsCall) Do(f func(context.Context, []string) ([]internal.StorageInstanceComposition, error)) *MockStorageStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetStorageInstancesForProviderIDsCall) DoAndReturn(f func(context.Context, []string) ([]internal.StorageInstanceComposition, error)) *MockStorageStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageUUIDByID mocks base method.
func (m *MockStorageState) GetStorageUUIDByID(arg0 context.Context, arg1 storage.ID) (storage0.StorageInstanceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(storage0.StorageInstanceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageUUIDByID indicates an expected call of GetStorageUUIDByID.
func (mr *MockStorageStateMockRecorder) GetStorageUUIDByID(arg0, arg1 any) *MockStorageStateGetStorageUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageUUIDByID", reflect.TypeOf((*MockStorageState)(nil).GetStorageUUIDByID), arg0, arg1)
	return &MockStorageStateGetStorageUUIDByIDCall{Call: call}
}

// MockStorageStateGetStorageUUIDByIDCall wrap *gomock.Call
type MockStorageStateGetStorageUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetStorageUUIDByIDCall) Return(arg0 storage0.StorageInstanceUUID, arg1 error) *MockStorageStateGetStorageUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetStorageUUIDByIDCall) Do(f func(context.Context, storage.ID) (storage0.StorageInstanceUUID, error)) *MockStorageStateGetStorageUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetStorageUUIDByIDCall) DoAndReturn(f func(context.Context, storage.ID) (storage0.StorageInstanceUUID, error)) *MockStorageStateGetStorageUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitOwnedStorageInstances mocks base method.
func (m *MockStorageState) GetUnitOwnedStorageInstances(arg0 context.Context, arg1 unit.UUID) ([]internal.StorageInstanceComposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitOwnedStorageInstances", arg0, arg1)
	ret0, _ := ret[0].([]internal.StorageInstanceComposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitOwnedStorageInstances indicates an expected call of GetUnitOwnedStorageInstances.
func (mr *MockStorageStateMockRecorder) GetUnitOwnedStorageInstances(arg0, arg1 any) *MockStorageStateGetUnitOwnedStorageInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitOwnedStorageInstances", reflect.TypeOf((*MockStorageState)(nil).GetUnitOwnedStorageInstances), arg0, arg1)
	return &MockStorageStateGetUnitOwnedStorageInstancesCall{Call: call}
}

// MockStorageStateGetUnitOwnedStorageInstancesCall wrap *gomock.Call
type MockStorageStateGetUnitOwnedStorageInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetUnitOwnedStorageInstancesCall) Return(arg0 []internal.StorageInstanceComposition, arg1 error) *MockStorageStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetUnitOwnedStorageInstancesCall) Do(f func(context.Context, unit.UUID) ([]internal.StorageInstanceComposition, error)) *MockStorageStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetUnitOwnedStorageInstancesCall) DoAndReturn(f func(context.Context, unit.UUID) ([]internal.StorageInstanceComposition, error)) *MockStorageStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitStorageDirectives mocks base method.
func (m *MockStorageState) GetUnitStorageDirectives(arg0 context.Context, arg1 unit.UUID) ([]application0.StorageDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitStorageDirectives", arg0, arg1)
	ret0, _ := ret[0].([]application0.StorageDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitStorageDirectives indicates an expected call of GetUnitStorageDirectives.
func (mr *MockStorageStateMockRecorder) GetUnitStorageDirectives(arg0, arg1 any) *MockStorageStateGetUnitStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitStorageDirectives", reflect.TypeOf((*MockStorageState)(nil).GetUnitStorageDirectives), arg0, arg1)
	return &MockStorageStateGetUnitStorageDirectivesCall{Call: call}
}

// MockStorageStateGetUnitStorageDirectivesCall wrap *gomock.Call
type MockStorageStateGetUnitStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStateGetUnitStorageDirectivesCall) Return(arg0 []application0.StorageDirective, arg1 error) *MockStorageStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStateGetUnitStorageDirectivesCall) Do(f func(context.Context, unit.UUID) ([]application0.StorageDirective, error)) *MockStorageStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStateGetUnitStorageDirectivesCall) DoAndReturn(f func(context.Context, unit.UUID) ([]application0.StorageDirective, error)) *MockStorageStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
