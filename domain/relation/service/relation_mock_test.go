// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation (interfaces: SubordinateCreator)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination relation_mock_test.go github.com/juju/juju/domain/relation SubordinateCreator
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockSubordinateCreator is a mock of SubordinateCreator interface.
type MockSubordinateCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSubordinateCreatorMockRecorder
}

// MockSubordinateCreatorMockRecorder is the mock recorder for MockSubordinateCreator.
type MockSubordinateCreatorMockRecorder struct {
	mock *MockSubordinateCreator
}

// NewMockSubordinateCreator creates a new mock instance.
func NewMockSubordinateCreator(ctrl *gomock.Controller) *MockSubordinateCreator {
	mock := &MockSubordinateCreator{ctrl: ctrl}
	mock.recorder = &MockSubordinateCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubordinateCreator) EXPECT() *MockSubordinateCreatorMockRecorder {
	return m.recorder
}

// CreateSubordinate mocks base method.
func (m *MockSubordinateCreator) CreateSubordinate(arg0 context.Context, arg1 application.UUID, arg2 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubordinate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubordinate indicates an expected call of CreateSubordinate.
func (mr *MockSubordinateCreatorMockRecorder) CreateSubordinate(arg0, arg1, arg2 any) *MockSubordinateCreatorCreateSubordinateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubordinate", reflect.TypeOf((*MockSubordinateCreator)(nil).CreateSubordinate), arg0, arg1, arg2)
	return &MockSubordinateCreatorCreateSubordinateCall{Call: call}
}

// MockSubordinateCreatorCreateSubordinateCall wrap *gomock.Call
type MockSubordinateCreatorCreateSubordinateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubordinateCreatorCreateSubordinateCall) Return(arg0 error) *MockSubordinateCreatorCreateSubordinateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubordinateCreatorCreateSubordinateCall) Do(f func(context.Context, application.UUID, unit.Name) error) *MockSubordinateCreatorCreateSubordinateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubordinateCreatorCreateSubordinateCall) DoAndReturn(f func(context.Context, application.UUID, unit.Name) error) *MockSubordinateCreatorCreateSubordinateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
