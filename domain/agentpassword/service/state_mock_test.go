// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentpassword/service (interfaces: ModelState,ControllerState,MigrationState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/agentpassword/service ModelState,ControllerState,MigrationState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	agentpassword "github.com/juju/juju/domain/agentpassword"
	gomock "go.uber.org/mock/gomock"
)

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// GetApplicationIDByName mocks base method.
func (m *MockModelState) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockModelStateMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockModelStateGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockModelState)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockModelStateGetApplicationIDByNameCall{Call: call}
}

// MockModelStateGetApplicationIDByNameCall wrap *gomock.Call
type MockModelStateGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockModelState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockModelStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockModelStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockModelState)(nil).GetMachineUUID), arg0, arg1)
	return &MockModelStateGetMachineUUIDCall{Call: call}
}

// MockModelStateGetMachineUUIDCall wrap *gomock.Call
type MockModelStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockModelStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockModelStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockModelStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockModelState) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockModelStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockModelStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockModelState)(nil).GetUnitUUID), arg0, arg1)
	return &MockModelStateGetUnitUUIDCall{Call: call}
}

// MockModelStateGetUnitUUIDCall wrap *gomock.Call
type MockModelStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockModelStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineController mocks base method.
func (m *MockModelState) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockModelStateMockRecorder) IsMachineController(arg0, arg1 any) *MockModelStateIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockModelState)(nil).IsMachineController), arg0, arg1)
	return &MockModelStateIsMachineControllerCall{Call: call}
}

// MockModelStateIsMachineControllerCall wrap *gomock.Call
type MockModelStateIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockModelStateIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockModelStateIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockModelStateIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesApplicationPasswordHash mocks base method.
func (m *MockModelState) MatchesApplicationPasswordHash(arg0 context.Context, arg1 application.ID, arg2 agentpassword.PasswordHash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesApplicationPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesApplicationPasswordHash indicates an expected call of MatchesApplicationPasswordHash.
func (mr *MockModelStateMockRecorder) MatchesApplicationPasswordHash(arg0, arg1, arg2 any) *MockModelStateMatchesApplicationPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesApplicationPasswordHash", reflect.TypeOf((*MockModelState)(nil).MatchesApplicationPasswordHash), arg0, arg1, arg2)
	return &MockModelStateMatchesApplicationPasswordHashCall{Call: call}
}

// MockModelStateMatchesApplicationPasswordHashCall wrap *gomock.Call
type MockModelStateMatchesApplicationPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateMatchesApplicationPasswordHashCall) Return(arg0 bool, arg1 error) *MockModelStateMatchesApplicationPasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateMatchesApplicationPasswordHashCall) Do(f func(context.Context, application.ID, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesApplicationPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateMatchesApplicationPasswordHashCall) DoAndReturn(f func(context.Context, application.ID, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesApplicationPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesMachinePasswordHashWithNonce mocks base method.
func (m *MockModelState) MatchesMachinePasswordHashWithNonce(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesMachinePasswordHashWithNonce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesMachinePasswordHashWithNonce indicates an expected call of MatchesMachinePasswordHashWithNonce.
func (mr *MockModelStateMockRecorder) MatchesMachinePasswordHashWithNonce(arg0, arg1, arg2, arg3 any) *MockModelStateMatchesMachinePasswordHashWithNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesMachinePasswordHashWithNonce", reflect.TypeOf((*MockModelState)(nil).MatchesMachinePasswordHashWithNonce), arg0, arg1, arg2, arg3)
	return &MockModelStateMatchesMachinePasswordHashWithNonceCall{Call: call}
}

// MockModelStateMatchesMachinePasswordHashWithNonceCall wrap *gomock.Call
type MockModelStateMatchesMachinePasswordHashWithNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateMatchesMachinePasswordHashWithNonceCall) Return(arg0 bool, arg1 error) *MockModelStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateMatchesMachinePasswordHashWithNonceCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash, string) (bool, error)) *MockModelStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateMatchesMachinePasswordHashWithNonceCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash, string) (bool, error)) *MockModelStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesModelPasswordHash mocks base method.
func (m *MockModelState) MatchesModelPasswordHash(arg0 context.Context, arg1 agentpassword.PasswordHash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesModelPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesModelPasswordHash indicates an expected call of MatchesModelPasswordHash.
func (mr *MockModelStateMockRecorder) MatchesModelPasswordHash(arg0, arg1 any) *MockModelStateMatchesModelPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesModelPasswordHash", reflect.TypeOf((*MockModelState)(nil).MatchesModelPasswordHash), arg0, arg1)
	return &MockModelStateMatchesModelPasswordHashCall{Call: call}
}

// MockModelStateMatchesModelPasswordHashCall wrap *gomock.Call
type MockModelStateMatchesModelPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateMatchesModelPasswordHashCall) Return(arg0 bool, arg1 error) *MockModelStateMatchesModelPasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateMatchesModelPasswordHashCall) Do(f func(context.Context, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesModelPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateMatchesModelPasswordHashCall) DoAndReturn(f func(context.Context, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesModelPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesUnitPasswordHash mocks base method.
func (m *MockModelState) MatchesUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesUnitPasswordHash indicates an expected call of MatchesUnitPasswordHash.
func (mr *MockModelStateMockRecorder) MatchesUnitPasswordHash(arg0, arg1, arg2 any) *MockModelStateMatchesUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesUnitPasswordHash", reflect.TypeOf((*MockModelState)(nil).MatchesUnitPasswordHash), arg0, arg1, arg2)
	return &MockModelStateMatchesUnitPasswordHashCall{Call: call}
}

// MockModelStateMatchesUnitPasswordHashCall wrap *gomock.Call
type MockModelStateMatchesUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateMatchesUnitPasswordHashCall) Return(arg0 bool, arg1 error) *MockModelStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateMatchesUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateMatchesUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) (bool, error)) *MockModelStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationPasswordHash mocks base method.
func (m *MockModelState) SetApplicationPasswordHash(arg0 context.Context, arg1 application.ID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationPasswordHash indicates an expected call of SetApplicationPasswordHash.
func (mr *MockModelStateMockRecorder) SetApplicationPasswordHash(arg0, arg1, arg2 any) *MockModelStateSetApplicationPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationPasswordHash", reflect.TypeOf((*MockModelState)(nil).SetApplicationPasswordHash), arg0, arg1, arg2)
	return &MockModelStateSetApplicationPasswordHashCall{Call: call}
}

// MockModelStateSetApplicationPasswordHashCall wrap *gomock.Call
type MockModelStateSetApplicationPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetApplicationPasswordHashCall) Return(arg0 error) *MockModelStateSetApplicationPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetApplicationPasswordHashCall) Do(f func(context.Context, application.ID, agentpassword.PasswordHash) error) *MockModelStateSetApplicationPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetApplicationPasswordHashCall) DoAndReturn(f func(context.Context, application.ID, agentpassword.PasswordHash) error) *MockModelStateSetApplicationPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachinePasswordHash mocks base method.
func (m *MockModelState) SetMachinePasswordHash(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePasswordHash indicates an expected call of SetMachinePasswordHash.
func (mr *MockModelStateMockRecorder) SetMachinePasswordHash(arg0, arg1, arg2 any) *MockModelStateSetMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePasswordHash", reflect.TypeOf((*MockModelState)(nil).SetMachinePasswordHash), arg0, arg1, arg2)
	return &MockModelStateSetMachinePasswordHashCall{Call: call}
}

// MockModelStateSetMachinePasswordHashCall wrap *gomock.Call
type MockModelStateSetMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetMachinePasswordHashCall) Return(arg0 error) *MockModelStateSetMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetMachinePasswordHashCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockModelStateSetMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetMachinePasswordHashCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockModelStateSetMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelPasswordHash mocks base method.
func (m *MockModelState) SetModelPasswordHash(arg0 context.Context, arg1 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelPasswordHash indicates an expected call of SetModelPasswordHash.
func (mr *MockModelStateMockRecorder) SetModelPasswordHash(arg0, arg1 any) *MockModelStateSetModelPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelPasswordHash", reflect.TypeOf((*MockModelState)(nil).SetModelPasswordHash), arg0, arg1)
	return &MockModelStateSetModelPasswordHashCall{Call: call}
}

// MockModelStateSetModelPasswordHashCall wrap *gomock.Call
type MockModelStateSetModelPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelPasswordHashCall) Return(arg0 error) *MockModelStateSetModelPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelPasswordHashCall) Do(f func(context.Context, agentpassword.PasswordHash) error) *MockModelStateSetModelPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelPasswordHashCall) DoAndReturn(f func(context.Context, agentpassword.PasswordHash) error) *MockModelStateSetModelPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPasswordHash mocks base method.
func (m *MockModelState) SetUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPasswordHash indicates an expected call of SetUnitPasswordHash.
func (mr *MockModelStateMockRecorder) SetUnitPasswordHash(arg0, arg1, arg2 any) *MockModelStateSetUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPasswordHash", reflect.TypeOf((*MockModelState)(nil).SetUnitPasswordHash), arg0, arg1, arg2)
	return &MockModelStateSetUnitPasswordHashCall{Call: call}
}

// MockModelStateSetUnitPasswordHashCall wrap *gomock.Call
type MockModelStateSetUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetUnitPasswordHashCall) Return(arg0 error) *MockModelStateSetUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockModelStateSetUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockModelStateSetUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// MatchesControllerNodePasswordHash mocks base method.
func (m *MockControllerState) MatchesControllerNodePasswordHash(arg0 context.Context, arg1 string, arg2 agentpassword.PasswordHash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesControllerNodePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesControllerNodePasswordHash indicates an expected call of MatchesControllerNodePasswordHash.
func (mr *MockControllerStateMockRecorder) MatchesControllerNodePasswordHash(arg0, arg1, arg2 any) *MockControllerStateMatchesControllerNodePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesControllerNodePasswordHash", reflect.TypeOf((*MockControllerState)(nil).MatchesControllerNodePasswordHash), arg0, arg1, arg2)
	return &MockControllerStateMatchesControllerNodePasswordHashCall{Call: call}
}

// MockControllerStateMatchesControllerNodePasswordHashCall wrap *gomock.Call
type MockControllerStateMatchesControllerNodePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateMatchesControllerNodePasswordHashCall) Return(arg0 bool, arg1 error) *MockControllerStateMatchesControllerNodePasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateMatchesControllerNodePasswordHashCall) Do(f func(context.Context, string, agentpassword.PasswordHash) (bool, error)) *MockControllerStateMatchesControllerNodePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateMatchesControllerNodePasswordHashCall) DoAndReturn(f func(context.Context, string, agentpassword.PasswordHash) (bool, error)) *MockControllerStateMatchesControllerNodePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetControllerNodePasswordHash mocks base method.
func (m *MockControllerState) SetControllerNodePasswordHash(arg0 context.Context, arg1 string, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerNodePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerNodePasswordHash indicates an expected call of SetControllerNodePasswordHash.
func (mr *MockControllerStateMockRecorder) SetControllerNodePasswordHash(arg0, arg1, arg2 any) *MockControllerStateSetControllerNodePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerNodePasswordHash", reflect.TypeOf((*MockControllerState)(nil).SetControllerNodePasswordHash), arg0, arg1, arg2)
	return &MockControllerStateSetControllerNodePasswordHashCall{Call: call}
}

// MockControllerStateSetControllerNodePasswordHashCall wrap *gomock.Call
type MockControllerStateSetControllerNodePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateSetControllerNodePasswordHashCall) Return(arg0 error) *MockControllerStateSetControllerNodePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateSetControllerNodePasswordHashCall) Do(f func(context.Context, string, agentpassword.PasswordHash) error) *MockControllerStateSetControllerNodePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateSetControllerNodePasswordHashCall) DoAndReturn(f func(context.Context, string, agentpassword.PasswordHash) error) *MockControllerStateSetControllerNodePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMigrationState is a mock of MigrationState interface.
type MockMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationStateMockRecorder
}

// MockMigrationStateMockRecorder is the mock recorder for MockMigrationState.
type MockMigrationStateMockRecorder struct {
	mock *MockMigrationState
}

// NewMockMigrationState creates a new mock instance.
func NewMockMigrationState(ctrl *gomock.Controller) *MockMigrationState {
	mock := &MockMigrationState{ctrl: ctrl}
	mock.recorder = &MockMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationState) EXPECT() *MockMigrationStateMockRecorder {
	return m.recorder
}

// GetAllMachinePasswordHashes mocks base method.
func (m *MockMigrationState) GetAllMachinePasswordHashes(arg0 context.Context) (agentpassword.MachinePasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachinePasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.MachinePasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachinePasswordHashes indicates an expected call of GetAllMachinePasswordHashes.
func (mr *MockMigrationStateMockRecorder) GetAllMachinePasswordHashes(arg0 any) *MockMigrationStateGetAllMachinePasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachinePasswordHashes", reflect.TypeOf((*MockMigrationState)(nil).GetAllMachinePasswordHashes), arg0)
	return &MockMigrationStateGetAllMachinePasswordHashesCall{Call: call}
}

// MockMigrationStateGetAllMachinePasswordHashesCall wrap *gomock.Call
type MockMigrationStateGetAllMachinePasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) Return(arg0 agentpassword.MachinePasswordHashes, arg1 error) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) Do(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitPasswordHashes mocks base method.
func (m *MockMigrationState) GetAllUnitPasswordHashes(arg0 context.Context) (agentpassword.UnitPasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitPasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.UnitPasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitPasswordHashes indicates an expected call of GetAllUnitPasswordHashes.
func (mr *MockMigrationStateMockRecorder) GetAllUnitPasswordHashes(arg0 any) *MockMigrationStateGetAllUnitPasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitPasswordHashes", reflect.TypeOf((*MockMigrationState)(nil).GetAllUnitPasswordHashes), arg0)
	return &MockMigrationStateGetAllUnitPasswordHashesCall{Call: call}
}

// MockMigrationStateGetAllUnitPasswordHashesCall wrap *gomock.Call
type MockMigrationStateGetAllUnitPasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) Return(arg0 agentpassword.UnitPasswordHashes, arg1 error) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) Do(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMigrationState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMigrationStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMigrationStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMigrationState)(nil).GetMachineUUID), arg0, arg1)
	return &MockMigrationStateGetMachineUUIDCall{Call: call}
}

// MockMigrationStateGetMachineUUIDCall wrap *gomock.Call
type MockMigrationStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockMigrationState) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockMigrationStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockMigrationStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockMigrationState)(nil).GetUnitUUID), arg0, arg1)
	return &MockMigrationStateGetUnitUUIDCall{Call: call}
}

// MockMigrationStateGetUnitUUIDCall wrap *gomock.Call
type MockMigrationStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachinePasswordHash mocks base method.
func (m *MockMigrationState) SetMachinePasswordHash(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePasswordHash indicates an expected call of SetMachinePasswordHash.
func (mr *MockMigrationStateMockRecorder) SetMachinePasswordHash(arg0, arg1, arg2 any) *MockMigrationStateSetMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePasswordHash", reflect.TypeOf((*MockMigrationState)(nil).SetMachinePasswordHash), arg0, arg1, arg2)
	return &MockMigrationStateSetMachinePasswordHashCall{Call: call}
}

// MockMigrationStateSetMachinePasswordHashCall wrap *gomock.Call
type MockMigrationStateSetMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetMachinePasswordHashCall) Return(arg0 error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetMachinePasswordHashCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetMachinePasswordHashCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPasswordHash mocks base method.
func (m *MockMigrationState) SetUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPasswordHash indicates an expected call of SetUnitPasswordHash.
func (mr *MockMigrationStateMockRecorder) SetUnitPasswordHash(arg0, arg1, arg2 any) *MockMigrationStateSetUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPasswordHash", reflect.TypeOf((*MockMigrationState)(nil).SetUnitPasswordHash), arg0, arg1, arg2)
	return &MockMigrationStateSetUnitPasswordHashCall{Call: call}
}

// MockMigrationStateSetUnitPasswordHashCall wrap *gomock.Call
type MockMigrationStateSetUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetUnitPasswordHashCall) Return(arg0 error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
