// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/removal/service (interfaces: ControllerDBState,ModelDBState,Provider)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/removal/service ControllerDBState,ModelDBState,Provider
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	eventsource "github.com/juju/juju/core/watcher/eventsource"
	life "github.com/juju/juju/domain/life"
	removal "github.com/juju/juju/domain/removal"
	internal "github.com/juju/juju/domain/removal/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerDBState is a mock of ControllerDBState interface.
type MockControllerDBState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDBStateMockRecorder
}

// MockControllerDBStateMockRecorder is the mock recorder for MockControllerDBState.
type MockControllerDBStateMockRecorder struct {
	mock *MockControllerDBState
}

// NewMockControllerDBState creates a new mock instance.
func NewMockControllerDBState(ctrl *gomock.Controller) *MockControllerDBState {
	mock := &MockControllerDBState{ctrl: ctrl}
	mock.recorder = &MockControllerDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDBState) EXPECT() *MockControllerDBStateMockRecorder {
	return m.recorder
}

// DeleteModel mocks base method.
func (m *MockControllerDBState) DeleteModel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockControllerDBStateMockRecorder) DeleteModel(arg0, arg1 any) *MockControllerDBStateDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockControllerDBState)(nil).DeleteModel), arg0, arg1)
	return &MockControllerDBStateDeleteModelCall{Call: call}
}

// MockControllerDBStateDeleteModelCall wrap *gomock.Call
type MockControllerDBStateDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateDeleteModelCall) Return(arg0 error) *MockControllerDBStateDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateDeleteModelCall) Do(f func(context.Context, string) error) *MockControllerDBStateDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateDeleteModelCall) DoAndReturn(f func(context.Context, string) error) *MockControllerDBStateDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureModelNotAliveCascade mocks base method.
func (m *MockControllerDBState) EnsureModelNotAliveCascade(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureModelNotAliveCascade", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureModelNotAliveCascade indicates an expected call of EnsureModelNotAliveCascade.
func (mr *MockControllerDBStateMockRecorder) EnsureModelNotAliveCascade(arg0, arg1, arg2 any) *MockControllerDBStateEnsureModelNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureModelNotAliveCascade", reflect.TypeOf((*MockControllerDBState)(nil).EnsureModelNotAliveCascade), arg0, arg1, arg2)
	return &MockControllerDBStateEnsureModelNotAliveCascadeCall{Call: call}
}

// MockControllerDBStateEnsureModelNotAliveCascadeCall wrap *gomock.Call
type MockControllerDBStateEnsureModelNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateEnsureModelNotAliveCascadeCall) Return(arg0 error) *MockControllerDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateEnsureModelNotAliveCascadeCall) Do(f func(context.Context, string, bool) error) *MockControllerDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateEnsureModelNotAliveCascadeCall) DoAndReturn(f func(context.Context, string, bool) error) *MockControllerDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelLife mocks base method.
func (m *MockControllerDBState) GetModelLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelLife indicates an expected call of GetModelLife.
func (mr *MockControllerDBStateMockRecorder) GetModelLife(arg0, arg1 any) *MockControllerDBStateGetModelLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelLife", reflect.TypeOf((*MockControllerDBState)(nil).GetModelLife), arg0, arg1)
	return &MockControllerDBStateGetModelLifeCall{Call: call}
}

// MockControllerDBStateGetModelLifeCall wrap *gomock.Call
type MockControllerDBStateGetModelLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateGetModelLifeCall) Return(arg0 life.Life, arg1 error) *MockControllerDBStateGetModelLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateGetModelLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockControllerDBStateGetModelLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateGetModelLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockControllerDBStateGetModelLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUIDs mocks base method.
func (m *MockControllerDBState) GetModelUUIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUIDs indicates an expected call of GetModelUUIDs.
func (mr *MockControllerDBStateMockRecorder) GetModelUUIDs(arg0 any) *MockControllerDBStateGetModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUIDs", reflect.TypeOf((*MockControllerDBState)(nil).GetModelUUIDs), arg0)
	return &MockControllerDBStateGetModelUUIDsCall{Call: call}
}

// MockControllerDBStateGetModelUUIDsCall wrap *gomock.Call
type MockControllerDBStateGetModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateGetModelUUIDsCall) Return(arg0 []string, arg1 error) *MockControllerDBStateGetModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateGetModelUUIDsCall) Do(f func(context.Context) ([]string, error)) *MockControllerDBStateGetModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateGetModelUUIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerDBStateGetModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkModelAsDead mocks base method.
func (m *MockControllerDBState) MarkModelAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkModelAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkModelAsDead indicates an expected call of MarkModelAsDead.
func (mr *MockControllerDBStateMockRecorder) MarkModelAsDead(arg0, arg1 any) *MockControllerDBStateMarkModelAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkModelAsDead", reflect.TypeOf((*MockControllerDBState)(nil).MarkModelAsDead), arg0, arg1)
	return &MockControllerDBStateMarkModelAsDeadCall{Call: call}
}

// MockControllerDBStateMarkModelAsDeadCall wrap *gomock.Call
type MockControllerDBStateMarkModelAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateMarkModelAsDeadCall) Return(arg0 error) *MockControllerDBStateMarkModelAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateMarkModelAsDeadCall) Do(f func(context.Context, string) error) *MockControllerDBStateMarkModelAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateMarkModelAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockControllerDBStateMarkModelAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelExists mocks base method.
func (m *MockControllerDBState) ModelExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelExists indicates an expected call of ModelExists.
func (mr *MockControllerDBStateMockRecorder) ModelExists(arg0, arg1 any) *MockControllerDBStateModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelExists", reflect.TypeOf((*MockControllerDBState)(nil).ModelExists), arg0, arg1)
	return &MockControllerDBStateModelExistsCall{Call: call}
}

// MockControllerDBStateModelExistsCall wrap *gomock.Call
type MockControllerDBStateModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateModelExistsCall) Return(arg0 bool, arg1 error) *MockControllerDBStateModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateModelExistsCall) Do(f func(context.Context, string) (bool, error)) *MockControllerDBStateModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateModelExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockControllerDBStateModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDBState is a mock of ModelDBState interface.
type MockModelDBState struct {
	ctrl     *gomock.Controller
	recorder *MockModelDBStateMockRecorder
}

// MockModelDBStateMockRecorder is the mock recorder for MockModelDBState.
type MockModelDBStateMockRecorder struct {
	mock *MockModelDBState
}

// NewMockModelDBState creates a new mock instance.
func NewMockModelDBState(ctrl *gomock.Controller) *MockModelDBState {
	mock := &MockModelDBState{ctrl: ctrl}
	mock.recorder = &MockModelDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDBState) EXPECT() *MockModelDBStateMockRecorder {
	return m.recorder
}

// ApplicationExists mocks base method.
func (m *MockModelDBState) ApplicationExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationExists indicates an expected call of ApplicationExists.
func (mr *MockModelDBStateMockRecorder) ApplicationExists(arg0, arg1 any) *MockModelDBStateApplicationExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationExists", reflect.TypeOf((*MockModelDBState)(nil).ApplicationExists), arg0, arg1)
	return &MockModelDBStateApplicationExistsCall{Call: call}
}

// MockModelDBStateApplicationExistsCall wrap *gomock.Call
type MockModelDBStateApplicationExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateApplicationExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateApplicationExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateApplicationExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateApplicationExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateApplicationExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateApplicationExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationScheduleRemoval mocks base method.
func (m *MockModelDBState) ApplicationScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationScheduleRemoval indicates an expected call of ApplicationScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) ApplicationScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateApplicationScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).ApplicationScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateApplicationScheduleRemovalCall{Call: call}
}

// MockModelDBStateApplicationScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateApplicationScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateApplicationScheduleRemovalCall) Return(arg0 error) *MockModelDBStateApplicationScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateApplicationScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateApplicationScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateApplicationScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateApplicationScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApplication mocks base method.
func (m *MockModelDBState) DeleteApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockModelDBStateMockRecorder) DeleteApplication(arg0, arg1 any) *MockModelDBStateDeleteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockModelDBState)(nil).DeleteApplication), arg0, arg1)
	return &MockModelDBStateDeleteApplicationCall{Call: call}
}

// MockModelDBStateDeleteApplicationCall wrap *gomock.Call
type MockModelDBStateDeleteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteApplicationCall) Return(arg0 error) *MockModelDBStateDeleteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteApplicationCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteApplicationCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFilesystem mocks base method.
func (m *MockModelDBState) DeleteFilesystem(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesystem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilesystem indicates an expected call of DeleteFilesystem.
func (mr *MockModelDBStateMockRecorder) DeleteFilesystem(arg0, arg1 any) *MockModelDBStateDeleteFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesystem", reflect.TypeOf((*MockModelDBState)(nil).DeleteFilesystem), arg0, arg1)
	return &MockModelDBStateDeleteFilesystemCall{Call: call}
}

// MockModelDBStateDeleteFilesystemCall wrap *gomock.Call
type MockModelDBStateDeleteFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteFilesystemCall) Return(arg0 error) *MockModelDBStateDeleteFilesystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteFilesystemCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteFilesystemCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteJob mocks base method.
func (m *MockModelDBState) DeleteJob(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockModelDBStateMockRecorder) DeleteJob(arg0, arg1 any) *MockModelDBStateDeleteJobCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockModelDBState)(nil).DeleteJob), arg0, arg1)
	return &MockModelDBStateDeleteJobCall{Call: call}
}

// MockModelDBStateDeleteJobCall wrap *gomock.Call
type MockModelDBStateDeleteJobCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteJobCall) Return(arg0 error) *MockModelDBStateDeleteJobCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteJobCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteJobCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteJobCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteJobCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMachine mocks base method.
func (m *MockModelDBState) DeleteMachine(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockModelDBStateMockRecorder) DeleteMachine(arg0, arg1 any) *MockModelDBStateDeleteMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockModelDBState)(nil).DeleteMachine), arg0, arg1)
	return &MockModelDBStateDeleteMachineCall{Call: call}
}

// MockModelDBStateDeleteMachineCall wrap *gomock.Call
type MockModelDBStateDeleteMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteMachineCall) Return(arg0 error) *MockModelDBStateDeleteMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteMachineCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteMachineCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModelArtifacts mocks base method.
func (m *MockModelDBState) DeleteModelArtifacts(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelArtifacts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModelArtifacts indicates an expected call of DeleteModelArtifacts.
func (mr *MockModelDBStateMockRecorder) DeleteModelArtifacts(arg0, arg1 any) *MockModelDBStateDeleteModelArtifactsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelArtifacts", reflect.TypeOf((*MockModelDBState)(nil).DeleteModelArtifacts), arg0, arg1)
	return &MockModelDBStateDeleteModelArtifactsCall{Call: call}
}

// MockModelDBStateDeleteModelArtifactsCall wrap *gomock.Call
type MockModelDBStateDeleteModelArtifactsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteModelArtifactsCall) Return(arg0 error) *MockModelDBStateDeleteModelArtifactsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteModelArtifactsCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteModelArtifactsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteModelArtifactsCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteModelArtifactsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRelation mocks base method.
func (m *MockModelDBState) DeleteRelation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelation indicates an expected call of DeleteRelation.
func (mr *MockModelDBStateMockRecorder) DeleteRelation(arg0, arg1 any) *MockModelDBStateDeleteRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelation", reflect.TypeOf((*MockModelDBState)(nil).DeleteRelation), arg0, arg1)
	return &MockModelDBStateDeleteRelationCall{Call: call}
}

// MockModelDBStateDeleteRelationCall wrap *gomock.Call
type MockModelDBStateDeleteRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteRelationCall) Return(arg0 error) *MockModelDBStateDeleteRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteRelationCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteRelationCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRelationUnits mocks base method.
func (m *MockModelDBState) DeleteRelationUnits(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationUnits indicates an expected call of DeleteRelationUnits.
func (mr *MockModelDBStateMockRecorder) DeleteRelationUnits(arg0, arg1 any) *MockModelDBStateDeleteRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationUnits", reflect.TypeOf((*MockModelDBState)(nil).DeleteRelationUnits), arg0, arg1)
	return &MockModelDBStateDeleteRelationUnitsCall{Call: call}
}

// MockModelDBStateDeleteRelationUnitsCall wrap *gomock.Call
type MockModelDBStateDeleteRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteRelationUnitsCall) Return(arg0 error) *MockModelDBStateDeleteRelationUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteRelationUnitsCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteRelationUnitsCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRemoteApplicationOfferer mocks base method.
func (m *MockModelDBState) DeleteRemoteApplicationOfferer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteApplicationOfferer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteApplicationOfferer indicates an expected call of DeleteRemoteApplicationOfferer.
func (mr *MockModelDBStateMockRecorder) DeleteRemoteApplicationOfferer(arg0, arg1 any) *MockModelDBStateDeleteRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteApplicationOfferer", reflect.TypeOf((*MockModelDBState)(nil).DeleteRemoteApplicationOfferer), arg0, arg1)
	return &MockModelDBStateDeleteRemoteApplicationOffererCall{Call: call}
}

// MockModelDBStateDeleteRemoteApplicationOffererCall wrap *gomock.Call
type MockModelDBStateDeleteRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteRemoteApplicationOffererCall) Return(arg0 error) *MockModelDBStateDeleteRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteRemoteApplicationOffererCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStorageAttachment mocks base method.
func (m *MockModelDBState) DeleteStorageAttachment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageAttachment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageAttachment indicates an expected call of DeleteStorageAttachment.
func (mr *MockModelDBStateMockRecorder) DeleteStorageAttachment(arg0, arg1 any) *MockModelDBStateDeleteStorageAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageAttachment", reflect.TypeOf((*MockModelDBState)(nil).DeleteStorageAttachment), arg0, arg1)
	return &MockModelDBStateDeleteStorageAttachmentCall{Call: call}
}

// MockModelDBStateDeleteStorageAttachmentCall wrap *gomock.Call
type MockModelDBStateDeleteStorageAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteStorageAttachmentCall) Return(arg0 error) *MockModelDBStateDeleteStorageAttachmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteStorageAttachmentCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteStorageAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteStorageAttachmentCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteStorageAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUnit mocks base method.
func (m *MockModelDBState) DeleteUnit(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockModelDBStateMockRecorder) DeleteUnit(arg0, arg1 any) *MockModelDBStateDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockModelDBState)(nil).DeleteUnit), arg0, arg1)
	return &MockModelDBStateDeleteUnitCall{Call: call}
}

// MockModelDBStateDeleteUnitCall wrap *gomock.Call
type MockModelDBStateDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteUnitCall) Return(arg0 error) *MockModelDBStateDeleteUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteUnitCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteUnitCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVolume mocks base method.
func (m *MockModelDBState) DeleteVolume(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockModelDBStateMockRecorder) DeleteVolume(arg0, arg1 any) *MockModelDBStateDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockModelDBState)(nil).DeleteVolume), arg0, arg1)
	return &MockModelDBStateDeleteVolumeCall{Call: call}
}

// MockModelDBStateDeleteVolumeCall wrap *gomock.Call
type MockModelDBStateDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteVolumeCall) Return(arg0 error) *MockModelDBStateDeleteVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteVolumeCall) Do(f func(context.Context, string) error) *MockModelDBStateDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteVolumeCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureApplicationNotAliveCascade mocks base method.
func (m *MockModelDBState) EnsureApplicationNotAliveCascade(arg0 context.Context, arg1 string, arg2 bool) (internal.CascadedApplicationLives, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureApplicationNotAliveCascade", arg0, arg1, arg2)
	ret0, _ := ret[0].(internal.CascadedApplicationLives)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureApplicationNotAliveCascade indicates an expected call of EnsureApplicationNotAliveCascade.
func (mr *MockModelDBStateMockRecorder) EnsureApplicationNotAliveCascade(arg0, arg1, arg2 any) *MockModelDBStateEnsureApplicationNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureApplicationNotAliveCascade", reflect.TypeOf((*MockModelDBState)(nil).EnsureApplicationNotAliveCascade), arg0, arg1, arg2)
	return &MockModelDBStateEnsureApplicationNotAliveCascadeCall{Call: call}
}

// MockModelDBStateEnsureApplicationNotAliveCascadeCall wrap *gomock.Call
type MockModelDBStateEnsureApplicationNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureApplicationNotAliveCascadeCall) Return(arg0 internal.CascadedApplicationLives, arg1 error) *MockModelDBStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureApplicationNotAliveCascadeCall) Do(f func(context.Context, string, bool) (internal.CascadedApplicationLives, error)) *MockModelDBStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureApplicationNotAliveCascadeCall) DoAndReturn(f func(context.Context, string, bool) (internal.CascadedApplicationLives, error)) *MockModelDBStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureMachineNotAliveCascade mocks base method.
func (m *MockModelDBState) EnsureMachineNotAliveCascade(arg0 context.Context, arg1 string, arg2 bool) (internal.CascadedMachineLives, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureMachineNotAliveCascade", arg0, arg1, arg2)
	ret0, _ := ret[0].(internal.CascadedMachineLives)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureMachineNotAliveCascade indicates an expected call of EnsureMachineNotAliveCascade.
func (mr *MockModelDBStateMockRecorder) EnsureMachineNotAliveCascade(arg0, arg1, arg2 any) *MockModelDBStateEnsureMachineNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureMachineNotAliveCascade", reflect.TypeOf((*MockModelDBState)(nil).EnsureMachineNotAliveCascade), arg0, arg1, arg2)
	return &MockModelDBStateEnsureMachineNotAliveCascadeCall{Call: call}
}

// MockModelDBStateEnsureMachineNotAliveCascadeCall wrap *gomock.Call
type MockModelDBStateEnsureMachineNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureMachineNotAliveCascadeCall) Return(arg0 internal.CascadedMachineLives, arg1 error) *MockModelDBStateEnsureMachineNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureMachineNotAliveCascadeCall) Do(f func(context.Context, string, bool) (internal.CascadedMachineLives, error)) *MockModelDBStateEnsureMachineNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureMachineNotAliveCascadeCall) DoAndReturn(f func(context.Context, string, bool) (internal.CascadedMachineLives, error)) *MockModelDBStateEnsureMachineNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureModelNotAliveCascade mocks base method.
func (m *MockModelDBState) EnsureModelNotAliveCascade(arg0 context.Context, arg1 string, arg2 bool) (removal.ModelArtifacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureModelNotAliveCascade", arg0, arg1, arg2)
	ret0, _ := ret[0].(removal.ModelArtifacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureModelNotAliveCascade indicates an expected call of EnsureModelNotAliveCascade.
func (mr *MockModelDBStateMockRecorder) EnsureModelNotAliveCascade(arg0, arg1, arg2 any) *MockModelDBStateEnsureModelNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureModelNotAliveCascade", reflect.TypeOf((*MockModelDBState)(nil).EnsureModelNotAliveCascade), arg0, arg1, arg2)
	return &MockModelDBStateEnsureModelNotAliveCascadeCall{Call: call}
}

// MockModelDBStateEnsureModelNotAliveCascadeCall wrap *gomock.Call
type MockModelDBStateEnsureModelNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureModelNotAliveCascadeCall) Return(arg0 removal.ModelArtifacts, arg1 error) *MockModelDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureModelNotAliveCascadeCall) Do(f func(context.Context, string, bool) (removal.ModelArtifacts, error)) *MockModelDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureModelNotAliveCascadeCall) DoAndReturn(f func(context.Context, string, bool) (removal.ModelArtifacts, error)) *MockModelDBStateEnsureModelNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureRelationNotAlive mocks base method.
func (m *MockModelDBState) EnsureRelationNotAlive(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRelationNotAlive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureRelationNotAlive indicates an expected call of EnsureRelationNotAlive.
func (mr *MockModelDBStateMockRecorder) EnsureRelationNotAlive(arg0, arg1 any) *MockModelDBStateEnsureRelationNotAliveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRelationNotAlive", reflect.TypeOf((*MockModelDBState)(nil).EnsureRelationNotAlive), arg0, arg1)
	return &MockModelDBStateEnsureRelationNotAliveCall{Call: call}
}

// MockModelDBStateEnsureRelationNotAliveCall wrap *gomock.Call
type MockModelDBStateEnsureRelationNotAliveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureRelationNotAliveCall) Return(arg0 error) *MockModelDBStateEnsureRelationNotAliveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureRelationNotAliveCall) Do(f func(context.Context, string) error) *MockModelDBStateEnsureRelationNotAliveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureRelationNotAliveCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateEnsureRelationNotAliveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureRemoteApplicationOffererNotAliveCascade mocks base method.
func (m *MockModelDBState) EnsureRemoteApplicationOffererNotAliveCascade(arg0 context.Context, arg1 string) (internal.CascadedRemoteApplicationOffererLives, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRemoteApplicationOffererNotAliveCascade", arg0, arg1)
	ret0, _ := ret[0].(internal.CascadedRemoteApplicationOffererLives)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureRemoteApplicationOffererNotAliveCascade indicates an expected call of EnsureRemoteApplicationOffererNotAliveCascade.
func (mr *MockModelDBStateMockRecorder) EnsureRemoteApplicationOffererNotAliveCascade(arg0, arg1 any) *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRemoteApplicationOffererNotAliveCascade", reflect.TypeOf((*MockModelDBState)(nil).EnsureRemoteApplicationOffererNotAliveCascade), arg0, arg1)
	return &MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall{Call: call}
}

// MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall wrap *gomock.Call
type MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall) Return(arg0 internal.CascadedRemoteApplicationOffererLives, arg1 error) *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall) Do(f func(context.Context, string) (internal.CascadedRemoteApplicationOffererLives, error)) *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall) DoAndReturn(f func(context.Context, string) (internal.CascadedRemoteApplicationOffererLives, error)) *MockModelDBStateEnsureRemoteApplicationOffererNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureStorageAttachmentNotAlive mocks base method.
func (m *MockModelDBState) EnsureStorageAttachmentNotAlive(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureStorageAttachmentNotAlive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureStorageAttachmentNotAlive indicates an expected call of EnsureStorageAttachmentNotAlive.
func (mr *MockModelDBStateMockRecorder) EnsureStorageAttachmentNotAlive(arg0, arg1 any) *MockModelDBStateEnsureStorageAttachmentNotAliveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureStorageAttachmentNotAlive", reflect.TypeOf((*MockModelDBState)(nil).EnsureStorageAttachmentNotAlive), arg0, arg1)
	return &MockModelDBStateEnsureStorageAttachmentNotAliveCall{Call: call}
}

// MockModelDBStateEnsureStorageAttachmentNotAliveCall wrap *gomock.Call
type MockModelDBStateEnsureStorageAttachmentNotAliveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveCall) Return(arg0 error) *MockModelDBStateEnsureStorageAttachmentNotAliveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveCall) Do(f func(context.Context, string) error) *MockModelDBStateEnsureStorageAttachmentNotAliveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateEnsureStorageAttachmentNotAliveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureStorageAttachmentNotAliveWithFulfilment mocks base method.
func (m *MockModelDBState) EnsureStorageAttachmentNotAliveWithFulfilment(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureStorageAttachmentNotAliveWithFulfilment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureStorageAttachmentNotAliveWithFulfilment indicates an expected call of EnsureStorageAttachmentNotAliveWithFulfilment.
func (mr *MockModelDBStateMockRecorder) EnsureStorageAttachmentNotAliveWithFulfilment(arg0, arg1, arg2 any) *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureStorageAttachmentNotAliveWithFulfilment", reflect.TypeOf((*MockModelDBState)(nil).EnsureStorageAttachmentNotAliveWithFulfilment), arg0, arg1, arg2)
	return &MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall{Call: call}
}

// MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall wrap *gomock.Call
type MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall) Return(arg0 error) *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall) Do(f func(context.Context, string, int) error) *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall) DoAndReturn(f func(context.Context, string, int) error) *MockModelDBStateEnsureStorageAttachmentNotAliveWithFulfilmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitNotAliveCascade mocks base method.
func (m *MockModelDBState) EnsureUnitNotAliveCascade(arg0 context.Context, arg1 string, arg2 bool) (internal.CascadedUnitLives, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitNotAliveCascade", arg0, arg1, arg2)
	ret0, _ := ret[0].(internal.CascadedUnitLives)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureUnitNotAliveCascade indicates an expected call of EnsureUnitNotAliveCascade.
func (mr *MockModelDBStateMockRecorder) EnsureUnitNotAliveCascade(arg0, arg1, arg2 any) *MockModelDBStateEnsureUnitNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitNotAliveCascade", reflect.TypeOf((*MockModelDBState)(nil).EnsureUnitNotAliveCascade), arg0, arg1, arg2)
	return &MockModelDBStateEnsureUnitNotAliveCascadeCall{Call: call}
}

// MockModelDBStateEnsureUnitNotAliveCascadeCall wrap *gomock.Call
type MockModelDBStateEnsureUnitNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateEnsureUnitNotAliveCascadeCall) Return(arg0 internal.CascadedUnitLives, arg1 error) *MockModelDBStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateEnsureUnitNotAliveCascadeCall) Do(f func(context.Context, string, bool) (internal.CascadedUnitLives, error)) *MockModelDBStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateEnsureUnitNotAliveCascadeCall) DoAndReturn(f func(context.Context, string, bool) (internal.CascadedUnitLives, error)) *MockModelDBStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilesystemScheduleRemoval mocks base method.
func (m *MockModelDBState) FilesystemScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesystemScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesystemScheduleRemoval indicates an expected call of FilesystemScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) FilesystemScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateFilesystemScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesystemScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).FilesystemScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateFilesystemScheduleRemovalCall{Call: call}
}

// MockModelDBStateFilesystemScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateFilesystemScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateFilesystemScheduleRemovalCall) Return(arg0 error) *MockModelDBStateFilesystemScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateFilesystemScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateFilesystemScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateFilesystemScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateFilesystemScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllJobs mocks base method.
func (m *MockModelDBState) GetAllJobs(arg0 context.Context) ([]removal.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0)
	ret0, _ := ret[0].([]removal.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockModelDBStateMockRecorder) GetAllJobs(arg0 any) *MockModelDBStateGetAllJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockModelDBState)(nil).GetAllJobs), arg0)
	return &MockModelDBStateGetAllJobsCall{Call: call}
}

// MockModelDBStateGetAllJobsCall wrap *gomock.Call
type MockModelDBStateGetAllJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetAllJobsCall) Return(arg0 []removal.Job, arg1 error) *MockModelDBStateGetAllJobsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetAllJobsCall) Do(f func(context.Context) ([]removal.Job, error)) *MockModelDBStateGetAllJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetAllJobsCall) DoAndReturn(f func(context.Context) ([]removal.Job, error)) *MockModelDBStateGetAllJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockModelDBState) GetApplicationLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockModelDBStateMockRecorder) GetApplicationLife(arg0, arg1 any) *MockModelDBStateGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockModelDBState)(nil).GetApplicationLife), arg0, arg1)
	return &MockModelDBStateGetApplicationLifeCall{Call: call}
}

// MockModelDBStateGetApplicationLifeCall wrap *gomock.Call
type MockModelDBStateGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetApplicationLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetApplicationLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetApplicationLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationNameAndUnitNameByUnitUUID mocks base method.
func (m *MockModelDBState) GetApplicationNameAndUnitNameByUnitUUID(arg0 context.Context, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNameAndUnitNameByUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationNameAndUnitNameByUnitUUID indicates an expected call of GetApplicationNameAndUnitNameByUnitUUID.
func (mr *MockModelDBStateMockRecorder) GetApplicationNameAndUnitNameByUnitUUID(arg0, arg1 any) *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNameAndUnitNameByUnitUUID", reflect.TypeOf((*MockModelDBState)(nil).GetApplicationNameAndUnitNameByUnitUUID), arg0, arg1)
	return &MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall{Call: call}
}

// MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall wrap *gomock.Call
type MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall) Return(arg0, arg1 string, arg2 error) *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall) Do(f func(context.Context, string) (string, string, error)) *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall) DoAndReturn(f func(context.Context, string) (string, string, error)) *MockModelDBStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDetachInfoForStorageAttachment mocks base method.
func (m *MockModelDBState) GetDetachInfoForStorageAttachment(arg0 context.Context, arg1 string) (internal.StorageAttachmentDetachInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetachInfoForStorageAttachment", arg0, arg1)
	ret0, _ := ret[0].(internal.StorageAttachmentDetachInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetachInfoForStorageAttachment indicates an expected call of GetDetachInfoForStorageAttachment.
func (mr *MockModelDBStateMockRecorder) GetDetachInfoForStorageAttachment(arg0, arg1 any) *MockModelDBStateGetDetachInfoForStorageAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetachInfoForStorageAttachment", reflect.TypeOf((*MockModelDBState)(nil).GetDetachInfoForStorageAttachment), arg0, arg1)
	return &MockModelDBStateGetDetachInfoForStorageAttachmentCall{Call: call}
}

// MockModelDBStateGetDetachInfoForStorageAttachmentCall wrap *gomock.Call
type MockModelDBStateGetDetachInfoForStorageAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetDetachInfoForStorageAttachmentCall) Return(arg0 internal.StorageAttachmentDetachInfo, arg1 error) *MockModelDBStateGetDetachInfoForStorageAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetDetachInfoForStorageAttachmentCall) Do(f func(context.Context, string) (internal.StorageAttachmentDetachInfo, error)) *MockModelDBStateGetDetachInfoForStorageAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetDetachInfoForStorageAttachmentCall) DoAndReturn(f func(context.Context, string) (internal.StorageAttachmentDetachInfo, error)) *MockModelDBStateGetDetachInfoForStorageAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemLife mocks base method.
func (m *MockModelDBState) GetFilesystemLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemLife indicates an expected call of GetFilesystemLife.
func (mr *MockModelDBStateMockRecorder) GetFilesystemLife(arg0, arg1 any) *MockModelDBStateGetFilesystemLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemLife", reflect.TypeOf((*MockModelDBState)(nil).GetFilesystemLife), arg0, arg1)
	return &MockModelDBStateGetFilesystemLifeCall{Call: call}
}

// MockModelDBStateGetFilesystemLifeCall wrap *gomock.Call
type MockModelDBStateGetFilesystemLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetFilesystemLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetFilesystemLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetFilesystemLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetFilesystemLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetFilesystemLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetFilesystemLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceLife mocks base method.
func (m *MockModelDBState) GetInstanceLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLife indicates an expected call of GetInstanceLife.
func (mr *MockModelDBStateMockRecorder) GetInstanceLife(arg0, arg1 any) *MockModelDBStateGetInstanceLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLife", reflect.TypeOf((*MockModelDBState)(nil).GetInstanceLife), arg0, arg1)
	return &MockModelDBStateGetInstanceLifeCall{Call: call}
}

// MockModelDBStateGetInstanceLifeCall wrap *gomock.Call
type MockModelDBStateGetInstanceLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetInstanceLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetInstanceLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetInstanceLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetInstanceLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetInstanceLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetInstanceLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockModelDBState) GetMachineLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockModelDBStateMockRecorder) GetMachineLife(arg0, arg1 any) *MockModelDBStateGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockModelDBState)(nil).GetMachineLife), arg0, arg1)
	return &MockModelDBStateGetMachineLifeCall{Call: call}
}

// MockModelDBStateGetMachineLifeCall wrap *gomock.Call
type MockModelDBStateGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetMachineLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetMachineLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetMachineLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineNetworkInterfaces mocks base method.
func (m *MockModelDBState) GetMachineNetworkInterfaces(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineNetworkInterfaces", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineNetworkInterfaces indicates an expected call of GetMachineNetworkInterfaces.
func (mr *MockModelDBStateMockRecorder) GetMachineNetworkInterfaces(arg0, arg1 any) *MockModelDBStateGetMachineNetworkInterfacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineNetworkInterfaces", reflect.TypeOf((*MockModelDBState)(nil).GetMachineNetworkInterfaces), arg0, arg1)
	return &MockModelDBStateGetMachineNetworkInterfacesCall{Call: call}
}

// MockModelDBStateGetMachineNetworkInterfacesCall wrap *gomock.Call
type MockModelDBStateGetMachineNetworkInterfacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetMachineNetworkInterfacesCall) Return(arg0 []string, arg1 error) *MockModelDBStateGetMachineNetworkInterfacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetMachineNetworkInterfacesCall) Do(f func(context.Context, string) ([]string, error)) *MockModelDBStateGetMachineNetworkInterfacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetMachineNetworkInterfacesCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockModelDBStateGetMachineNetworkInterfacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelLife mocks base method.
func (m *MockModelDBState) GetModelLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelLife indicates an expected call of GetModelLife.
func (mr *MockModelDBStateMockRecorder) GetModelLife(arg0, arg1 any) *MockModelDBStateGetModelLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelLife", reflect.TypeOf((*MockModelDBState)(nil).GetModelLife), arg0, arg1)
	return &MockModelDBStateGetModelLifeCall{Call: call}
}

// MockModelDBStateGetModelLifeCall wrap *gomock.Call
type MockModelDBStateGetModelLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetModelLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetModelLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetModelLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetModelLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetModelLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetModelLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLife mocks base method.
func (m *MockModelDBState) GetRelationLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationLife indicates an expected call of GetRelationLife.
func (mr *MockModelDBStateMockRecorder) GetRelationLife(arg0, arg1 any) *MockModelDBStateGetRelationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLife", reflect.TypeOf((*MockModelDBState)(nil).GetRelationLife), arg0, arg1)
	return &MockModelDBStateGetRelationLifeCall{Call: call}
}

// MockModelDBStateGetRelationLifeCall wrap *gomock.Call
type MockModelDBStateGetRelationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetRelationLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetRelationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetRelationLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetRelationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetRelationLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetRelationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitsForUnit mocks base method.
func (m *MockModelDBState) GetRelationUnitsForUnit(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitsForUnit", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitsForUnit indicates an expected call of GetRelationUnitsForUnit.
func (mr *MockModelDBStateMockRecorder) GetRelationUnitsForUnit(arg0, arg1 any) *MockModelDBStateGetRelationUnitsForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitsForUnit", reflect.TypeOf((*MockModelDBState)(nil).GetRelationUnitsForUnit), arg0, arg1)
	return &MockModelDBStateGetRelationUnitsForUnitCall{Call: call}
}

// MockModelDBStateGetRelationUnitsForUnitCall wrap *gomock.Call
type MockModelDBStateGetRelationUnitsForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetRelationUnitsForUnitCall) Return(arg0 []string, arg1 error) *MockModelDBStateGetRelationUnitsForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetRelationUnitsForUnitCall) Do(f func(context.Context, string) ([]string, error)) *MockModelDBStateGetRelationUnitsForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetRelationUnitsForUnitCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockModelDBStateGetRelationUnitsForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOffererLife mocks base method.
func (m *MockModelDBState) GetRemoteApplicationOffererLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOffererLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOffererLife indicates an expected call of GetRemoteApplicationOffererLife.
func (mr *MockModelDBStateMockRecorder) GetRemoteApplicationOffererLife(arg0, arg1 any) *MockModelDBStateGetRemoteApplicationOffererLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOffererLife", reflect.TypeOf((*MockModelDBState)(nil).GetRemoteApplicationOffererLife), arg0, arg1)
	return &MockModelDBStateGetRemoteApplicationOffererLifeCall{Call: call}
}

// MockModelDBStateGetRemoteApplicationOffererLifeCall wrap *gomock.Call
type MockModelDBStateGetRemoteApplicationOffererLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetRemoteApplicationOffererLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetRemoteApplicationOffererLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetRemoteApplicationOffererLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetRemoteApplicationOffererLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetRemoteApplicationOffererLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetRemoteApplicationOffererLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentLife mocks base method.
func (m *MockModelDBState) GetStorageAttachmentLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentLife indicates an expected call of GetStorageAttachmentLife.
func (mr *MockModelDBStateMockRecorder) GetStorageAttachmentLife(arg0, arg1 any) *MockModelDBStateGetStorageAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentLife", reflect.TypeOf((*MockModelDBState)(nil).GetStorageAttachmentLife), arg0, arg1)
	return &MockModelDBStateGetStorageAttachmentLifeCall{Call: call}
}

// MockModelDBStateGetStorageAttachmentLifeCall wrap *gomock.Call
type MockModelDBStateGetStorageAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetStorageAttachmentLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetStorageAttachmentLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetStorageAttachmentLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockModelDBState) GetUnitLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockModelDBStateMockRecorder) GetUnitLife(arg0, arg1 any) *MockModelDBStateGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockModelDBState)(nil).GetUnitLife), arg0, arg1)
	return &MockModelDBStateGetUnitLifeCall{Call: call}
}

// MockModelDBStateGetUnitLifeCall wrap *gomock.Call
type MockModelDBStateGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetUnitLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetUnitLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetUnitLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeLife mocks base method.
func (m *MockModelDBState) GetVolumeLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeLife indicates an expected call of GetVolumeLife.
func (mr *MockModelDBStateMockRecorder) GetVolumeLife(arg0, arg1 any) *MockModelDBStateGetVolumeLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeLife", reflect.TypeOf((*MockModelDBState)(nil).GetVolumeLife), arg0, arg1)
	return &MockModelDBStateGetVolumeLifeCall{Call: call}
}

// MockModelDBStateGetVolumeLifeCall wrap *gomock.Call
type MockModelDBStateGetVolumeLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetVolumeLifeCall) Return(arg0 life.Life, arg1 error) *MockModelDBStateGetVolumeLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetVolumeLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetVolumeLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetVolumeLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockModelDBStateGetVolumeLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerModel mocks base method.
func (m *MockModelDBState) IsControllerModel(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerModel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerModel indicates an expected call of IsControllerModel.
func (mr *MockModelDBStateMockRecorder) IsControllerModel(arg0, arg1 any) *MockModelDBStateIsControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerModel", reflect.TypeOf((*MockModelDBState)(nil).IsControllerModel), arg0, arg1)
	return &MockModelDBStateIsControllerModelCall{Call: call}
}

// MockModelDBStateIsControllerModelCall wrap *gomock.Call
type MockModelDBStateIsControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateIsControllerModelCall) Return(arg0 bool, arg1 error) *MockModelDBStateIsControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateIsControllerModelCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateIsControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateIsControllerModelCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateIsControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaveScope mocks base method.
func (m *MockModelDBState) LeaveScope(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveScope indicates an expected call of LeaveScope.
func (mr *MockModelDBStateMockRecorder) LeaveScope(arg0, arg1 any) *MockModelDBStateLeaveScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveScope", reflect.TypeOf((*MockModelDBState)(nil).LeaveScope), arg0, arg1)
	return &MockModelDBStateLeaveScopeCall{Call: call}
}

// MockModelDBStateLeaveScopeCall wrap *gomock.Call
type MockModelDBStateLeaveScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateLeaveScopeCall) Return(arg0 error) *MockModelDBStateLeaveScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateLeaveScopeCall) Do(f func(context.Context, string) error) *MockModelDBStateLeaveScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateLeaveScopeCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateLeaveScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineExists mocks base method.
func (m *MockModelDBState) MachineExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineExists indicates an expected call of MachineExists.
func (mr *MockModelDBStateMockRecorder) MachineExists(arg0, arg1 any) *MockModelDBStateMachineExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineExists", reflect.TypeOf((*MockModelDBState)(nil).MachineExists), arg0, arg1)
	return &MockModelDBStateMachineExistsCall{Call: call}
}

// MockModelDBStateMachineExistsCall wrap *gomock.Call
type MockModelDBStateMachineExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMachineExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateMachineExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMachineExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateMachineExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMachineExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateMachineExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineScheduleRemoval mocks base method.
func (m *MockModelDBState) MachineScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MachineScheduleRemoval indicates an expected call of MachineScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) MachineScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateMachineScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).MachineScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateMachineScheduleRemovalCall{Call: call}
}

// MockModelDBStateMachineScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateMachineScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMachineScheduleRemovalCall) Return(arg0 error) *MockModelDBStateMachineScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMachineScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateMachineScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMachineScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateMachineScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkInstanceAsDead mocks base method.
func (m *MockModelDBState) MarkInstanceAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInstanceAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInstanceAsDead indicates an expected call of MarkInstanceAsDead.
func (mr *MockModelDBStateMockRecorder) MarkInstanceAsDead(arg0, arg1 any) *MockModelDBStateMarkInstanceAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInstanceAsDead", reflect.TypeOf((*MockModelDBState)(nil).MarkInstanceAsDead), arg0, arg1)
	return &MockModelDBStateMarkInstanceAsDeadCall{Call: call}
}

// MockModelDBStateMarkInstanceAsDeadCall wrap *gomock.Call
type MockModelDBStateMarkInstanceAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMarkInstanceAsDeadCall) Return(arg0 error) *MockModelDBStateMarkInstanceAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMarkInstanceAsDeadCall) Do(f func(context.Context, string) error) *MockModelDBStateMarkInstanceAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMarkInstanceAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateMarkInstanceAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkMachineAsDead mocks base method.
func (m *MockModelDBState) MarkMachineAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMachineAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMachineAsDead indicates an expected call of MarkMachineAsDead.
func (mr *MockModelDBStateMockRecorder) MarkMachineAsDead(arg0, arg1 any) *MockModelDBStateMarkMachineAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMachineAsDead", reflect.TypeOf((*MockModelDBState)(nil).MarkMachineAsDead), arg0, arg1)
	return &MockModelDBStateMarkMachineAsDeadCall{Call: call}
}

// MockModelDBStateMarkMachineAsDeadCall wrap *gomock.Call
type MockModelDBStateMarkMachineAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMarkMachineAsDeadCall) Return(arg0 error) *MockModelDBStateMarkMachineAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMarkMachineAsDeadCall) Do(f func(context.Context, string) error) *MockModelDBStateMarkMachineAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMarkMachineAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateMarkMachineAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkModelAsDead mocks base method.
func (m *MockModelDBState) MarkModelAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkModelAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkModelAsDead indicates an expected call of MarkModelAsDead.
func (mr *MockModelDBStateMockRecorder) MarkModelAsDead(arg0, arg1 any) *MockModelDBStateMarkModelAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkModelAsDead", reflect.TypeOf((*MockModelDBState)(nil).MarkModelAsDead), arg0, arg1)
	return &MockModelDBStateMarkModelAsDeadCall{Call: call}
}

// MockModelDBStateMarkModelAsDeadCall wrap *gomock.Call
type MockModelDBStateMarkModelAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMarkModelAsDeadCall) Return(arg0 error) *MockModelDBStateMarkModelAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMarkModelAsDeadCall) Do(f func(context.Context, string) error) *MockModelDBStateMarkModelAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMarkModelAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateMarkModelAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkUnitAsDead mocks base method.
func (m *MockModelDBState) MarkUnitAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUnitAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUnitAsDead indicates an expected call of MarkUnitAsDead.
func (mr *MockModelDBStateMockRecorder) MarkUnitAsDead(arg0, arg1 any) *MockModelDBStateMarkUnitAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnitAsDead", reflect.TypeOf((*MockModelDBState)(nil).MarkUnitAsDead), arg0, arg1)
	return &MockModelDBStateMarkUnitAsDeadCall{Call: call}
}

// MockModelDBStateMarkUnitAsDeadCall wrap *gomock.Call
type MockModelDBStateMarkUnitAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateMarkUnitAsDeadCall) Return(arg0 error) *MockModelDBStateMarkUnitAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateMarkUnitAsDeadCall) Do(f func(context.Context, string) error) *MockModelDBStateMarkUnitAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateMarkUnitAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockModelDBStateMarkUnitAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelExists mocks base method.
func (m *MockModelDBState) ModelExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelExists indicates an expected call of ModelExists.
func (mr *MockModelDBStateMockRecorder) ModelExists(arg0, arg1 any) *MockModelDBStateModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelExists", reflect.TypeOf((*MockModelDBState)(nil).ModelExists), arg0, arg1)
	return &MockModelDBStateModelExistsCall{Call: call}
}

// MockModelDBStateModelExistsCall wrap *gomock.Call
type MockModelDBStateModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateModelExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateModelExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateModelExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelScheduleRemoval mocks base method.
func (m *MockModelDBState) ModelScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModelScheduleRemoval indicates an expected call of ModelScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) ModelScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateModelScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).ModelScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateModelScheduleRemovalCall{Call: call}
}

// MockModelDBStateModelScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateModelScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateModelScheduleRemovalCall) Return(arg0 error) *MockModelDBStateModelScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateModelScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateModelScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateModelScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateModelScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchEntityRemovals mocks base method.
func (m *MockModelDBState) NamespaceForWatchEntityRemovals() (eventsource.NamespaceQuery, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchEntityRemovals")
	ret0, _ := ret[0].(eventsource.NamespaceQuery)
	ret1, _ := ret[1].(map[string]string)
	return ret0, ret1
}

// NamespaceForWatchEntityRemovals indicates an expected call of NamespaceForWatchEntityRemovals.
func (mr *MockModelDBStateMockRecorder) NamespaceForWatchEntityRemovals() *MockModelDBStateNamespaceForWatchEntityRemovalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchEntityRemovals", reflect.TypeOf((*MockModelDBState)(nil).NamespaceForWatchEntityRemovals))
	return &MockModelDBStateNamespaceForWatchEntityRemovalsCall{Call: call}
}

// MockModelDBStateNamespaceForWatchEntityRemovalsCall wrap *gomock.Call
type MockModelDBStateNamespaceForWatchEntityRemovalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateNamespaceForWatchEntityRemovalsCall) Return(arg0 eventsource.NamespaceQuery, arg1 map[string]string) *MockModelDBStateNamespaceForWatchEntityRemovalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateNamespaceForWatchEntityRemovalsCall) Do(f func() (eventsource.NamespaceQuery, map[string]string)) *MockModelDBStateNamespaceForWatchEntityRemovalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateNamespaceForWatchEntityRemovalsCall) DoAndReturn(f func() (eventsource.NamespaceQuery, map[string]string)) *MockModelDBStateNamespaceForWatchEntityRemovalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchRemovals mocks base method.
func (m *MockModelDBState) NamespaceForWatchRemovals() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchRemovals")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchRemovals indicates an expected call of NamespaceForWatchRemovals.
func (mr *MockModelDBStateMockRecorder) NamespaceForWatchRemovals() *MockModelDBStateNamespaceForWatchRemovalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchRemovals", reflect.TypeOf((*MockModelDBState)(nil).NamespaceForWatchRemovals))
	return &MockModelDBStateNamespaceForWatchRemovalsCall{Call: call}
}

// MockModelDBStateNamespaceForWatchRemovalsCall wrap *gomock.Call
type MockModelDBStateNamespaceForWatchRemovalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateNamespaceForWatchRemovalsCall) Return(arg0 string) *MockModelDBStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateNamespaceForWatchRemovalsCall) Do(f func() string) *MockModelDBStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateNamespaceForWatchRemovalsCall) DoAndReturn(f func() string) *MockModelDBStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationExists mocks base method.
func (m *MockModelDBState) RelationExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationExists indicates an expected call of RelationExists.
func (mr *MockModelDBStateMockRecorder) RelationExists(arg0, arg1 any) *MockModelDBStateRelationExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationExists", reflect.TypeOf((*MockModelDBState)(nil).RelationExists), arg0, arg1)
	return &MockModelDBStateRelationExistsCall{Call: call}
}

// MockModelDBStateRelationExistsCall wrap *gomock.Call
type MockModelDBStateRelationExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateRelationExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateRelationExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateRelationExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateRelationExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateRelationExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateRelationExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationScheduleRemoval mocks base method.
func (m *MockModelDBState) RelationScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelationScheduleRemoval indicates an expected call of RelationScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) RelationScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateRelationScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).RelationScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateRelationScheduleRemovalCall{Call: call}
}

// MockModelDBStateRelationScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateRelationScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateRelationScheduleRemovalCall) Return(arg0 error) *MockModelDBStateRelationScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateRelationScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateRelationScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateRelationScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateRelationScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplicationOffererExists mocks base method.
func (m *MockModelDBState) RemoteApplicationOffererExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplicationOffererExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteApplicationOffererExists indicates an expected call of RemoteApplicationOffererExists.
func (mr *MockModelDBStateMockRecorder) RemoteApplicationOffererExists(arg0, arg1 any) *MockModelDBStateRemoteApplicationOffererExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplicationOffererExists", reflect.TypeOf((*MockModelDBState)(nil).RemoteApplicationOffererExists), arg0, arg1)
	return &MockModelDBStateRemoteApplicationOffererExistsCall{Call: call}
}

// MockModelDBStateRemoteApplicationOffererExistsCall wrap *gomock.Call
type MockModelDBStateRemoteApplicationOffererExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateRemoteApplicationOffererExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateRemoteApplicationOffererExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateRemoteApplicationOffererExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateRemoteApplicationOffererExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateRemoteApplicationOffererExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateRemoteApplicationOffererExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplicationOffererScheduleRemoval mocks base method.
func (m *MockModelDBState) RemoteApplicationOffererScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplicationOffererScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoteApplicationOffererScheduleRemoval indicates an expected call of RemoteApplicationOffererScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) RemoteApplicationOffererScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplicationOffererScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).RemoteApplicationOffererScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateRemoteApplicationOffererScheduleRemovalCall{Call: call}
}

// MockModelDBStateRemoteApplicationOffererScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateRemoteApplicationOffererScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall) Return(arg0 error) *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateRemoteApplicationOffererScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageAttachmentExists mocks base method.
func (m *MockModelDBState) StorageAttachmentExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAttachmentExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAttachmentExists indicates an expected call of StorageAttachmentExists.
func (mr *MockModelDBStateMockRecorder) StorageAttachmentExists(arg0, arg1 any) *MockModelDBStateStorageAttachmentExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAttachmentExists", reflect.TypeOf((*MockModelDBState)(nil).StorageAttachmentExists), arg0, arg1)
	return &MockModelDBStateStorageAttachmentExistsCall{Call: call}
}

// MockModelDBStateStorageAttachmentExistsCall wrap *gomock.Call
type MockModelDBStateStorageAttachmentExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateStorageAttachmentExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateStorageAttachmentExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateStorageAttachmentExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateStorageAttachmentExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateStorageAttachmentExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateStorageAttachmentExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageAttachmentScheduleRemoval mocks base method.
func (m *MockModelDBState) StorageAttachmentScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAttachmentScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageAttachmentScheduleRemoval indicates an expected call of StorageAttachmentScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) StorageAttachmentScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateStorageAttachmentScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAttachmentScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).StorageAttachmentScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateStorageAttachmentScheduleRemovalCall{Call: call}
}

// MockModelDBStateStorageAttachmentScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateStorageAttachmentScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateStorageAttachmentScheduleRemovalCall) Return(arg0 error) *MockModelDBStateStorageAttachmentScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateStorageAttachmentScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateStorageAttachmentScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateStorageAttachmentScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateStorageAttachmentScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitExists mocks base method.
func (m *MockModelDBState) UnitExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitExists indicates an expected call of UnitExists.
func (mr *MockModelDBStateMockRecorder) UnitExists(arg0, arg1 any) *MockModelDBStateUnitExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitExists", reflect.TypeOf((*MockModelDBState)(nil).UnitExists), arg0, arg1)
	return &MockModelDBStateUnitExistsCall{Call: call}
}

// MockModelDBStateUnitExistsCall wrap *gomock.Call
type MockModelDBStateUnitExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateUnitExistsCall) Return(arg0 bool, arg1 error) *MockModelDBStateUnitExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateUnitExistsCall) Do(f func(context.Context, string) (bool, error)) *MockModelDBStateUnitExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateUnitExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockModelDBStateUnitExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitNamesInScope mocks base method.
func (m *MockModelDBState) UnitNamesInScope(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitNamesInScope", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitNamesInScope indicates an expected call of UnitNamesInScope.
func (mr *MockModelDBStateMockRecorder) UnitNamesInScope(arg0, arg1 any) *MockModelDBStateUnitNamesInScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitNamesInScope", reflect.TypeOf((*MockModelDBState)(nil).UnitNamesInScope), arg0, arg1)
	return &MockModelDBStateUnitNamesInScopeCall{Call: call}
}

// MockModelDBStateUnitNamesInScopeCall wrap *gomock.Call
type MockModelDBStateUnitNamesInScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateUnitNamesInScopeCall) Return(arg0 []string, arg1 error) *MockModelDBStateUnitNamesInScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateUnitNamesInScopeCall) Do(f func(context.Context, string) ([]string, error)) *MockModelDBStateUnitNamesInScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateUnitNamesInScopeCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockModelDBStateUnitNamesInScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitScheduleRemoval mocks base method.
func (m *MockModelDBState) UnitScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnitScheduleRemoval indicates an expected call of UnitScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) UnitScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateUnitScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).UnitScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateUnitScheduleRemovalCall{Call: call}
}

// MockModelDBStateUnitScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateUnitScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateUnitScheduleRemovalCall) Return(arg0 error) *MockModelDBStateUnitScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateUnitScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateUnitScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateUnitScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateUnitScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeScheduleRemoval mocks base method.
func (m *MockModelDBState) VolumeScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeScheduleRemoval indicates an expected call of VolumeScheduleRemoval.
func (mr *MockModelDBStateMockRecorder) VolumeScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockModelDBStateVolumeScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeScheduleRemoval", reflect.TypeOf((*MockModelDBState)(nil).VolumeScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockModelDBStateVolumeScheduleRemovalCall{Call: call}
}

// MockModelDBStateVolumeScheduleRemovalCall wrap *gomock.Call
type MockModelDBStateVolumeScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateVolumeScheduleRemovalCall) Return(arg0 error) *MockModelDBStateVolumeScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateVolumeScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateVolumeScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateVolumeScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockModelDBStateVolumeScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockProvider) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderMockRecorder) Destroy(arg0 any) *MockProviderDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProvider)(nil).Destroy), arg0)
	return &MockProviderDestroyCall{Call: call}
}

// MockProviderDestroyCall wrap *gomock.Call
type MockProviderDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDestroyCall) Return(arg0 error) *MockProviderDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDestroyCall) Do(f func(context.Context) error) *MockProviderDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDestroyCall) DoAndReturn(f func(context.Context) error) *MockProviderDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockProvider) ReleaseContainerAddresses(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockProviderMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockProviderReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockProvider)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockProviderReleaseContainerAddressesCall{Call: call}
}

// MockProviderReleaseContainerAddressesCall wrap *gomock.Call
type MockProviderReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderReleaseContainerAddressesCall) Return(arg0 error) *MockProviderReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderReleaseContainerAddressesCall) Do(f func(context.Context, []string) error) *MockProviderReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderReleaseContainerAddressesCall) DoAndReturn(f func(context.Context, []string) error) *MockProviderReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
