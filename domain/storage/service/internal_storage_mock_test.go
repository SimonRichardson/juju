// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/storage (interfaces: ProviderRegistry,Provider,VolumeSource,VolumeImporter,FilesystemSource,FilesystemImporter)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination internal_storage_mock_test.go github.com/juju/juju/internal/storage ProviderRegistry,Provider,VolumeSource,VolumeImporter,FilesystemSource,FilesystemImporter
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderRegistry is a mock of ProviderRegistry interface.
type MockProviderRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockProviderRegistryMockRecorder
}

// MockProviderRegistryMockRecorder is the mock recorder for MockProviderRegistry.
type MockProviderRegistryMockRecorder struct {
	mock *MockProviderRegistry
}

// NewMockProviderRegistry creates a new mock instance.
func NewMockProviderRegistry(ctrl *gomock.Controller) *MockProviderRegistry {
	mock := &MockProviderRegistry{ctrl: ctrl}
	mock.recorder = &MockProviderRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderRegistry) EXPECT() *MockProviderRegistryMockRecorder {
	return m.recorder
}

// RecommendedPoolForKind mocks base method.
func (m *MockProviderRegistry) RecommendedPoolForKind(arg0 storage.StorageKind) *storage.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedPoolForKind", arg0)
	ret0, _ := ret[0].(*storage.Config)
	return ret0
}

// RecommendedPoolForKind indicates an expected call of RecommendedPoolForKind.
func (mr *MockProviderRegistryMockRecorder) RecommendedPoolForKind(arg0 any) *MockProviderRegistryRecommendedPoolForKindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedPoolForKind", reflect.TypeOf((*MockProviderRegistry)(nil).RecommendedPoolForKind), arg0)
	return &MockProviderRegistryRecommendedPoolForKindCall{Call: call}
}

// MockProviderRegistryRecommendedPoolForKindCall wrap *gomock.Call
type MockProviderRegistryRecommendedPoolForKindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderRegistryRecommendedPoolForKindCall) Return(arg0 *storage.Config) *MockProviderRegistryRecommendedPoolForKindCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderRegistryRecommendedPoolForKindCall) Do(f func(storage.StorageKind) *storage.Config) *MockProviderRegistryRecommendedPoolForKindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderRegistryRecommendedPoolForKindCall) DoAndReturn(f func(storage.StorageKind) *storage.Config) *MockProviderRegistryRecommendedPoolForKindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockProviderRegistry) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockProviderRegistryMockRecorder) StorageProvider(arg0 any) *MockProviderRegistryStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockProviderRegistry)(nil).StorageProvider), arg0)
	return &MockProviderRegistryStorageProviderCall{Call: call}
}

// MockProviderRegistryStorageProviderCall wrap *gomock.Call
type MockProviderRegistryStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderRegistryStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockProviderRegistryStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderRegistryStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderRegistryStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderRegistryStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderRegistryStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockProviderRegistry) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockProviderRegistryMockRecorder) StorageProviderTypes() *MockProviderRegistryStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockProviderRegistry)(nil).StorageProviderTypes))
	return &MockProviderRegistryStorageProviderTypesCall{Call: call}
}

// MockProviderRegistryStorageProviderTypesCall wrap *gomock.Call
type MockProviderRegistryStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderRegistryStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockProviderRegistryStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderRegistryStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockProviderRegistryStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderRegistryStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockProviderRegistryStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// DefaultPools mocks base method.
func (m *MockProvider) DefaultPools() []*storage.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPools")
	ret0, _ := ret[0].([]*storage.Config)
	return ret0
}

// DefaultPools indicates an expected call of DefaultPools.
func (mr *MockProviderMockRecorder) DefaultPools() *MockProviderDefaultPoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPools", reflect.TypeOf((*MockProvider)(nil).DefaultPools))
	return &MockProviderDefaultPoolsCall{Call: call}
}

// MockProviderDefaultPoolsCall wrap *gomock.Call
type MockProviderDefaultPoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDefaultPoolsCall) Return(arg0 []*storage.Config) *MockProviderDefaultPoolsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDefaultPoolsCall) Do(f func() []*storage.Config) *MockProviderDefaultPoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDefaultPoolsCall) DoAndReturn(f func() []*storage.Config) *MockProviderDefaultPoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dynamic mocks base method.
func (m *MockProvider) Dynamic() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dynamic")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Dynamic indicates an expected call of Dynamic.
func (mr *MockProviderMockRecorder) Dynamic() *MockProviderDynamicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dynamic", reflect.TypeOf((*MockProvider)(nil).Dynamic))
	return &MockProviderDynamicCall{Call: call}
}

// MockProviderDynamicCall wrap *gomock.Call
type MockProviderDynamicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDynamicCall) Return(arg0 bool) *MockProviderDynamicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDynamicCall) Do(f func() bool) *MockProviderDynamicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDynamicCall) DoAndReturn(f func() bool) *MockProviderDynamicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilesystemSource mocks base method.
func (m *MockProvider) FilesystemSource(arg0 *storage.Config) (storage.FilesystemSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesystemSource", arg0)
	ret0, _ := ret[0].(storage.FilesystemSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesystemSource indicates an expected call of FilesystemSource.
func (mr *MockProviderMockRecorder) FilesystemSource(arg0 any) *MockProviderFilesystemSourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesystemSource", reflect.TypeOf((*MockProvider)(nil).FilesystemSource), arg0)
	return &MockProviderFilesystemSourceCall{Call: call}
}

// MockProviderFilesystemSourceCall wrap *gomock.Call
type MockProviderFilesystemSourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderFilesystemSourceCall) Return(arg0 storage.FilesystemSource, arg1 error) *MockProviderFilesystemSourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderFilesystemSourceCall) Do(f func(*storage.Config) (storage.FilesystemSource, error)) *MockProviderFilesystemSourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderFilesystemSourceCall) DoAndReturn(f func(*storage.Config) (storage.FilesystemSource, error)) *MockProviderFilesystemSourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Releasable mocks base method.
func (m *MockProvider) Releasable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Releasable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Releasable indicates an expected call of Releasable.
func (mr *MockProviderMockRecorder) Releasable() *MockProviderReleasableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Releasable", reflect.TypeOf((*MockProvider)(nil).Releasable))
	return &MockProviderReleasableCall{Call: call}
}

// MockProviderReleasableCall wrap *gomock.Call
type MockProviderReleasableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderReleasableCall) Return(arg0 bool) *MockProviderReleasableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderReleasableCall) Do(f func() bool) *MockProviderReleasableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderReleasableCall) DoAndReturn(f func() bool) *MockProviderReleasableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Scope mocks base method.
func (m *MockProvider) Scope() storage.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(storage.Scope)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockProviderMockRecorder) Scope() *MockProviderScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockProvider)(nil).Scope))
	return &MockProviderScopeCall{Call: call}
}

// MockProviderScopeCall wrap *gomock.Call
type MockProviderScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderScopeCall) Return(arg0 storage.Scope) *MockProviderScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderScopeCall) Do(f func() storage.Scope) *MockProviderScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderScopeCall) DoAndReturn(f func() storage.Scope) *MockProviderScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Supports mocks base method.
func (m *MockProvider) Supports(arg0 storage.StorageKind) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supports", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supports indicates an expected call of Supports.
func (mr *MockProviderMockRecorder) Supports(arg0 any) *MockProviderSupportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supports", reflect.TypeOf((*MockProvider)(nil).Supports), arg0)
	return &MockProviderSupportsCall{Call: call}
}

// MockProviderSupportsCall wrap *gomock.Call
type MockProviderSupportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderSupportsCall) Return(arg0 bool) *MockProviderSupportsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderSupportsCall) Do(f func(storage.StorageKind) bool) *MockProviderSupportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderSupportsCall) DoAndReturn(f func(storage.StorageKind) bool) *MockProviderSupportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateConfig mocks base method.
func (m *MockProvider) ValidateConfig(arg0 *storage.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockProviderMockRecorder) ValidateConfig(arg0 any) *MockProviderValidateConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockProvider)(nil).ValidateConfig), arg0)
	return &MockProviderValidateConfigCall{Call: call}
}

// MockProviderValidateConfigCall wrap *gomock.Call
type MockProviderValidateConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderValidateConfigCall) Return(arg0 error) *MockProviderValidateConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderValidateConfigCall) Do(f func(*storage.Config) error) *MockProviderValidateConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderValidateConfigCall) DoAndReturn(f func(*storage.Config) error) *MockProviderValidateConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateForK8s mocks base method.
func (m *MockProvider) ValidateForK8s(arg0 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForK8s", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForK8s indicates an expected call of ValidateForK8s.
func (mr *MockProviderMockRecorder) ValidateForK8s(arg0 any) *MockProviderValidateForK8sCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForK8s", reflect.TypeOf((*MockProvider)(nil).ValidateForK8s), arg0)
	return &MockProviderValidateForK8sCall{Call: call}
}

// MockProviderValidateForK8sCall wrap *gomock.Call
type MockProviderValidateForK8sCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderValidateForK8sCall) Return(arg0 error) *MockProviderValidateForK8sCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderValidateForK8sCall) Do(f func(map[string]any) error) *MockProviderValidateForK8sCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderValidateForK8sCall) DoAndReturn(f func(map[string]any) error) *MockProviderValidateForK8sCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeSource mocks base method.
func (m *MockProvider) VolumeSource(arg0 *storage.Config) (storage.VolumeSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSource", arg0)
	ret0, _ := ret[0].(storage.VolumeSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSource indicates an expected call of VolumeSource.
func (mr *MockProviderMockRecorder) VolumeSource(arg0 any) *MockProviderVolumeSourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSource", reflect.TypeOf((*MockProvider)(nil).VolumeSource), arg0)
	return &MockProviderVolumeSourceCall{Call: call}
}

// MockProviderVolumeSourceCall wrap *gomock.Call
type MockProviderVolumeSourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderVolumeSourceCall) Return(arg0 storage.VolumeSource, arg1 error) *MockProviderVolumeSourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderVolumeSourceCall) Do(f func(*storage.Config) (storage.VolumeSource, error)) *MockProviderVolumeSourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderVolumeSourceCall) DoAndReturn(f func(*storage.Config) (storage.VolumeSource, error)) *MockProviderVolumeSourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVolumeSource is a mock of VolumeSource interface.
type MockVolumeSource struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSourceMockRecorder
}

// MockVolumeSourceMockRecorder is the mock recorder for MockVolumeSource.
type MockVolumeSourceMockRecorder struct {
	mock *MockVolumeSource
}

// NewMockVolumeSource creates a new mock instance.
func NewMockVolumeSource(ctrl *gomock.Controller) *MockVolumeSource {
	mock := &MockVolumeSource{ctrl: ctrl}
	mock.recorder = &MockVolumeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeSource) EXPECT() *MockVolumeSourceMockRecorder {
	return m.recorder
}

// AttachVolumes mocks base method.
func (m *MockVolumeSource) AttachVolumes(arg0 context.Context, arg1 []storage.VolumeAttachmentParams) ([]storage.AttachVolumesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumes", arg0, arg1)
	ret0, _ := ret[0].([]storage.AttachVolumesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolumes indicates an expected call of AttachVolumes.
func (mr *MockVolumeSourceMockRecorder) AttachVolumes(arg0, arg1 any) *MockVolumeSourceAttachVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumes", reflect.TypeOf((*MockVolumeSource)(nil).AttachVolumes), arg0, arg1)
	return &MockVolumeSourceAttachVolumesCall{Call: call}
}

// MockVolumeSourceAttachVolumesCall wrap *gomock.Call
type MockVolumeSourceAttachVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceAttachVolumesCall) Return(arg0 []storage.AttachVolumesResult, arg1 error) *MockVolumeSourceAttachVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceAttachVolumesCall) Do(f func(context.Context, []storage.VolumeAttachmentParams) ([]storage.AttachVolumesResult, error)) *MockVolumeSourceAttachVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceAttachVolumesCall) DoAndReturn(f func(context.Context, []storage.VolumeAttachmentParams) ([]storage.AttachVolumesResult, error)) *MockVolumeSourceAttachVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVolumes mocks base method.
func (m *MockVolumeSource) CreateVolumes(arg0 context.Context, arg1 []storage.VolumeParams) ([]storage.CreateVolumesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumes", arg0, arg1)
	ret0, _ := ret[0].([]storage.CreateVolumesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumes indicates an expected call of CreateVolumes.
func (mr *MockVolumeSourceMockRecorder) CreateVolumes(arg0, arg1 any) *MockVolumeSourceCreateVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumes", reflect.TypeOf((*MockVolumeSource)(nil).CreateVolumes), arg0, arg1)
	return &MockVolumeSourceCreateVolumesCall{Call: call}
}

// MockVolumeSourceCreateVolumesCall wrap *gomock.Call
type MockVolumeSourceCreateVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceCreateVolumesCall) Return(arg0 []storage.CreateVolumesResult, arg1 error) *MockVolumeSourceCreateVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceCreateVolumesCall) Do(f func(context.Context, []storage.VolumeParams) ([]storage.CreateVolumesResult, error)) *MockVolumeSourceCreateVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceCreateVolumesCall) DoAndReturn(f func(context.Context, []storage.VolumeParams) ([]storage.CreateVolumesResult, error)) *MockVolumeSourceCreateVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DescribeVolumes mocks base method.
func (m *MockVolumeSource) DescribeVolumes(arg0 context.Context, arg1 []string) ([]storage.DescribeVolumesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumes", arg0, arg1)
	ret0, _ := ret[0].([]storage.DescribeVolumesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumes indicates an expected call of DescribeVolumes.
func (mr *MockVolumeSourceMockRecorder) DescribeVolumes(arg0, arg1 any) *MockVolumeSourceDescribeVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumes", reflect.TypeOf((*MockVolumeSource)(nil).DescribeVolumes), arg0, arg1)
	return &MockVolumeSourceDescribeVolumesCall{Call: call}
}

// MockVolumeSourceDescribeVolumesCall wrap *gomock.Call
type MockVolumeSourceDescribeVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceDescribeVolumesCall) Return(arg0 []storage.DescribeVolumesResult, arg1 error) *MockVolumeSourceDescribeVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceDescribeVolumesCall) Do(f func(context.Context, []string) ([]storage.DescribeVolumesResult, error)) *MockVolumeSourceDescribeVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceDescribeVolumesCall) DoAndReturn(f func(context.Context, []string) ([]storage.DescribeVolumesResult, error)) *MockVolumeSourceDescribeVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyVolumes mocks base method.
func (m *MockVolumeSource) DestroyVolumes(arg0 context.Context, arg1 []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVolumes", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyVolumes indicates an expected call of DestroyVolumes.
func (mr *MockVolumeSourceMockRecorder) DestroyVolumes(arg0, arg1 any) *MockVolumeSourceDestroyVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVolumes", reflect.TypeOf((*MockVolumeSource)(nil).DestroyVolumes), arg0, arg1)
	return &MockVolumeSourceDestroyVolumesCall{Call: call}
}

// MockVolumeSourceDestroyVolumesCall wrap *gomock.Call
type MockVolumeSourceDestroyVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceDestroyVolumesCall) Return(arg0 []error, arg1 error) *MockVolumeSourceDestroyVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceDestroyVolumesCall) Do(f func(context.Context, []string) ([]error, error)) *MockVolumeSourceDestroyVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceDestroyVolumesCall) DoAndReturn(f func(context.Context, []string) ([]error, error)) *MockVolumeSourceDestroyVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolumes mocks base method.
func (m *MockVolumeSource) DetachVolumes(arg0 context.Context, arg1 []storage.VolumeAttachmentParams) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolumes", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolumes indicates an expected call of DetachVolumes.
func (mr *MockVolumeSourceMockRecorder) DetachVolumes(arg0, arg1 any) *MockVolumeSourceDetachVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolumes", reflect.TypeOf((*MockVolumeSource)(nil).DetachVolumes), arg0, arg1)
	return &MockVolumeSourceDetachVolumesCall{Call: call}
}

// MockVolumeSourceDetachVolumesCall wrap *gomock.Call
type MockVolumeSourceDetachVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceDetachVolumesCall) Return(arg0 []error, arg1 error) *MockVolumeSourceDetachVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceDetachVolumesCall) Do(f func(context.Context, []storage.VolumeAttachmentParams) ([]error, error)) *MockVolumeSourceDetachVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceDetachVolumesCall) DoAndReturn(f func(context.Context, []storage.VolumeAttachmentParams) ([]error, error)) *MockVolumeSourceDetachVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumes mocks base method.
func (m *MockVolumeSource) ListVolumes(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockVolumeSourceMockRecorder) ListVolumes(arg0 any) *MockVolumeSourceListVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockVolumeSource)(nil).ListVolumes), arg0)
	return &MockVolumeSourceListVolumesCall{Call: call}
}

// MockVolumeSourceListVolumesCall wrap *gomock.Call
type MockVolumeSourceListVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceListVolumesCall) Return(arg0 []string, arg1 error) *MockVolumeSourceListVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceListVolumesCall) Do(f func(context.Context) ([]string, error)) *MockVolumeSourceListVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceListVolumesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockVolumeSourceListVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseVolumes mocks base method.
func (m *MockVolumeSource) ReleaseVolumes(arg0 context.Context, arg1 []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseVolumes", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseVolumes indicates an expected call of ReleaseVolumes.
func (mr *MockVolumeSourceMockRecorder) ReleaseVolumes(arg0, arg1 any) *MockVolumeSourceReleaseVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseVolumes", reflect.TypeOf((*MockVolumeSource)(nil).ReleaseVolumes), arg0, arg1)
	return &MockVolumeSourceReleaseVolumesCall{Call: call}
}

// MockVolumeSourceReleaseVolumesCall wrap *gomock.Call
type MockVolumeSourceReleaseVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceReleaseVolumesCall) Return(arg0 []error, arg1 error) *MockVolumeSourceReleaseVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceReleaseVolumesCall) Do(f func(context.Context, []string) ([]error, error)) *MockVolumeSourceReleaseVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceReleaseVolumesCall) DoAndReturn(f func(context.Context, []string) ([]error, error)) *MockVolumeSourceReleaseVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateVolumeParams mocks base method.
func (m *MockVolumeSource) ValidateVolumeParams(arg0 storage.VolumeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeParams", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVolumeParams indicates an expected call of ValidateVolumeParams.
func (mr *MockVolumeSourceMockRecorder) ValidateVolumeParams(arg0 any) *MockVolumeSourceValidateVolumeParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeParams", reflect.TypeOf((*MockVolumeSource)(nil).ValidateVolumeParams), arg0)
	return &MockVolumeSourceValidateVolumeParamsCall{Call: call}
}

// MockVolumeSourceValidateVolumeParamsCall wrap *gomock.Call
type MockVolumeSourceValidateVolumeParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeSourceValidateVolumeParamsCall) Return(arg0 error) *MockVolumeSourceValidateVolumeParamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeSourceValidateVolumeParamsCall) Do(f func(storage.VolumeParams) error) *MockVolumeSourceValidateVolumeParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeSourceValidateVolumeParamsCall) DoAndReturn(f func(storage.VolumeParams) error) *MockVolumeSourceValidateVolumeParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVolumeImporter is a mock of VolumeImporter interface.
type MockVolumeImporter struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeImporterMockRecorder
}

// MockVolumeImporterMockRecorder is the mock recorder for MockVolumeImporter.
type MockVolumeImporterMockRecorder struct {
	mock *MockVolumeImporter
}

// NewMockVolumeImporter creates a new mock instance.
func NewMockVolumeImporter(ctrl *gomock.Controller) *MockVolumeImporter {
	mock := &MockVolumeImporter{ctrl: ctrl}
	mock.recorder = &MockVolumeImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeImporter) EXPECT() *MockVolumeImporterMockRecorder {
	return m.recorder
}

// ImportVolume mocks base method.
func (m *MockVolumeImporter) ImportVolume(arg0 context.Context, arg1, arg2 string, arg3 map[string]string, arg4 bool) (storage.VolumeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(storage.VolumeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportVolume indicates an expected call of ImportVolume.
func (mr *MockVolumeImporterMockRecorder) ImportVolume(arg0, arg1, arg2, arg3, arg4 any) *MockVolumeImporterImportVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportVolume", reflect.TypeOf((*MockVolumeImporter)(nil).ImportVolume), arg0, arg1, arg2, arg3, arg4)
	return &MockVolumeImporterImportVolumeCall{Call: call}
}

// MockVolumeImporterImportVolumeCall wrap *gomock.Call
type MockVolumeImporterImportVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVolumeImporterImportVolumeCall) Return(arg0 storage.VolumeInfo, arg1 error) *MockVolumeImporterImportVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVolumeImporterImportVolumeCall) Do(f func(context.Context, string, string, map[string]string, bool) (storage.VolumeInfo, error)) *MockVolumeImporterImportVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVolumeImporterImportVolumeCall) DoAndReturn(f func(context.Context, string, string, map[string]string, bool) (storage.VolumeInfo, error)) *MockVolumeImporterImportVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFilesystemSource is a mock of FilesystemSource interface.
type MockFilesystemSource struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemSourceMockRecorder
}

// MockFilesystemSourceMockRecorder is the mock recorder for MockFilesystemSource.
type MockFilesystemSourceMockRecorder struct {
	mock *MockFilesystemSource
}

// NewMockFilesystemSource creates a new mock instance.
func NewMockFilesystemSource(ctrl *gomock.Controller) *MockFilesystemSource {
	mock := &MockFilesystemSource{ctrl: ctrl}
	mock.recorder = &MockFilesystemSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemSource) EXPECT() *MockFilesystemSourceMockRecorder {
	return m.recorder
}

// AttachFilesystems mocks base method.
func (m *MockFilesystemSource) AttachFilesystems(arg0 context.Context, arg1 []storage.FilesystemAttachmentParams) ([]storage.AttachFilesystemsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachFilesystems", arg0, arg1)
	ret0, _ := ret[0].([]storage.AttachFilesystemsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachFilesystems indicates an expected call of AttachFilesystems.
func (mr *MockFilesystemSourceMockRecorder) AttachFilesystems(arg0, arg1 any) *MockFilesystemSourceAttachFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachFilesystems", reflect.TypeOf((*MockFilesystemSource)(nil).AttachFilesystems), arg0, arg1)
	return &MockFilesystemSourceAttachFilesystemsCall{Call: call}
}

// MockFilesystemSourceAttachFilesystemsCall wrap *gomock.Call
type MockFilesystemSourceAttachFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceAttachFilesystemsCall) Return(arg0 []storage.AttachFilesystemsResult, arg1 error) *MockFilesystemSourceAttachFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceAttachFilesystemsCall) Do(f func(context.Context, []storage.FilesystemAttachmentParams) ([]storage.AttachFilesystemsResult, error)) *MockFilesystemSourceAttachFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceAttachFilesystemsCall) DoAndReturn(f func(context.Context, []storage.FilesystemAttachmentParams) ([]storage.AttachFilesystemsResult, error)) *MockFilesystemSourceAttachFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateFilesystems mocks base method.
func (m *MockFilesystemSource) CreateFilesystems(arg0 context.Context, arg1 []storage.FilesystemParams) ([]storage.CreateFilesystemsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilesystems", arg0, arg1)
	ret0, _ := ret[0].([]storage.CreateFilesystemsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilesystems indicates an expected call of CreateFilesystems.
func (mr *MockFilesystemSourceMockRecorder) CreateFilesystems(arg0, arg1 any) *MockFilesystemSourceCreateFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesystems", reflect.TypeOf((*MockFilesystemSource)(nil).CreateFilesystems), arg0, arg1)
	return &MockFilesystemSourceCreateFilesystemsCall{Call: call}
}

// MockFilesystemSourceCreateFilesystemsCall wrap *gomock.Call
type MockFilesystemSourceCreateFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceCreateFilesystemsCall) Return(arg0 []storage.CreateFilesystemsResult, arg1 error) *MockFilesystemSourceCreateFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceCreateFilesystemsCall) Do(f func(context.Context, []storage.FilesystemParams) ([]storage.CreateFilesystemsResult, error)) *MockFilesystemSourceCreateFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceCreateFilesystemsCall) DoAndReturn(f func(context.Context, []storage.FilesystemParams) ([]storage.CreateFilesystemsResult, error)) *MockFilesystemSourceCreateFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyFilesystems mocks base method.
func (m *MockFilesystemSource) DestroyFilesystems(arg0 context.Context, arg1 []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyFilesystems", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyFilesystems indicates an expected call of DestroyFilesystems.
func (mr *MockFilesystemSourceMockRecorder) DestroyFilesystems(arg0, arg1 any) *MockFilesystemSourceDestroyFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyFilesystems", reflect.TypeOf((*MockFilesystemSource)(nil).DestroyFilesystems), arg0, arg1)
	return &MockFilesystemSourceDestroyFilesystemsCall{Call: call}
}

// MockFilesystemSourceDestroyFilesystemsCall wrap *gomock.Call
type MockFilesystemSourceDestroyFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceDestroyFilesystemsCall) Return(arg0 []error, arg1 error) *MockFilesystemSourceDestroyFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceDestroyFilesystemsCall) Do(f func(context.Context, []string) ([]error, error)) *MockFilesystemSourceDestroyFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceDestroyFilesystemsCall) DoAndReturn(f func(context.Context, []string) ([]error, error)) *MockFilesystemSourceDestroyFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachFilesystems mocks base method.
func (m *MockFilesystemSource) DetachFilesystems(arg0 context.Context, arg1 []storage.FilesystemAttachmentParams) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFilesystems", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachFilesystems indicates an expected call of DetachFilesystems.
func (mr *MockFilesystemSourceMockRecorder) DetachFilesystems(arg0, arg1 any) *MockFilesystemSourceDetachFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFilesystems", reflect.TypeOf((*MockFilesystemSource)(nil).DetachFilesystems), arg0, arg1)
	return &MockFilesystemSourceDetachFilesystemsCall{Call: call}
}

// MockFilesystemSourceDetachFilesystemsCall wrap *gomock.Call
type MockFilesystemSourceDetachFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceDetachFilesystemsCall) Return(arg0 []error, arg1 error) *MockFilesystemSourceDetachFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceDetachFilesystemsCall) Do(f func(context.Context, []storage.FilesystemAttachmentParams) ([]error, error)) *MockFilesystemSourceDetachFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceDetachFilesystemsCall) DoAndReturn(f func(context.Context, []storage.FilesystemAttachmentParams) ([]error, error)) *MockFilesystemSourceDetachFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseFilesystems mocks base method.
func (m *MockFilesystemSource) ReleaseFilesystems(arg0 context.Context, arg1 []string) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseFilesystems", arg0, arg1)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseFilesystems indicates an expected call of ReleaseFilesystems.
func (mr *MockFilesystemSourceMockRecorder) ReleaseFilesystems(arg0, arg1 any) *MockFilesystemSourceReleaseFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseFilesystems", reflect.TypeOf((*MockFilesystemSource)(nil).ReleaseFilesystems), arg0, arg1)
	return &MockFilesystemSourceReleaseFilesystemsCall{Call: call}
}

// MockFilesystemSourceReleaseFilesystemsCall wrap *gomock.Call
type MockFilesystemSourceReleaseFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceReleaseFilesystemsCall) Return(arg0 []error, arg1 error) *MockFilesystemSourceReleaseFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceReleaseFilesystemsCall) Do(f func(context.Context, []string) ([]error, error)) *MockFilesystemSourceReleaseFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceReleaseFilesystemsCall) DoAndReturn(f func(context.Context, []string) ([]error, error)) *MockFilesystemSourceReleaseFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateFilesystemParams mocks base method.
func (m *MockFilesystemSource) ValidateFilesystemParams(arg0 storage.FilesystemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFilesystemParams", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateFilesystemParams indicates an expected call of ValidateFilesystemParams.
func (mr *MockFilesystemSourceMockRecorder) ValidateFilesystemParams(arg0 any) *MockFilesystemSourceValidateFilesystemParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFilesystemParams", reflect.TypeOf((*MockFilesystemSource)(nil).ValidateFilesystemParams), arg0)
	return &MockFilesystemSourceValidateFilesystemParamsCall{Call: call}
}

// MockFilesystemSourceValidateFilesystemParamsCall wrap *gomock.Call
type MockFilesystemSourceValidateFilesystemParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemSourceValidateFilesystemParamsCall) Return(arg0 error) *MockFilesystemSourceValidateFilesystemParamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemSourceValidateFilesystemParamsCall) Do(f func(storage.FilesystemParams) error) *MockFilesystemSourceValidateFilesystemParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemSourceValidateFilesystemParamsCall) DoAndReturn(f func(storage.FilesystemParams) error) *MockFilesystemSourceValidateFilesystemParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFilesystemImporter is a mock of FilesystemImporter interface.
type MockFilesystemImporter struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemImporterMockRecorder
}

// MockFilesystemImporterMockRecorder is the mock recorder for MockFilesystemImporter.
type MockFilesystemImporterMockRecorder struct {
	mock *MockFilesystemImporter
}

// NewMockFilesystemImporter creates a new mock instance.
func NewMockFilesystemImporter(ctrl *gomock.Controller) *MockFilesystemImporter {
	mock := &MockFilesystemImporter{ctrl: ctrl}
	mock.recorder = &MockFilesystemImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemImporter) EXPECT() *MockFilesystemImporterMockRecorder {
	return m.recorder
}

// ImportFilesystem mocks base method.
func (m *MockFilesystemImporter) ImportFilesystem(arg0 context.Context, arg1 string, arg2 map[string]string) (storage.FilesystemInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFilesystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.FilesystemInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFilesystem indicates an expected call of ImportFilesystem.
func (mr *MockFilesystemImporterMockRecorder) ImportFilesystem(arg0, arg1, arg2 any) *MockFilesystemImporterImportFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFilesystem", reflect.TypeOf((*MockFilesystemImporter)(nil).ImportFilesystem), arg0, arg1, arg2)
	return &MockFilesystemImporterImportFilesystemCall{Call: call}
}

// MockFilesystemImporterImportFilesystemCall wrap *gomock.Call
type MockFilesystemImporterImportFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemImporterImportFilesystemCall) Return(arg0 storage.FilesystemInfo, arg1 error) *MockFilesystemImporterImportFilesystemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemImporterImportFilesystemCall) Do(f func(context.Context, string, map[string]string) (storage.FilesystemInfo, error)) *MockFilesystemImporterImportFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemImporterImportFilesystemCall) DoAndReturn(f func(context.Context, string, map[string]string) (storage.FilesystemInfo, error)) *MockFilesystemImporterImportFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
