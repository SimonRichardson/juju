// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/crossmodelrelation/service (interfaces: ControllerDBState,ModelDBState,ModelMigrationState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/crossmodelrelation/service ControllerDBState,ModelDBState,ModelMigrationState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	user "github.com/juju/juju/core/user"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	internal "github.com/juju/juju/domain/crossmodelrelation/internal"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerDBState is a mock of ControllerDBState interface.
type MockControllerDBState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDBStateMockRecorder
}

// MockControllerDBStateMockRecorder is the mock recorder for MockControllerDBState.
type MockControllerDBStateMockRecorder struct {
	mock *MockControllerDBState
}

// NewMockControllerDBState creates a new mock instance.
func NewMockControllerDBState(ctrl *gomock.Controller) *MockControllerDBState {
	mock := &MockControllerDBState{ctrl: ctrl}
	mock.recorder = &MockControllerDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDBState) EXPECT() *MockControllerDBStateMockRecorder {
	return m.recorder
}

// CreateOfferAccess mocks base method.
func (m *MockControllerDBState) CreateOfferAccess(arg0 context.Context, arg1, arg2, arg3 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfferAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOfferAccess indicates an expected call of CreateOfferAccess.
func (mr *MockControllerDBStateMockRecorder) CreateOfferAccess(arg0, arg1, arg2, arg3 any) *MockControllerDBStateCreateOfferAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfferAccess", reflect.TypeOf((*MockControllerDBState)(nil).CreateOfferAccess), arg0, arg1, arg2, arg3)
	return &MockControllerDBStateCreateOfferAccessCall{Call: call}
}

// MockControllerDBStateCreateOfferAccessCall wrap *gomock.Call
type MockControllerDBStateCreateOfferAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateCreateOfferAccessCall) Return(arg0 error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateCreateOfferAccessCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateCreateOfferAccessCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUIDsForUsersWithConsume mocks base method.
func (m *MockControllerDBState) GetOfferUUIDsForUsersWithConsume(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUIDsForUsersWithConsume", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUIDsForUsersWithConsume indicates an expected call of GetOfferUUIDsForUsersWithConsume.
func (mr *MockControllerDBStateMockRecorder) GetOfferUUIDsForUsersWithConsume(arg0, arg1 any) *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUIDsForUsersWithConsume", reflect.TypeOf((*MockControllerDBState)(nil).GetOfferUUIDsForUsersWithConsume), arg0, arg1)
	return &MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall{Call: call}
}

// MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall wrap *gomock.Call
type MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall) Return(arg0 []string, arg1 error) *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall) Do(f func(context.Context, []string) ([]string, error)) *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall) DoAndReturn(f func(context.Context, []string) ([]string, error)) *MockControllerDBStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserUUIDByName mocks base method.
func (m *MockControllerDBState) GetUserUUIDByName(arg0 context.Context, arg1 user.Name) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDByName indicates an expected call of GetUserUUIDByName.
func (mr *MockControllerDBStateMockRecorder) GetUserUUIDByName(arg0, arg1 any) *MockControllerDBStateGetUserUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDByName", reflect.TypeOf((*MockControllerDBState)(nil).GetUserUUIDByName), arg0, arg1)
	return &MockControllerDBStateGetUserUUIDByNameCall{Call: call}
}

// MockControllerDBStateGetUserUUIDByNameCall wrap *gomock.Call
type MockControllerDBStateGetUserUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateGetUserUUIDByNameCall) Return(arg0 uuid.UUID, arg1 error) *MockControllerDBStateGetUserUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateGetUserUUIDByNameCall) Do(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerDBStateGetUserUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateGetUserUUIDByNameCall) DoAndReturn(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerDBStateGetUserUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsersForOfferUUIDs mocks base method.
func (m *MockControllerDBState) GetUsersForOfferUUIDs(arg0 context.Context, arg1 []string) (map[string][]crossmodelrelation.OfferUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForOfferUUIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]crossmodelrelation.OfferUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForOfferUUIDs indicates an expected call of GetUsersForOfferUUIDs.
func (mr *MockControllerDBStateMockRecorder) GetUsersForOfferUUIDs(arg0, arg1 any) *MockControllerDBStateGetUsersForOfferUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForOfferUUIDs", reflect.TypeOf((*MockControllerDBState)(nil).GetUsersForOfferUUIDs), arg0, arg1)
	return &MockControllerDBStateGetUsersForOfferUUIDsCall{Call: call}
}

// MockControllerDBStateGetUsersForOfferUUIDsCall wrap *gomock.Call
type MockControllerDBStateGetUsersForOfferUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateGetUsersForOfferUUIDsCall) Return(arg0 map[string][]crossmodelrelation.OfferUser, arg1 error) *MockControllerDBStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateGetUsersForOfferUUIDsCall) Do(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerDBStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateGetUsersForOfferUUIDsCall) DoAndReturn(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerDBStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDBState is a mock of ModelDBState interface.
type MockModelDBState struct {
	ctrl     *gomock.Controller
	recorder *MockModelDBStateMockRecorder
}

// MockModelDBStateMockRecorder is the mock recorder for MockModelDBState.
type MockModelDBStateMockRecorder struct {
	mock *MockModelDBState
}

// NewMockModelDBState creates a new mock instance.
func NewMockModelDBState(ctrl *gomock.Controller) *MockModelDBState {
	mock := &MockModelDBState{ctrl: ctrl}
	mock.recorder = &MockModelDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDBState) EXPECT() *MockModelDBStateMockRecorder {
	return m.recorder
}

// AddRemoteApplicationOfferer mocks base method.
func (m *MockModelDBState) AddRemoteApplicationOfferer(arg0 context.Context, arg1 string, arg2 crossmodelrelation.AddRemoteApplicationOffererArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationOfferer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationOfferer indicates an expected call of AddRemoteApplicationOfferer.
func (mr *MockModelDBStateMockRecorder) AddRemoteApplicationOfferer(arg0, arg1, arg2 any) *MockModelDBStateAddRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationOfferer", reflect.TypeOf((*MockModelDBState)(nil).AddRemoteApplicationOfferer), arg0, arg1, arg2)
	return &MockModelDBStateAddRemoteApplicationOffererCall{Call: call}
}

// MockModelDBStateAddRemoteApplicationOffererCall wrap *gomock.Call
type MockModelDBStateAddRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateAddRemoteApplicationOffererCall) Return(arg0 error) *MockModelDBStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateAddRemoteApplicationOffererCall) Do(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelDBStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateAddRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelDBStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOffer mocks base method.
func (m *MockModelDBState) CreateOffer(arg0 context.Context, arg1 internal.CreateOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockModelDBStateMockRecorder) CreateOffer(arg0, arg1 any) *MockModelDBStateCreateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockModelDBState)(nil).CreateOffer), arg0, arg1)
	return &MockModelDBStateCreateOfferCall{Call: call}
}

// MockModelDBStateCreateOfferCall wrap *gomock.Call
type MockModelDBStateCreateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateCreateOfferCall) Return(arg0 error) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateCreateOfferCall) Do(f func(context.Context, internal.CreateOfferArgs) error) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateCreateOfferCall) DoAndReturn(f func(context.Context, internal.CreateOfferArgs) error) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFailedOffer mocks base method.
func (m *MockModelDBState) DeleteFailedOffer(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailedOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailedOffer indicates an expected call of DeleteFailedOffer.
func (mr *MockModelDBStateMockRecorder) DeleteFailedOffer(arg0, arg1 any) *MockModelDBStateDeleteFailedOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailedOffer", reflect.TypeOf((*MockModelDBState)(nil).DeleteFailedOffer), arg0, arg1)
	return &MockModelDBStateDeleteFailedOfferCall{Call: call}
}

// MockModelDBStateDeleteFailedOfferCall wrap *gomock.Call
type MockModelDBStateDeleteFailedOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteFailedOfferCall) Return(arg0 error) *MockModelDBStateDeleteFailedOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteFailedOfferCall) Do(f func(context.Context, uuid.UUID) error) *MockModelDBStateDeleteFailedOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteFailedOfferCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockModelDBStateDeleteFailedOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferDetails mocks base method.
func (m *MockModelDBState) GetOfferDetails(arg0 context.Context, arg1 internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferDetails", arg0, arg1)
	ret0, _ := ret[0].([]*crossmodelrelation.OfferDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferDetails indicates an expected call of GetOfferDetails.
func (mr *MockModelDBStateMockRecorder) GetOfferDetails(arg0, arg1 any) *MockModelDBStateGetOfferDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferDetails", reflect.TypeOf((*MockModelDBState)(nil).GetOfferDetails), arg0, arg1)
	return &MockModelDBStateGetOfferDetailsCall{Call: call}
}

// MockModelDBStateGetOfferDetailsCall wrap *gomock.Call
type MockModelDBStateGetOfferDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetOfferDetailsCall) Return(arg0 []*crossmodelrelation.OfferDetail, arg1 error) *MockModelDBStateGetOfferDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetOfferDetailsCall) Do(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelDBStateGetOfferDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetOfferDetailsCall) DoAndReturn(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelDBStateGetOfferDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUID mocks base method.
func (m *MockModelDBState) GetOfferUUID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUID indicates an expected call of GetOfferUUID.
func (mr *MockModelDBStateMockRecorder) GetOfferUUID(arg0, arg1 any) *MockModelDBStateGetOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUID", reflect.TypeOf((*MockModelDBState)(nil).GetOfferUUID), arg0, arg1)
	return &MockModelDBStateGetOfferUUIDCall{Call: call}
}

// MockModelDBStateGetOfferUUIDCall wrap *gomock.Call
type MockModelDBStateGetOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateGetOfferUUIDCall) Return(arg0 string, arg1 error) *MockModelDBStateGetOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateGetOfferUUIDCall) Do(f func(context.Context, string) (string, error)) *MockModelDBStateGetOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateGetOfferUUIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelDBStateGetOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOffer mocks base method.
func (m *MockModelDBState) UpdateOffer(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockModelDBStateMockRecorder) UpdateOffer(arg0, arg1, arg2 any) *MockModelDBStateUpdateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockModelDBState)(nil).UpdateOffer), arg0, arg1, arg2)
	return &MockModelDBStateUpdateOfferCall{Call: call}
}

// MockModelDBStateUpdateOfferCall wrap *gomock.Call
type MockModelDBStateUpdateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateUpdateOfferCall) Return(arg0 error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateUpdateOfferCall) Do(f func(context.Context, string, []string) error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateUpdateOfferCall) DoAndReturn(f func(context.Context, string, []string) error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelMigrationState is a mock of ModelMigrationState interface.
type MockModelMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationStateMockRecorder
}

// MockModelMigrationStateMockRecorder is the mock recorder for MockModelMigrationState.
type MockModelMigrationStateMockRecorder struct {
	mock *MockModelMigrationState
}

// NewMockModelMigrationState creates a new mock instance.
func NewMockModelMigrationState(ctrl *gomock.Controller) *MockModelMigrationState {
	mock := &MockModelMigrationState{ctrl: ctrl}
	mock.recorder = &MockModelMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationState) EXPECT() *MockModelMigrationStateMockRecorder {
	return m.recorder
}

// ImportOffers mocks base method.
func (m *MockModelMigrationState) ImportOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferImport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOffers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportOffers indicates an expected call of ImportOffers.
func (mr *MockModelMigrationStateMockRecorder) ImportOffers(arg0, arg1 any) *MockModelMigrationStateImportOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOffers", reflect.TypeOf((*MockModelMigrationState)(nil).ImportOffers), arg0, arg1)
	return &MockModelMigrationStateImportOffersCall{Call: call}
}

// MockModelMigrationStateImportOffersCall wrap *gomock.Call
type MockModelMigrationStateImportOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationStateImportOffersCall) Return(arg0 error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationStateImportOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationStateImportOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
