// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/crossmodelrelation/service (interfaces: ControllerState,ModelState,ModelMigrationState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/crossmodelrelation/service ControllerState,ModelState,ModelMigrationState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	user "github.com/juju/juju/core/user"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	internal "github.com/juju/juju/domain/crossmodelrelation/internal"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// CreateOfferAccess mocks base method.
func (m *MockControllerState) CreateOfferAccess(arg0 context.Context, arg1, arg2, arg3 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfferAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOfferAccess indicates an expected call of CreateOfferAccess.
func (mr *MockControllerStateMockRecorder) CreateOfferAccess(arg0, arg1, arg2, arg3 any) *MockControllerStateCreateOfferAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfferAccess", reflect.TypeOf((*MockControllerState)(nil).CreateOfferAccess), arg0, arg1, arg2, arg3)
	return &MockControllerStateCreateOfferAccessCall{Call: call}
}

// MockControllerStateCreateOfferAccessCall wrap *gomock.Call
type MockControllerStateCreateOfferAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateCreateOfferAccessCall) Return(arg0 error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateCreateOfferAccessCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateCreateOfferAccessCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUIDsForUsersWithConsume mocks base method.
func (m *MockControllerState) GetOfferUUIDsForUsersWithConsume(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUIDsForUsersWithConsume", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUIDsForUsersWithConsume indicates an expected call of GetOfferUUIDsForUsersWithConsume.
func (mr *MockControllerStateMockRecorder) GetOfferUUIDsForUsersWithConsume(arg0, arg1 any) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUIDsForUsersWithConsume", reflect.TypeOf((*MockControllerState)(nil).GetOfferUUIDsForUsersWithConsume), arg0, arg1)
	return &MockControllerStateGetOfferUUIDsForUsersWithConsumeCall{Call: call}
}

// MockControllerStateGetOfferUUIDsForUsersWithConsumeCall wrap *gomock.Call
type MockControllerStateGetOfferUUIDsForUsersWithConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) Return(arg0 []string, arg1 error) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) Do(f func(context.Context, []string) ([]string, error)) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) DoAndReturn(f func(context.Context, []string) ([]string, error)) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserUUIDByName mocks base method.
func (m *MockControllerState) GetUserUUIDByName(arg0 context.Context, arg1 user.Name) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDByName indicates an expected call of GetUserUUIDByName.
func (mr *MockControllerStateMockRecorder) GetUserUUIDByName(arg0, arg1 any) *MockControllerStateGetUserUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDByName", reflect.TypeOf((*MockControllerState)(nil).GetUserUUIDByName), arg0, arg1)
	return &MockControllerStateGetUserUUIDByNameCall{Call: call}
}

// MockControllerStateGetUserUUIDByNameCall wrap *gomock.Call
type MockControllerStateGetUserUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUserUUIDByNameCall) Return(arg0 uuid.UUID, arg1 error) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUserUUIDByNameCall) Do(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUserUUIDByNameCall) DoAndReturn(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsersForOfferUUIDs mocks base method.
func (m *MockControllerState) GetUsersForOfferUUIDs(arg0 context.Context, arg1 []string) (map[string][]crossmodelrelation.OfferUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForOfferUUIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]crossmodelrelation.OfferUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForOfferUUIDs indicates an expected call of GetUsersForOfferUUIDs.
func (mr *MockControllerStateMockRecorder) GetUsersForOfferUUIDs(arg0, arg1 any) *MockControllerStateGetUsersForOfferUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForOfferUUIDs", reflect.TypeOf((*MockControllerState)(nil).GetUsersForOfferUUIDs), arg0, arg1)
	return &MockControllerStateGetUsersForOfferUUIDsCall{Call: call}
}

// MockControllerStateGetUsersForOfferUUIDsCall wrap *gomock.Call
type MockControllerStateGetUsersForOfferUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUsersForOfferUUIDsCall) Return(arg0 map[string][]crossmodelrelation.OfferUser, arg1 error) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUsersForOfferUUIDsCall) Do(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUsersForOfferUUIDsCall) DoAndReturn(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// AddRemoteApplicationConsumer mocks base method.
func (m *MockModelState) AddRemoteApplicationConsumer(arg0 context.Context, arg1 string, arg2 crossmodelrelation.AddRemoteApplicationConsumerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationConsumer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationConsumer indicates an expected call of AddRemoteApplicationConsumer.
func (mr *MockModelStateMockRecorder) AddRemoteApplicationConsumer(arg0, arg1, arg2 any) *MockModelStateAddRemoteApplicationConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationConsumer", reflect.TypeOf((*MockModelState)(nil).AddRemoteApplicationConsumer), arg0, arg1, arg2)
	return &MockModelStateAddRemoteApplicationConsumerCall{Call: call}
}

// MockModelStateAddRemoteApplicationConsumerCall wrap *gomock.Call
type MockModelStateAddRemoteApplicationConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateAddRemoteApplicationConsumerCall) Return(arg0 error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateAddRemoteApplicationConsumerCall) Do(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationConsumerArgs) error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateAddRemoteApplicationConsumerCall) DoAndReturn(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationConsumerArgs) error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteApplicationOfferer mocks base method.
func (m *MockModelState) AddRemoteApplicationOfferer(arg0 context.Context, arg1 string, arg2 crossmodelrelation.AddRemoteApplicationOffererArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationOfferer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationOfferer indicates an expected call of AddRemoteApplicationOfferer.
func (mr *MockModelStateMockRecorder) AddRemoteApplicationOfferer(arg0, arg1, arg2 any) *MockModelStateAddRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationOfferer", reflect.TypeOf((*MockModelState)(nil).AddRemoteApplicationOfferer), arg0, arg1, arg2)
	return &MockModelStateAddRemoteApplicationOffererCall{Call: call}
}

// MockModelStateAddRemoteApplicationOffererCall wrap *gomock.Call
type MockModelStateAddRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateAddRemoteApplicationOffererCall) Return(arg0 error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateAddRemoteApplicationOffererCall) Do(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateAddRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOffer mocks base method.
func (m *MockModelState) CreateOffer(arg0 context.Context, arg1 internal.CreateOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockModelStateMockRecorder) CreateOffer(arg0, arg1 any) *MockModelStateCreateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockModelState)(nil).CreateOffer), arg0, arg1)
	return &MockModelStateCreateOfferCall{Call: call}
}

// MockModelStateCreateOfferCall wrap *gomock.Call
type MockModelStateCreateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCreateOfferCall) Return(arg0 error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCreateOfferCall) Do(f func(context.Context, internal.CreateOfferArgs) error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCreateOfferCall) DoAndReturn(f func(context.Context, internal.CreateOfferArgs) error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFailedOffer mocks base method.
func (m *MockModelState) DeleteFailedOffer(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailedOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailedOffer indicates an expected call of DeleteFailedOffer.
func (mr *MockModelStateMockRecorder) DeleteFailedOffer(arg0, arg1 any) *MockModelStateDeleteFailedOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailedOffer", reflect.TypeOf((*MockModelState)(nil).DeleteFailedOffer), arg0, arg1)
	return &MockModelStateDeleteFailedOfferCall{Call: call}
}

// MockModelStateDeleteFailedOfferCall wrap *gomock.Call
type MockModelStateDeleteFailedOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateDeleteFailedOfferCall) Return(arg0 error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateDeleteFailedOfferCall) Do(f func(context.Context, uuid.UUID) error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateDeleteFailedOfferCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationRemoteRelationByConsumerRelationUUID mocks base method.
func (m *MockModelState) GetApplicationRemoteRelationByConsumerRelationUUID(arg0 context.Context, arg1 string) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRemoteRelationByConsumerRelationUUID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationRemoteRelationByConsumerRelationUUID indicates an expected call of GetApplicationRemoteRelationByConsumerRelationUUID.
func (mr *MockModelStateMockRecorder) GetApplicationRemoteRelationByConsumerRelationUUID(arg0, arg1 any) *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRemoteRelationByConsumerRelationUUID", reflect.TypeOf((*MockModelState)(nil).GetApplicationRemoteRelationByConsumerRelationUUID), arg0, arg1)
	return &MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall{Call: call}
}

// MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall wrap *gomock.Call
type MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall) Return(arg0 relation.UUID, arg1 error) *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall) Do(f func(context.Context, string) (relation.UUID, error)) *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall) DoAndReturn(f func(context.Context, string) (relation.UUID, error)) *MockModelStateGetApplicationRemoteRelationByConsumerRelationUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUUIDByOfferUUID mocks base method.
func (m *MockModelState) GetApplicationUUIDByOfferUUID(arg0 context.Context, arg1 string) (application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUUIDByOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUUIDByOfferUUID indicates an expected call of GetApplicationUUIDByOfferUUID.
func (mr *MockModelStateMockRecorder) GetApplicationUUIDByOfferUUID(arg0, arg1 any) *MockModelStateGetApplicationUUIDByOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUUIDByOfferUUID", reflect.TypeOf((*MockModelState)(nil).GetApplicationUUIDByOfferUUID), arg0, arg1)
	return &MockModelStateGetApplicationUUIDByOfferUUIDCall{Call: call}
}

// MockModelStateGetApplicationUUIDByOfferUUIDCall wrap *gomock.Call
type MockModelStateGetApplicationUUIDByOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationUUIDByOfferUUIDCall) Return(arg0 application.UUID, arg1 error) *MockModelStateGetApplicationUUIDByOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationUUIDByOfferUUIDCall) Do(f func(context.Context, string) (application.UUID, error)) *MockModelStateGetApplicationUUIDByOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationUUIDByOfferUUIDCall) DoAndReturn(f func(context.Context, string) (application.UUID, error)) *MockModelStateGetApplicationUUIDByOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferDetails mocks base method.
func (m *MockModelState) GetOfferDetails(arg0 context.Context, arg1 internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferDetails", arg0, arg1)
	ret0, _ := ret[0].([]*crossmodelrelation.OfferDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferDetails indicates an expected call of GetOfferDetails.
func (mr *MockModelStateMockRecorder) GetOfferDetails(arg0, arg1 any) *MockModelStateGetOfferDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferDetails", reflect.TypeOf((*MockModelState)(nil).GetOfferDetails), arg0, arg1)
	return &MockModelStateGetOfferDetailsCall{Call: call}
}

// MockModelStateGetOfferDetailsCall wrap *gomock.Call
type MockModelStateGetOfferDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferDetailsCall) Return(arg0 []*crossmodelrelation.OfferDetail, arg1 error) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferDetailsCall) Do(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferDetailsCall) DoAndReturn(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUID mocks base method.
func (m *MockModelState) GetOfferUUID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUID indicates an expected call of GetOfferUUID.
func (mr *MockModelStateMockRecorder) GetOfferUUID(arg0, arg1 any) *MockModelStateGetOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUID", reflect.TypeOf((*MockModelState)(nil).GetOfferUUID), arg0, arg1)
	return &MockModelStateGetOfferUUIDCall{Call: call}
}

// MockModelStateGetOfferUUIDCall wrap *gomock.Call
type MockModelStateGetOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferUUIDCall) Return(arg0 string, arg1 error) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferUUIDCall) Do(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferUUIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOfferers mocks base method.
func (m *MockModelState) GetRemoteApplicationOfferers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOfferers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationOfferer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOfferers indicates an expected call of GetRemoteApplicationOfferers.
func (mr *MockModelStateMockRecorder) GetRemoteApplicationOfferers(arg0 any) *MockModelStateGetRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOfferers", reflect.TypeOf((*MockModelState)(nil).GetRemoteApplicationOfferers), arg0)
	return &MockModelStateGetRemoteApplicationOfferersCall{Call: call}
}

// MockModelStateGetRemoteApplicationOfferersCall wrap *gomock.Call
type MockModelStateGetRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRemoteApplicationOfferersCall) Return(arg0 []crossmodelrelation.RemoteApplicationOfferer, arg1 error) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRemoteApplicationOfferersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceRemoteApplicationOfferers mocks base method.
func (m *MockModelState) NamespaceRemoteApplicationOfferers() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceRemoteApplicationOfferers")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceRemoteApplicationOfferers indicates an expected call of NamespaceRemoteApplicationOfferers.
func (mr *MockModelStateMockRecorder) NamespaceRemoteApplicationOfferers() *MockModelStateNamespaceRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceRemoteApplicationOfferers", reflect.TypeOf((*MockModelState)(nil).NamespaceRemoteApplicationOfferers))
	return &MockModelStateNamespaceRemoteApplicationOfferersCall{Call: call}
}

// MockModelStateNamespaceRemoteApplicationOfferersCall wrap *gomock.Call
type MockModelStateNamespaceRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) Return(arg0 string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) Do(f func() string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) DoAndReturn(f func() string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMacaroonForRelation mocks base method.
func (m *MockModelState) SaveMacaroonForRelation(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMacaroonForRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMacaroonForRelation indicates an expected call of SaveMacaroonForRelation.
func (mr *MockModelStateMockRecorder) SaveMacaroonForRelation(arg0, arg1, arg2 any) *MockModelStateSaveMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMacaroonForRelation", reflect.TypeOf((*MockModelState)(nil).SaveMacaroonForRelation), arg0, arg1, arg2)
	return &MockModelStateSaveMacaroonForRelationCall{Call: call}
}

// MockModelStateSaveMacaroonForRelationCall wrap *gomock.Call
type MockModelStateSaveMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSaveMacaroonForRelationCall) Return(arg0 error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSaveMacaroonForRelationCall) Do(f func(context.Context, string, []byte) error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSaveMacaroonForRelationCall) DoAndReturn(f func(context.Context, string, []byte) error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOffer mocks base method.
func (m *MockModelState) UpdateOffer(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockModelStateMockRecorder) UpdateOffer(arg0, arg1, arg2 any) *MockModelStateUpdateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockModelState)(nil).UpdateOffer), arg0, arg1, arg2)
	return &MockModelStateUpdateOfferCall{Call: call}
}

// MockModelStateUpdateOfferCall wrap *gomock.Call
type MockModelStateUpdateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateUpdateOfferCall) Return(arg0 error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateUpdateOfferCall) Do(f func(context.Context, string, []string) error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateUpdateOfferCall) DoAndReturn(f func(context.Context, string, []string) error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelMigrationState is a mock of ModelMigrationState interface.
type MockModelMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationStateMockRecorder
}

// MockModelMigrationStateMockRecorder is the mock recorder for MockModelMigrationState.
type MockModelMigrationStateMockRecorder struct {
	mock *MockModelMigrationState
}

// NewMockModelMigrationState creates a new mock instance.
func NewMockModelMigrationState(ctrl *gomock.Controller) *MockModelMigrationState {
	mock := &MockModelMigrationState{ctrl: ctrl}
	mock.recorder = &MockModelMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationState) EXPECT() *MockModelMigrationStateMockRecorder {
	return m.recorder
}

// ImportOffers mocks base method.
func (m *MockModelMigrationState) ImportOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferImport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOffers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportOffers indicates an expected call of ImportOffers.
func (mr *MockModelMigrationStateMockRecorder) ImportOffers(arg0, arg1 any) *MockModelMigrationStateImportOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOffers", reflect.TypeOf((*MockModelMigrationState)(nil).ImportOffers), arg0, arg1)
	return &MockModelMigrationStateImportOffersCall{Call: call}
}

// MockModelMigrationStateImportOffersCall wrap *gomock.Call
type MockModelMigrationStateImportOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationStateImportOffersCall) Return(arg0 error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationStateImportOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationStateImportOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
