// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/crossmodelrelation/service (interfaces: ControllerState,ModelState,ModelMigrationState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/crossmodelrelation/service ControllerState,ModelState,ModelMigrationState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	offer "github.com/juju/juju/core/offer"
	relation "github.com/juju/juju/core/relation"
	secrets "github.com/juju/juju/core/secrets"
	user "github.com/juju/juju/core/user"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	internal "github.com/juju/juju/domain/crossmodelrelation/internal"
	secret "github.com/juju/juju/domain/secret"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// CreateOfferAccess mocks base method.
func (m *MockControllerState) CreateOfferAccess(arg0 context.Context, arg1 uuid.UUID, arg2 offer.UUID, arg3 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfferAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOfferAccess indicates an expected call of CreateOfferAccess.
func (mr *MockControllerStateMockRecorder) CreateOfferAccess(arg0, arg1, arg2, arg3 any) *MockControllerStateCreateOfferAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfferAccess", reflect.TypeOf((*MockControllerState)(nil).CreateOfferAccess), arg0, arg1, arg2, arg3)
	return &MockControllerStateCreateOfferAccessCall{Call: call}
}

// MockControllerStateCreateOfferAccessCall wrap *gomock.Call
type MockControllerStateCreateOfferAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateCreateOfferAccessCall) Return(arg0 error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateCreateOfferAccessCall) Do(f func(context.Context, uuid.UUID, offer.UUID, uuid.UUID) error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateCreateOfferAccessCall) DoAndReturn(f func(context.Context, uuid.UUID, offer.UUID, uuid.UUID) error) *MockControllerStateCreateOfferAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUIDsForUsersWithConsume mocks base method.
func (m *MockControllerState) GetOfferUUIDsForUsersWithConsume(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUIDsForUsersWithConsume", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUIDsForUsersWithConsume indicates an expected call of GetOfferUUIDsForUsersWithConsume.
func (mr *MockControllerStateMockRecorder) GetOfferUUIDsForUsersWithConsume(arg0, arg1 any) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUIDsForUsersWithConsume", reflect.TypeOf((*MockControllerState)(nil).GetOfferUUIDsForUsersWithConsume), arg0, arg1)
	return &MockControllerStateGetOfferUUIDsForUsersWithConsumeCall{Call: call}
}

// MockControllerStateGetOfferUUIDsForUsersWithConsumeCall wrap *gomock.Call
type MockControllerStateGetOfferUUIDsForUsersWithConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) Return(arg0 []string, arg1 error) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) Do(f func(context.Context, []string) ([]string, error)) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall) DoAndReturn(f func(context.Context, []string) ([]string, error)) *MockControllerStateGetOfferUUIDsForUsersWithConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserUUIDByName mocks base method.
func (m *MockControllerState) GetUserUUIDByName(arg0 context.Context, arg1 user.Name) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDByName indicates an expected call of GetUserUUIDByName.
func (mr *MockControllerStateMockRecorder) GetUserUUIDByName(arg0, arg1 any) *MockControllerStateGetUserUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDByName", reflect.TypeOf((*MockControllerState)(nil).GetUserUUIDByName), arg0, arg1)
	return &MockControllerStateGetUserUUIDByNameCall{Call: call}
}

// MockControllerStateGetUserUUIDByNameCall wrap *gomock.Call
type MockControllerStateGetUserUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUserUUIDByNameCall) Return(arg0 uuid.UUID, arg1 error) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUserUUIDByNameCall) Do(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUserUUIDByNameCall) DoAndReturn(f func(context.Context, user.Name) (uuid.UUID, error)) *MockControllerStateGetUserUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsersForOfferUUIDs mocks base method.
func (m *MockControllerState) GetUsersForOfferUUIDs(arg0 context.Context, arg1 []string) (map[string][]crossmodelrelation.OfferUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForOfferUUIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]crossmodelrelation.OfferUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForOfferUUIDs indicates an expected call of GetUsersForOfferUUIDs.
func (mr *MockControllerStateMockRecorder) GetUsersForOfferUUIDs(arg0, arg1 any) *MockControllerStateGetUsersForOfferUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForOfferUUIDs", reflect.TypeOf((*MockControllerState)(nil).GetUsersForOfferUUIDs), arg0, arg1)
	return &MockControllerStateGetUsersForOfferUUIDsCall{Call: call}
}

// MockControllerStateGetUsersForOfferUUIDsCall wrap *gomock.Call
type MockControllerStateGetUsersForOfferUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUsersForOfferUUIDsCall) Return(arg0 map[string][]crossmodelrelation.OfferUser, arg1 error) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUsersForOfferUUIDsCall) Do(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUsersForOfferUUIDsCall) DoAndReturn(f func(context.Context, []string) (map[string][]crossmodelrelation.OfferUser, error)) *MockControllerStateGetUsersForOfferUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// AddRemoteApplicationConsumer mocks base method.
func (m *MockModelState) AddRemoteApplicationConsumer(arg0 context.Context, arg1 string, arg2 crossmodelrelation.AddRemoteApplicationConsumerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationConsumer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationConsumer indicates an expected call of AddRemoteApplicationConsumer.
func (mr *MockModelStateMockRecorder) AddRemoteApplicationConsumer(arg0, arg1, arg2 any) *MockModelStateAddRemoteApplicationConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationConsumer", reflect.TypeOf((*MockModelState)(nil).AddRemoteApplicationConsumer), arg0, arg1, arg2)
	return &MockModelStateAddRemoteApplicationConsumerCall{Call: call}
}

// MockModelStateAddRemoteApplicationConsumerCall wrap *gomock.Call
type MockModelStateAddRemoteApplicationConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateAddRemoteApplicationConsumerCall) Return(arg0 error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateAddRemoteApplicationConsumerCall) Do(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationConsumerArgs) error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateAddRemoteApplicationConsumerCall) DoAndReturn(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationConsumerArgs) error) *MockModelStateAddRemoteApplicationConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteApplicationOfferer mocks base method.
func (m *MockModelState) AddRemoteApplicationOfferer(arg0 context.Context, arg1 string, arg2 crossmodelrelation.AddRemoteApplicationOffererArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationOfferer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationOfferer indicates an expected call of AddRemoteApplicationOfferer.
func (mr *MockModelStateMockRecorder) AddRemoteApplicationOfferer(arg0, arg1, arg2 any) *MockModelStateAddRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationOfferer", reflect.TypeOf((*MockModelState)(nil).AddRemoteApplicationOfferer), arg0, arg1, arg2)
	return &MockModelStateAddRemoteApplicationOffererCall{Call: call}
}

// MockModelStateAddRemoteApplicationOffererCall wrap *gomock.Call
type MockModelStateAddRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateAddRemoteApplicationOffererCall) Return(arg0 error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateAddRemoteApplicationOffererCall) Do(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateAddRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, string, crossmodelrelation.AddRemoteApplicationOffererArgs) error) *MockModelStateAddRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOffer mocks base method.
func (m *MockModelState) CreateOffer(arg0 context.Context, arg1 internal.CreateOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockModelStateMockRecorder) CreateOffer(arg0, arg1 any) *MockModelStateCreateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockModelState)(nil).CreateOffer), arg0, arg1)
	return &MockModelStateCreateOfferCall{Call: call}
}

// MockModelStateCreateOfferCall wrap *gomock.Call
type MockModelStateCreateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCreateOfferCall) Return(arg0 error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCreateOfferCall) Do(f func(context.Context, internal.CreateOfferArgs) error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCreateOfferCall) DoAndReturn(f func(context.Context, internal.CreateOfferArgs) error) *MockModelStateCreateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFailedOffer mocks base method.
func (m *MockModelState) DeleteFailedOffer(arg0 context.Context, arg1 offer.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailedOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailedOffer indicates an expected call of DeleteFailedOffer.
func (mr *MockModelStateMockRecorder) DeleteFailedOffer(arg0, arg1 any) *MockModelStateDeleteFailedOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailedOffer", reflect.TypeOf((*MockModelState)(nil).DeleteFailedOffer), arg0, arg1)
	return &MockModelStateDeleteFailedOfferCall{Call: call}
}

// MockModelStateDeleteFailedOfferCall wrap *gomock.Call
type MockModelStateDeleteFailedOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateDeleteFailedOfferCall) Return(arg0 error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateDeleteFailedOfferCall) Do(f func(context.Context, offer.UUID) error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateDeleteFailedOfferCall) DoAndReturn(f func(context.Context, offer.UUID) error) *MockModelStateDeleteFailedOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitsExist mocks base method.
func (m *MockModelState) EnsureUnitsExist(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitsExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitsExist indicates an expected call of EnsureUnitsExist.
func (mr *MockModelStateMockRecorder) EnsureUnitsExist(arg0, arg1, arg2 any) *MockModelStateEnsureUnitsExistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitsExist", reflect.TypeOf((*MockModelState)(nil).EnsureUnitsExist), arg0, arg1, arg2)
	return &MockModelStateEnsureUnitsExistCall{Call: call}
}

// MockModelStateEnsureUnitsExistCall wrap *gomock.Call
type MockModelStateEnsureUnitsExistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateEnsureUnitsExistCall) Return(arg0 error) *MockModelStateEnsureUnitsExistCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateEnsureUnitsExistCall) Do(f func(context.Context, string, []string) error) *MockModelStateEnsureUnitsExistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateEnsureUnitsExistCall) DoAndReturn(f func(context.Context, string, []string) error) *MockModelStateEnsureUnitsExistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllOffererRelationUUIDs mocks base method.
func (m *MockModelState) GetAllOffererRelationUUIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOffererRelationUUIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOffererRelationUUIDs indicates an expected call of GetAllOffererRelationUUIDs.
func (mr *MockModelStateMockRecorder) GetAllOffererRelationUUIDs(arg0 any) *MockModelStateGetAllOffererRelationUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOffererRelationUUIDs", reflect.TypeOf((*MockModelState)(nil).GetAllOffererRelationUUIDs), arg0)
	return &MockModelStateGetAllOffererRelationUUIDsCall{Call: call}
}

// MockModelStateGetAllOffererRelationUUIDsCall wrap *gomock.Call
type MockModelStateGetAllOffererRelationUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllOffererRelationUUIDsCall) Return(arg0 []string, arg1 error) *MockModelStateGetAllOffererRelationUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllOffererRelationUUIDsCall) Do(f func(context.Context) ([]string, error)) *MockModelStateGetAllOffererRelationUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllOffererRelationUUIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockModelStateGetAllOffererRelationUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationNameAndUUIDByOfferUUID mocks base method.
func (m *MockModelState) GetApplicationNameAndUUIDByOfferUUID(arg0 context.Context, arg1 string) (string, application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNameAndUUIDByOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(application.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationNameAndUUIDByOfferUUID indicates an expected call of GetApplicationNameAndUUIDByOfferUUID.
func (mr *MockModelStateMockRecorder) GetApplicationNameAndUUIDByOfferUUID(arg0, arg1 any) *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNameAndUUIDByOfferUUID", reflect.TypeOf((*MockModelState)(nil).GetApplicationNameAndUUIDByOfferUUID), arg0, arg1)
	return &MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall{Call: call}
}

// MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall wrap *gomock.Call
type MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall) Return(arg0 string, arg1 application.UUID, arg2 error) *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall) Do(f func(context.Context, string) (string, application.UUID, error)) *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall) DoAndReturn(f func(context.Context, string) (string, application.UUID, error)) *MockModelStateGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumerRelationUUIDs mocks base method.
func (m *MockModelState) GetConsumerRelationUUIDs(arg0 context.Context, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsumerRelationUUIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerRelationUUIDs indicates an expected call of GetConsumerRelationUUIDs.
func (mr *MockModelStateMockRecorder) GetConsumerRelationUUIDs(arg0 any, arg1 ...any) *MockModelStateGetConsumerRelationUUIDsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerRelationUUIDs", reflect.TypeOf((*MockModelState)(nil).GetConsumerRelationUUIDs), varargs...)
	return &MockModelStateGetConsumerRelationUUIDsCall{Call: call}
}

// MockModelStateGetConsumerRelationUUIDsCall wrap *gomock.Call
type MockModelStateGetConsumerRelationUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetConsumerRelationUUIDsCall) Return(arg0 []string, arg1 error) *MockModelStateGetConsumerRelationUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetConsumerRelationUUIDsCall) Do(f func(context.Context, ...string) ([]string, error)) *MockModelStateGetConsumerRelationUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetConsumerRelationUUIDsCall) DoAndReturn(f func(context.Context, ...string) ([]string, error)) *MockModelStateGetConsumerRelationUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMacaroonForRelation mocks base method.
func (m *MockModelState) GetMacaroonForRelation(arg0 context.Context, arg1 string) (*macaroon.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacaroonForRelation", arg0, arg1)
	ret0, _ := ret[0].(*macaroon.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacaroonForRelation indicates an expected call of GetMacaroonForRelation.
func (mr *MockModelStateMockRecorder) GetMacaroonForRelation(arg0, arg1 any) *MockModelStateGetMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacaroonForRelation", reflect.TypeOf((*MockModelState)(nil).GetMacaroonForRelation), arg0, arg1)
	return &MockModelStateGetMacaroonForRelationCall{Call: call}
}

// MockModelStateGetMacaroonForRelationCall wrap *gomock.Call
type MockModelStateGetMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMacaroonForRelationCall) Return(arg0 *macaroon.Macaroon, arg1 error) *MockModelStateGetMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMacaroonForRelationCall) Do(f func(context.Context, string) (*macaroon.Macaroon, error)) *MockModelStateGetMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMacaroonForRelationCall) DoAndReturn(f func(context.Context, string) (*macaroon.Macaroon, error)) *MockModelStateGetMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferDetails mocks base method.
func (m *MockModelState) GetOfferDetails(arg0 context.Context, arg1 internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferDetails", arg0, arg1)
	ret0, _ := ret[0].([]*crossmodelrelation.OfferDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferDetails indicates an expected call of GetOfferDetails.
func (mr *MockModelStateMockRecorder) GetOfferDetails(arg0, arg1 any) *MockModelStateGetOfferDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferDetails", reflect.TypeOf((*MockModelState)(nil).GetOfferDetails), arg0, arg1)
	return &MockModelStateGetOfferDetailsCall{Call: call}
}

// MockModelStateGetOfferDetailsCall wrap *gomock.Call
type MockModelStateGetOfferDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferDetailsCall) Return(arg0 []*crossmodelrelation.OfferDetail, arg1 error) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferDetailsCall) Do(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferDetailsCall) DoAndReturn(f func(context.Context, internal.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockModelStateGetOfferDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUID mocks base method.
func (m *MockModelState) GetOfferUUID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUID indicates an expected call of GetOfferUUID.
func (mr *MockModelStateMockRecorder) GetOfferUUID(arg0, arg1 any) *MockModelStateGetOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUID", reflect.TypeOf((*MockModelState)(nil).GetOfferUUID), arg0, arg1)
	return &MockModelStateGetOfferUUIDCall{Call: call}
}

// MockModelStateGetOfferUUIDCall wrap *gomock.Call
type MockModelStateGetOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferUUIDCall) Return(arg0 string, arg1 error) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferUUIDCall) Do(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferUUIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUIDByRelationUUID mocks base method.
func (m *MockModelState) GetOfferUUIDByRelationUUID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUIDByRelationUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUIDByRelationUUID indicates an expected call of GetOfferUUIDByRelationUUID.
func (mr *MockModelStateMockRecorder) GetOfferUUIDByRelationUUID(arg0, arg1 any) *MockModelStateGetOfferUUIDByRelationUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUIDByRelationUUID", reflect.TypeOf((*MockModelState)(nil).GetOfferUUIDByRelationUUID), arg0, arg1)
	return &MockModelStateGetOfferUUIDByRelationUUIDCall{Call: call}
}

// MockModelStateGetOfferUUIDByRelationUUIDCall wrap *gomock.Call
type MockModelStateGetOfferUUIDByRelationUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferUUIDByRelationUUIDCall) Return(arg0 string, arg1 error) *MockModelStateGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferUUIDByRelationUUIDCall) Do(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferUUIDByRelationUUIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelStateGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOffererRelationUUIDsForConsumers mocks base method.
func (m *MockModelState) GetOffererRelationUUIDsForConsumers(arg0 context.Context, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOffererRelationUUIDsForConsumers", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffererRelationUUIDsForConsumers indicates an expected call of GetOffererRelationUUIDsForConsumers.
func (mr *MockModelStateMockRecorder) GetOffererRelationUUIDsForConsumers(arg0 any, arg1 ...any) *MockModelStateGetOffererRelationUUIDsForConsumersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffererRelationUUIDsForConsumers", reflect.TypeOf((*MockModelState)(nil).GetOffererRelationUUIDsForConsumers), varargs...)
	return &MockModelStateGetOffererRelationUUIDsForConsumersCall{Call: call}
}

// MockModelStateGetOffererRelationUUIDsForConsumersCall wrap *gomock.Call
type MockModelStateGetOffererRelationUUIDsForConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOffererRelationUUIDsForConsumersCall) Return(arg0 []string, arg1 error) *MockModelStateGetOffererRelationUUIDsForConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOffererRelationUUIDsForConsumersCall) Do(f func(context.Context, ...string) ([]string, error)) *MockModelStateGetOffererRelationUUIDsForConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOffererRelationUUIDsForConsumersCall) DoAndReturn(f func(context.Context, ...string) ([]string, error)) *MockModelStateGetOffererRelationUUIDsForConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferingApplicationToken mocks base method.
func (m *MockModelState) GetOfferingApplicationToken(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferingApplicationToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferingApplicationToken indicates an expected call of GetOfferingApplicationToken.
func (mr *MockModelStateMockRecorder) GetOfferingApplicationToken(arg0, arg1 any) *MockModelStateGetOfferingApplicationTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferingApplicationToken", reflect.TypeOf((*MockModelState)(nil).GetOfferingApplicationToken), arg0, arg1)
	return &MockModelStateGetOfferingApplicationTokenCall{Call: call}
}

// MockModelStateGetOfferingApplicationTokenCall wrap *gomock.Call
type MockModelStateGetOfferingApplicationTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetOfferingApplicationTokenCall) Return(arg0 string, arg1 error) *MockModelStateGetOfferingApplicationTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetOfferingApplicationTokenCall) Do(f func(context.Context, string) (string, error)) *MockModelStateGetOfferingApplicationTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetOfferingApplicationTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelStateGetOfferingApplicationTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationConsumers mocks base method.
func (m *MockModelState) GetRemoteApplicationConsumers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationConsumers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationConsumers indicates an expected call of GetRemoteApplicationConsumers.
func (mr *MockModelStateMockRecorder) GetRemoteApplicationConsumers(arg0 any) *MockModelStateGetRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationConsumers", reflect.TypeOf((*MockModelState)(nil).GetRemoteApplicationConsumers), arg0)
	return &MockModelStateGetRemoteApplicationConsumersCall{Call: call}
}

// MockModelStateGetRemoteApplicationConsumersCall wrap *gomock.Call
type MockModelStateGetRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRemoteApplicationConsumersCall) Return(arg0 []crossmodelrelation.RemoteApplicationConsumer, arg1 error) *MockModelStateGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRemoteApplicationConsumersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockModelStateGetRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRemoteApplicationConsumersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationConsumer, error)) *MockModelStateGetRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOffererByApplicationName mocks base method.
func (m *MockModelState) GetRemoteApplicationOffererByApplicationName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOffererByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOffererByApplicationName indicates an expected call of GetRemoteApplicationOffererByApplicationName.
func (mr *MockModelStateMockRecorder) GetRemoteApplicationOffererByApplicationName(arg0, arg1 any) *MockModelStateGetRemoteApplicationOffererByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOffererByApplicationName", reflect.TypeOf((*MockModelState)(nil).GetRemoteApplicationOffererByApplicationName), arg0, arg1)
	return &MockModelStateGetRemoteApplicationOffererByApplicationNameCall{Call: call}
}

// MockModelStateGetRemoteApplicationOffererByApplicationNameCall wrap *gomock.Call
type MockModelStateGetRemoteApplicationOffererByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRemoteApplicationOffererByApplicationNameCall) Return(arg0 string, arg1 error) *MockModelStateGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRemoteApplicationOffererByApplicationNameCall) Do(f func(context.Context, string) (string, error)) *MockModelStateGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRemoteApplicationOffererByApplicationNameCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelStateGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOfferers mocks base method.
func (m *MockModelState) GetRemoteApplicationOfferers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOfferers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationOfferer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOfferers indicates an expected call of GetRemoteApplicationOfferers.
func (mr *MockModelStateMockRecorder) GetRemoteApplicationOfferers(arg0 any) *MockModelStateGetRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOfferers", reflect.TypeOf((*MockModelState)(nil).GetRemoteApplicationOfferers), arg0)
	return &MockModelStateGetRemoteApplicationOfferersCall{Call: call}
}

// MockModelStateGetRemoteApplicationOfferersCall wrap *gomock.Call
type MockModelStateGetRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRemoteApplicationOfferersCall) Return(arg0 []crossmodelrelation.RemoteApplicationOfferer, arg1 error) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRemoteApplicationOfferersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRemoteApplicationOfferersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferer, error)) *MockModelStateGetRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteConsumedSecretURIsWithChangesFromOfferingSide mocks base method.
func (m *MockModelState) GetRemoteConsumedSecretURIsWithChangesFromOfferingSide(arg0 context.Context, arg1 string, arg2 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRemoteConsumedSecretURIsWithChangesFromOfferingSide", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteConsumedSecretURIsWithChangesFromOfferingSide indicates an expected call of GetRemoteConsumedSecretURIsWithChangesFromOfferingSide.
func (mr *MockModelStateMockRecorder) GetRemoteConsumedSecretURIsWithChangesFromOfferingSide(arg0, arg1 any, arg2 ...any) *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteConsumedSecretURIsWithChangesFromOfferingSide", reflect.TypeOf((*MockModelState)(nil).GetRemoteConsumedSecretURIsWithChangesFromOfferingSide), varargs...)
	return &MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall{Call: call}
}

// MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall wrap *gomock.Call
type MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) Return(arg0 []string, arg1 error) *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) Do(f func(context.Context, string, ...string) ([]string, error)) *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) DoAndReturn(f func(context.Context, string, ...string) ([]string, error)) *MockModelStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretAccess mocks base method.
func (m *MockModelState) GetSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 secret.AccessParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccess indicates an expected call of GetSecretAccess.
func (mr *MockModelStateMockRecorder) GetSecretAccess(arg0, arg1, arg2 any) *MockModelStateGetSecretAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccess", reflect.TypeOf((*MockModelState)(nil).GetSecretAccess), arg0, arg1, arg2)
	return &MockModelStateGetSecretAccessCall{Call: call}
}

// MockModelStateGetSecretAccessCall wrap *gomock.Call
type MockModelStateGetSecretAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetSecretAccessCall) Return(arg0 string, arg1 error) *MockModelStateGetSecretAccessCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetSecretAccessCall) Do(f func(context.Context, *secrets.URI, secret.AccessParams) (string, error)) *MockModelStateGetSecretAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetSecretAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, secret.AccessParams) (string, error)) *MockModelStateGetSecretAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretRemoteConsumer mocks base method.
func (m *MockModelState) GetSecretRemoteConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 string) (*secrets.SecretConsumerMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretRemoteConsumer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretRemoteConsumer indicates an expected call of GetSecretRemoteConsumer.
func (mr *MockModelStateMockRecorder) GetSecretRemoteConsumer(arg0, arg1, arg2 any) *MockModelStateGetSecretRemoteConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretRemoteConsumer", reflect.TypeOf((*MockModelState)(nil).GetSecretRemoteConsumer), arg0, arg1, arg2)
	return &MockModelStateGetSecretRemoteConsumerCall{Call: call}
}

// MockModelStateGetSecretRemoteConsumerCall wrap *gomock.Call
type MockModelStateGetSecretRemoteConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetSecretRemoteConsumerCall) Return(arg0 *secrets.SecretConsumerMetadata, arg1 int, arg2 error) *MockModelStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetSecretRemoteConsumerCall) Do(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, int, error)) *MockModelStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetSecretRemoteConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, int, error)) *MockModelStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretValue mocks base method.
func (m *MockModelState) GetSecretValue(arg0 context.Context, arg1 *secrets.URI, arg2 int) (secrets.SecretData, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(secrets.SecretData)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockModelStateMockRecorder) GetSecretValue(arg0, arg1, arg2 any) *MockModelStateGetSecretValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockModelState)(nil).GetSecretValue), arg0, arg1, arg2)
	return &MockModelStateGetSecretValueCall{Call: call}
}

// MockModelStateGetSecretValueCall wrap *gomock.Call
type MockModelStateGetSecretValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetSecretValueCall) Return(arg0 secrets.SecretData, arg1 *secrets.ValueRef, arg2 error) *MockModelStateGetSecretValueCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetSecretValueCall) Do(f func(context.Context, *secrets.URI, int) (secrets.SecretData, *secrets.ValueRef, error)) *MockModelStateGetSecretValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetSecretValueCall) DoAndReturn(f func(context.Context, *secrets.URI, int) (secrets.SecretData, *secrets.ValueRef, error)) *MockModelStateGetSecretValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForConsumerRelations mocks base method.
func (m *MockModelState) InitialWatchStatementForConsumerRelations() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForConsumerRelations")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForConsumerRelations indicates an expected call of InitialWatchStatementForConsumerRelations.
func (mr *MockModelStateMockRecorder) InitialWatchStatementForConsumerRelations() *MockModelStateInitialWatchStatementForConsumerRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForConsumerRelations", reflect.TypeOf((*MockModelState)(nil).InitialWatchStatementForConsumerRelations))
	return &MockModelStateInitialWatchStatementForConsumerRelationsCall{Call: call}
}

// MockModelStateInitialWatchStatementForConsumerRelationsCall wrap *gomock.Call
type MockModelStateInitialWatchStatementForConsumerRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateInitialWatchStatementForConsumerRelationsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockModelStateInitialWatchStatementForConsumerRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateInitialWatchStatementForConsumerRelationsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForConsumerRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateInitialWatchStatementForConsumerRelationsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForConsumerRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForOffererRelations mocks base method.
func (m *MockModelState) InitialWatchStatementForOffererRelations() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForOffererRelations")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForOffererRelations indicates an expected call of InitialWatchStatementForOffererRelations.
func (mr *MockModelStateMockRecorder) InitialWatchStatementForOffererRelations() *MockModelStateInitialWatchStatementForOffererRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForOffererRelations", reflect.TypeOf((*MockModelState)(nil).InitialWatchStatementForOffererRelations))
	return &MockModelStateInitialWatchStatementForOffererRelationsCall{Call: call}
}

// MockModelStateInitialWatchStatementForOffererRelationsCall wrap *gomock.Call
type MockModelStateInitialWatchStatementForOffererRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateInitialWatchStatementForOffererRelationsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockModelStateInitialWatchStatementForOffererRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateInitialWatchStatementForOffererRelationsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForOffererRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateInitialWatchStatementForOffererRelationsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForOffererRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide mocks base method.
func (m *MockModelState) InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide(arg0 string) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide indicates an expected call of InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide.
func (mr *MockModelStateMockRecorder) InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide(arg0 any) *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide", reflect.TypeOf((*MockModelState)(nil).InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide), arg0)
	return &MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall{Call: call}
}

// MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall wrap *gomock.Call
type MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) Do(f func(string) (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) DoAndReturn(f func(string) (string, eventsource.NamespaceQuery)) *MockModelStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsRelationWithEndpointIdentifiersSuspended mocks base method.
func (m *MockModelState) IsRelationWithEndpointIdentifiersSuspended(arg0 context.Context, arg1, arg2 relation.EndpointIdentifier) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRelationWithEndpointIdentifiersSuspended", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRelationWithEndpointIdentifiersSuspended indicates an expected call of IsRelationWithEndpointIdentifiersSuspended.
func (mr *MockModelStateMockRecorder) IsRelationWithEndpointIdentifiersSuspended(arg0, arg1, arg2 any) *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRelationWithEndpointIdentifiersSuspended", reflect.TypeOf((*MockModelState)(nil).IsRelationWithEndpointIdentifiersSuspended), arg0, arg1, arg2)
	return &MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall{Call: call}
}

// MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall wrap *gomock.Call
type MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall) Return(arg0 bool, arg1 error) *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall) Do(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (bool, error)) *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (bool, error)) *MockModelStateIsRelationWithEndpointIdentifiersSuspendedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceRemoteApplicationConsumers mocks base method.
func (m *MockModelState) NamespaceRemoteApplicationConsumers() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceRemoteApplicationConsumers")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceRemoteApplicationConsumers indicates an expected call of NamespaceRemoteApplicationConsumers.
func (mr *MockModelStateMockRecorder) NamespaceRemoteApplicationConsumers() *MockModelStateNamespaceRemoteApplicationConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceRemoteApplicationConsumers", reflect.TypeOf((*MockModelState)(nil).NamespaceRemoteApplicationConsumers))
	return &MockModelStateNamespaceRemoteApplicationConsumersCall{Call: call}
}

// MockModelStateNamespaceRemoteApplicationConsumersCall wrap *gomock.Call
type MockModelStateNamespaceRemoteApplicationConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateNamespaceRemoteApplicationConsumersCall) Return(arg0 string) *MockModelStateNamespaceRemoteApplicationConsumersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateNamespaceRemoteApplicationConsumersCall) Do(f func() string) *MockModelStateNamespaceRemoteApplicationConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateNamespaceRemoteApplicationConsumersCall) DoAndReturn(f func() string) *MockModelStateNamespaceRemoteApplicationConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceRemoteApplicationOfferers mocks base method.
func (m *MockModelState) NamespaceRemoteApplicationOfferers() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceRemoteApplicationOfferers")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceRemoteApplicationOfferers indicates an expected call of NamespaceRemoteApplicationOfferers.
func (mr *MockModelStateMockRecorder) NamespaceRemoteApplicationOfferers() *MockModelStateNamespaceRemoteApplicationOfferersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceRemoteApplicationOfferers", reflect.TypeOf((*MockModelState)(nil).NamespaceRemoteApplicationOfferers))
	return &MockModelStateNamespaceRemoteApplicationOfferersCall{Call: call}
}

// MockModelStateNamespaceRemoteApplicationOfferersCall wrap *gomock.Call
type MockModelStateNamespaceRemoteApplicationOfferersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) Return(arg0 string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) Do(f func() string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateNamespaceRemoteApplicationOfferersCall) DoAndReturn(f func() string) *MockModelStateNamespaceRemoteApplicationOfferersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceRemoteConsumerRelations mocks base method.
func (m *MockModelState) NamespaceRemoteConsumerRelations() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceRemoteConsumerRelations")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceRemoteConsumerRelations indicates an expected call of NamespaceRemoteConsumerRelations.
func (mr *MockModelStateMockRecorder) NamespaceRemoteConsumerRelations() *MockModelStateNamespaceRemoteConsumerRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceRemoteConsumerRelations", reflect.TypeOf((*MockModelState)(nil).NamespaceRemoteConsumerRelations))
	return &MockModelStateNamespaceRemoteConsumerRelationsCall{Call: call}
}

// MockModelStateNamespaceRemoteConsumerRelationsCall wrap *gomock.Call
type MockModelStateNamespaceRemoteConsumerRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateNamespaceRemoteConsumerRelationsCall) Return(arg0 string) *MockModelStateNamespaceRemoteConsumerRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateNamespaceRemoteConsumerRelationsCall) Do(f func() string) *MockModelStateNamespaceRemoteConsumerRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateNamespaceRemoteConsumerRelationsCall) DoAndReturn(f func() string) *MockModelStateNamespaceRemoteConsumerRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMacaroonForRelation mocks base method.
func (m *MockModelState) SaveMacaroonForRelation(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMacaroonForRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMacaroonForRelation indicates an expected call of SaveMacaroonForRelation.
func (mr *MockModelStateMockRecorder) SaveMacaroonForRelation(arg0, arg1, arg2 any) *MockModelStateSaveMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMacaroonForRelation", reflect.TypeOf((*MockModelState)(nil).SaveMacaroonForRelation), arg0, arg1, arg2)
	return &MockModelStateSaveMacaroonForRelationCall{Call: call}
}

// MockModelStateSaveMacaroonForRelationCall wrap *gomock.Call
type MockModelStateSaveMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSaveMacaroonForRelationCall) Return(arg0 error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSaveMacaroonForRelationCall) Do(f func(context.Context, string, []byte) error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSaveMacaroonForRelationCall) DoAndReturn(f func(context.Context, string, []byte) error) *MockModelStateSaveMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSecretRemoteConsumer mocks base method.
func (m *MockModelState) SaveSecretRemoteConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 string, arg3 secrets.SecretConsumerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecretRemoteConsumer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecretRemoteConsumer indicates an expected call of SaveSecretRemoteConsumer.
func (mr *MockModelStateMockRecorder) SaveSecretRemoteConsumer(arg0, arg1, arg2, arg3 any) *MockModelStateSaveSecretRemoteConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecretRemoteConsumer", reflect.TypeOf((*MockModelState)(nil).SaveSecretRemoteConsumer), arg0, arg1, arg2, arg3)
	return &MockModelStateSaveSecretRemoteConsumerCall{Call: call}
}

// MockModelStateSaveSecretRemoteConsumerCall wrap *gomock.Call
type MockModelStateSaveSecretRemoteConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSaveSecretRemoteConsumerCall) Return(arg0 error) *MockModelStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSaveSecretRemoteConsumerCall) Do(f func(context.Context, *secrets.URI, string, secrets.SecretConsumerMetadata) error) *MockModelStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSaveSecretRemoteConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, string, secrets.SecretConsumerMetadata) error) *MockModelStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOffer mocks base method.
func (m *MockModelState) UpdateOffer(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockModelStateMockRecorder) UpdateOffer(arg0, arg1, arg2 any) *MockModelStateUpdateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockModelState)(nil).UpdateOffer), arg0, arg1, arg2)
	return &MockModelStateUpdateOfferCall{Call: call}
}

// MockModelStateUpdateOfferCall wrap *gomock.Call
type MockModelStateUpdateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateUpdateOfferCall) Return(arg0 error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateUpdateOfferCall) Do(f func(context.Context, string, []string) error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateUpdateOfferCall) DoAndReturn(f func(context.Context, string, []string) error) *MockModelStateUpdateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRemoteSecretRevision mocks base method.
func (m *MockModelState) UpdateRemoteSecretRevision(arg0 context.Context, arg1 *secrets.URI, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteSecretRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteSecretRevision indicates an expected call of UpdateRemoteSecretRevision.
func (mr *MockModelStateMockRecorder) UpdateRemoteSecretRevision(arg0, arg1, arg2 any) *MockModelStateUpdateRemoteSecretRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteSecretRevision", reflect.TypeOf((*MockModelState)(nil).UpdateRemoteSecretRevision), arg0, arg1, arg2)
	return &MockModelStateUpdateRemoteSecretRevisionCall{Call: call}
}

// MockModelStateUpdateRemoteSecretRevisionCall wrap *gomock.Call
type MockModelStateUpdateRemoteSecretRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateUpdateRemoteSecretRevisionCall) Return(arg0 error) *MockModelStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateUpdateRemoteSecretRevisionCall) Do(f func(context.Context, *secrets.URI, int) error) *MockModelStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateUpdateRemoteSecretRevisionCall) DoAndReturn(f func(context.Context, *secrets.URI, int) error) *MockModelStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelMigrationState is a mock of ModelMigrationState interface.
type MockModelMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationStateMockRecorder
}

// MockModelMigrationStateMockRecorder is the mock recorder for MockModelMigrationState.
type MockModelMigrationStateMockRecorder struct {
	mock *MockModelMigrationState
}

// NewMockModelMigrationState creates a new mock instance.
func NewMockModelMigrationState(ctrl *gomock.Controller) *MockModelMigrationState {
	mock := &MockModelMigrationState{ctrl: ctrl}
	mock.recorder = &MockModelMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationState) EXPECT() *MockModelMigrationStateMockRecorder {
	return m.recorder
}

// ImportOffers mocks base method.
func (m *MockModelMigrationState) ImportOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferImport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOffers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportOffers indicates an expected call of ImportOffers.
func (mr *MockModelMigrationStateMockRecorder) ImportOffers(arg0, arg1 any) *MockModelMigrationStateImportOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOffers", reflect.TypeOf((*MockModelMigrationState)(nil).ImportOffers), arg0, arg1)
	return &MockModelMigrationStateImportOffersCall{Call: call}
}

// MockModelMigrationStateImportOffersCall wrap *gomock.Call
type MockModelMigrationStateImportOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationStateImportOffersCall) Return(arg0 error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationStateImportOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationStateImportOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockModelMigrationStateImportOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
