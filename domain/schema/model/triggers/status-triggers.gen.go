// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForApplicationStatus generates the triggers for the
// application_status table.
func ChangeLogTriggersForApplicationStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for ApplicationStatus
INSERT INTO change_log_namespace VALUES (%[2]d, 'application_status', 'ApplicationStatus changes based on %[1]s');

-- insert trigger for ApplicationStatus
CREATE TRIGGER trg_log_application_status_insert
AFTER INSERT ON application_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for ApplicationStatus
CREATE TRIGGER trg_log_application_status_update
AFTER UPDATE ON application_status FOR EACH ROW
WHEN 
	NEW.application_uuid != OLD.application_uuid OR
	NEW.status_id != OLD.status_id OR
	(NEW.message != OLD.message OR (NEW.message IS NOT NULL AND OLD.message IS NULL) OR (NEW.message IS NULL AND OLD.message IS NOT NULL)) OR
	(NEW.data != OLD.data OR (NEW.data IS NOT NULL AND OLD.data IS NULL) OR (NEW.data IS NULL AND OLD.data IS NOT NULL)) OR
	(NEW.updated_at != OLD.updated_at OR (NEW.updated_at IS NOT NULL AND OLD.updated_at IS NULL) OR (NEW.updated_at IS NULL AND OLD.updated_at IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for ApplicationStatus
CREATE TRIGGER trg_log_application_status_delete
AFTER DELETE ON application_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForK8sPodStatus generates the triggers for the
// k8s_pod_status table.
func ChangeLogTriggersForK8sPodStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for K8sPodStatus
INSERT INTO change_log_namespace VALUES (%[2]d, 'k8s_pod_status', 'K8sPodStatus changes based on %[1]s');

-- insert trigger for K8sPodStatus
CREATE TRIGGER trg_log_k8s_pod_status_insert
AFTER INSERT ON k8s_pod_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for K8sPodStatus
CREATE TRIGGER trg_log_k8s_pod_status_update
AFTER UPDATE ON k8s_pod_status FOR EACH ROW
WHEN 
	NEW.unit_uuid != OLD.unit_uuid OR
	NEW.status_id != OLD.status_id OR
	(NEW.message != OLD.message OR (NEW.message IS NOT NULL AND OLD.message IS NULL) OR (NEW.message IS NULL AND OLD.message IS NOT NULL)) OR
	(NEW.data != OLD.data OR (NEW.data IS NOT NULL AND OLD.data IS NULL) OR (NEW.data IS NULL AND OLD.data IS NOT NULL)) OR
	(NEW.updated_at != OLD.updated_at OR (NEW.updated_at IS NOT NULL AND OLD.updated_at IS NULL) OR (NEW.updated_at IS NULL AND OLD.updated_at IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for K8sPodStatus
CREATE TRIGGER trg_log_k8s_pod_status_delete
AFTER DELETE ON k8s_pod_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForUnitAgentStatus generates the triggers for the
// unit_agent_status table.
func ChangeLogTriggersForUnitAgentStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for UnitAgentStatus
INSERT INTO change_log_namespace VALUES (%[2]d, 'unit_agent_status', 'UnitAgentStatus changes based on %[1]s');

-- insert trigger for UnitAgentStatus
CREATE TRIGGER trg_log_unit_agent_status_insert
AFTER INSERT ON unit_agent_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for UnitAgentStatus
CREATE TRIGGER trg_log_unit_agent_status_update
AFTER UPDATE ON unit_agent_status FOR EACH ROW
WHEN 
	NEW.unit_uuid != OLD.unit_uuid OR
	NEW.status_id != OLD.status_id OR
	(NEW.message != OLD.message OR (NEW.message IS NOT NULL AND OLD.message IS NULL) OR (NEW.message IS NULL AND OLD.message IS NOT NULL)) OR
	(NEW.data != OLD.data OR (NEW.data IS NOT NULL AND OLD.data IS NULL) OR (NEW.data IS NULL AND OLD.data IS NOT NULL)) OR
	(NEW.updated_at != OLD.updated_at OR (NEW.updated_at IS NOT NULL AND OLD.updated_at IS NULL) OR (NEW.updated_at IS NULL AND OLD.updated_at IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for UnitAgentStatus
CREATE TRIGGER trg_log_unit_agent_status_delete
AFTER DELETE ON unit_agent_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForUnitWorkloadStatus generates the triggers for the
// unit_workload_status table.
func ChangeLogTriggersForUnitWorkloadStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for UnitWorkloadStatus
INSERT INTO change_log_namespace VALUES (%[2]d, 'unit_workload_status', 'UnitWorkloadStatus changes based on %[1]s');

-- insert trigger for UnitWorkloadStatus
CREATE TRIGGER trg_log_unit_workload_status_insert
AFTER INSERT ON unit_workload_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for UnitWorkloadStatus
CREATE TRIGGER trg_log_unit_workload_status_update
AFTER UPDATE ON unit_workload_status FOR EACH ROW
WHEN 
	NEW.unit_uuid != OLD.unit_uuid OR
	NEW.status_id != OLD.status_id OR
	(NEW.message != OLD.message OR (NEW.message IS NOT NULL AND OLD.message IS NULL) OR (NEW.message IS NULL AND OLD.message IS NOT NULL)) OR
	(NEW.data != OLD.data OR (NEW.data IS NOT NULL AND OLD.data IS NULL) OR (NEW.data IS NULL AND OLD.data IS NOT NULL)) OR
	(NEW.updated_at != OLD.updated_at OR (NEW.updated_at IS NOT NULL AND OLD.updated_at IS NULL) OR (NEW.updated_at IS NULL AND OLD.updated_at IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for UnitWorkloadStatus
CREATE TRIGGER trg_log_unit_workload_status_delete
AFTER DELETE ON unit_workload_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

