// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForRemoval generates the triggers for the
// removal table.
func ChangeLogTriggersForRemoval(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for Removal
INSERT INTO change_log_namespace VALUES (%[2]d, 'removal', 'Removal changes based on %[1]s');

-- insert trigger for Removal
CREATE TRIGGER trg_log_removal_insert
AFTER INSERT ON removal FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for Removal
CREATE TRIGGER trg_log_removal_update
AFTER UPDATE ON removal FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.removal_type_id != OLD.removal_type_id OR
	NEW.entity_uuid != OLD.entity_uuid OR
	NEW.force != OLD.force OR
	NEW.scheduled_for != OLD.scheduled_for OR
	(NEW.arg != OLD.arg OR (NEW.arg IS NOT NULL AND OLD.arg IS NULL) OR (NEW.arg IS NULL AND OLD.arg IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for Removal
CREATE TRIGGER trg_log_removal_delete
AFTER DELETE ON removal FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

