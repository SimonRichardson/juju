// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForOperationTaskLog generates the triggers for the
// operation_task_log table.
func ChangeLogTriggersForOperationTaskLog(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for OperationTaskLog
INSERT INTO change_log_namespace VALUES (%[2]d, 'operation_task_log', 'OperationTaskLog changes based on %[1]s');

-- insert trigger for OperationTaskLog
CREATE TRIGGER trg_log_operation_task_log_insert
AFTER INSERT ON operation_task_log FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for OperationTaskLog
CREATE TRIGGER trg_log_operation_task_log_update
AFTER UPDATE ON operation_task_log FOR EACH ROW
WHEN 
	NEW.task_uuid != OLD.task_uuid OR
	NEW.content != OLD.content OR
	NEW.created_at != OLD.created_at 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for OperationTaskLog
CREATE TRIGGER trg_log_operation_task_log_delete
AFTER DELETE ON operation_task_log FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

