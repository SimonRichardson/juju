// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForUnit generates the triggers for the
// unit table.
func ChangeLogTriggersForUnit(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for Unit
INSERT INTO change_log_namespace VALUES (%[2]d, 'unit', 'Unit changes based on %[1]s');

-- insert trigger for Unit
CREATE TRIGGER trg_log_unit_insert
AFTER INSERT ON unit FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for Unit
CREATE TRIGGER trg_log_unit_update
AFTER UPDATE ON unit FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.name != OLD.name OR
	NEW.life_id != OLD.life_id OR
	NEW.application_uuid != OLD.application_uuid OR
	NEW.net_node_uuid != OLD.net_node_uuid OR
	NEW.charm_uuid != OLD.charm_uuid OR
	(NEW.password_hash_algorithm_id != OLD.password_hash_algorithm_id OR (NEW.password_hash_algorithm_id IS NOT NULL AND OLD.password_hash_algorithm_id IS NULL) OR (NEW.password_hash_algorithm_id IS NULL AND OLD.password_hash_algorithm_id IS NOT NULL)) OR
	(NEW.password_hash != OLD.password_hash OR (NEW.password_hash IS NOT NULL AND OLD.password_hash IS NULL) OR (NEW.password_hash IS NULL AND OLD.password_hash IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for Unit
CREATE TRIGGER trg_log_unit_delete
AFTER DELETE ON unit FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForUnitPrincipal generates the triggers for the
// unit_principal table.
func ChangeLogTriggersForUnitPrincipal(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for UnitPrincipal
INSERT INTO change_log_namespace VALUES (%[2]d, 'unit_principal', 'UnitPrincipal changes based on %[1]s');

-- insert trigger for UnitPrincipal
CREATE TRIGGER trg_log_unit_principal_insert
AFTER INSERT ON unit_principal FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for UnitPrincipal
CREATE TRIGGER trg_log_unit_principal_update
AFTER UPDATE ON unit_principal FOR EACH ROW
WHEN 
	NEW.unit_uuid != OLD.unit_uuid OR
	NEW.principal_uuid != OLD.principal_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for UnitPrincipal
CREATE TRIGGER trg_log_unit_principal_delete
AFTER DELETE ON unit_principal FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForUnitResolved generates the triggers for the
// unit_resolved table.
func ChangeLogTriggersForUnitResolved(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for UnitResolved
INSERT INTO change_log_namespace VALUES (%[2]d, 'unit_resolved', 'UnitResolved changes based on %[1]s');

-- insert trigger for UnitResolved
CREATE TRIGGER trg_log_unit_resolved_insert
AFTER INSERT ON unit_resolved FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for UnitResolved
CREATE TRIGGER trg_log_unit_resolved_update
AFTER UPDATE ON unit_resolved FOR EACH ROW
WHEN 
	NEW.unit_uuid != OLD.unit_uuid OR
	NEW.mode_id != OLD.mode_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for UnitResolved
CREATE TRIGGER trg_log_unit_resolved_delete
AFTER DELETE ON unit_resolved FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

