// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForApplicationEndpoint generates the triggers for the
// application_endpoint table.
func ChangeLogTriggersForApplicationEndpoint(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for ApplicationEndpoint
INSERT INTO change_log_namespace VALUES (%[2]d, 'application_endpoint', 'ApplicationEndpoint changes based on %[1]s');

-- insert trigger for ApplicationEndpoint
CREATE TRIGGER trg_log_application_endpoint_insert
AFTER INSERT ON application_endpoint FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for ApplicationEndpoint
CREATE TRIGGER trg_log_application_endpoint_update
AFTER UPDATE ON application_endpoint FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.application_uuid != OLD.application_uuid OR
	(NEW.space_uuid != OLD.space_uuid OR (NEW.space_uuid IS NOT NULL AND OLD.space_uuid IS NULL) OR (NEW.space_uuid IS NULL AND OLD.space_uuid IS NOT NULL)) OR
	NEW.charm_relation_uuid != OLD.charm_relation_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for ApplicationEndpoint
CREATE TRIGGER trg_log_application_endpoint_delete
AFTER DELETE ON application_endpoint FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelation generates the triggers for the
// relation table.
func ChangeLogTriggersForRelation(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for Relation
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation', 'Relation changes based on %[1]s');

-- insert trigger for Relation
CREATE TRIGGER trg_log_relation_insert
AFTER INSERT ON relation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for Relation
CREATE TRIGGER trg_log_relation_update
AFTER UPDATE ON relation FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.life_id != OLD.life_id OR
	NEW.relation_id != OLD.relation_id OR
	(NEW.suspended != OLD.suspended OR (NEW.suspended IS NOT NULL AND OLD.suspended IS NULL) OR (NEW.suspended IS NULL AND OLD.suspended IS NOT NULL)) OR
	(NEW.suspended_reason != OLD.suspended_reason OR (NEW.suspended_reason IS NOT NULL AND OLD.suspended_reason IS NULL) OR (NEW.suspended_reason IS NULL AND OLD.suspended_reason IS NOT NULL)) OR
	NEW.scope_id != OLD.scope_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for Relation
CREATE TRIGGER trg_log_relation_delete
AFTER DELETE ON relation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationApplicationSettingsHash generates the triggers for the
// relation_application_settings_hash table.
func ChangeLogTriggersForRelationApplicationSettingsHash(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationApplicationSettingsHash
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_application_settings_hash', 'RelationApplicationSettingsHash changes based on %[1]s');

-- insert trigger for RelationApplicationSettingsHash
CREATE TRIGGER trg_log_relation_application_settings_hash_insert
AFTER INSERT ON relation_application_settings_hash FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for RelationApplicationSettingsHash
CREATE TRIGGER trg_log_relation_application_settings_hash_update
AFTER UPDATE ON relation_application_settings_hash FOR EACH ROW
WHEN 
	NEW.relation_endpoint_uuid != OLD.relation_endpoint_uuid OR
	NEW.sha256 != OLD.sha256 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for RelationApplicationSettingsHash
CREATE TRIGGER trg_log_relation_application_settings_hash_delete
AFTER DELETE ON relation_application_settings_hash FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationUnit generates the triggers for the
// relation_unit table.
func ChangeLogTriggersForRelationUnit(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationUnit
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_unit', 'RelationUnit changes based on %[1]s');

-- insert trigger for RelationUnit
CREATE TRIGGER trg_log_relation_unit_insert
AFTER INSERT ON relation_unit FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for RelationUnit
CREATE TRIGGER trg_log_relation_unit_update
AFTER UPDATE ON relation_unit FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.relation_endpoint_uuid != OLD.relation_endpoint_uuid OR
	NEW.unit_uuid != OLD.unit_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for RelationUnit
CREATE TRIGGER trg_log_relation_unit_delete
AFTER DELETE ON relation_unit FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationUnitSettingsHash generates the triggers for the
// relation_unit_settings_hash table.
func ChangeLogTriggersForRelationUnitSettingsHash(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationUnitSettingsHash
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_unit_settings_hash', 'RelationUnitSettingsHash changes based on %[1]s');

-- insert trigger for RelationUnitSettingsHash
CREATE TRIGGER trg_log_relation_unit_settings_hash_insert
AFTER INSERT ON relation_unit_settings_hash FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now', 'utc'));
END;

-- update trigger for RelationUnitSettingsHash
CREATE TRIGGER trg_log_relation_unit_settings_hash_update
AFTER UPDATE ON relation_unit_settings_hash FOR EACH ROW
WHEN 
	NEW.relation_unit_uuid != OLD.relation_unit_uuid OR
	NEW.sha256 != OLD.sha256 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;
-- delete trigger for RelationUnitSettingsHash
CREATE TRIGGER trg_log_relation_unit_settings_hash_delete
AFTER DELETE ON relation_unit_settings_hash FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now', 'utc'));
END;`, columnName, namespaceID))
	}
}

