// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForApplicationRemoteConsumer generates the triggers for the
// application_remote_consumer table.
func ChangeLogTriggersForApplicationRemoteConsumer(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for ApplicationRemoteConsumer
INSERT INTO change_log_namespace VALUES (%[2]d, 'application_remote_consumer', 'ApplicationRemoteConsumer changes based on %[1]s');

-- insert trigger for ApplicationRemoteConsumer
CREATE TRIGGER trg_log_application_remote_consumer_insert
AFTER INSERT ON application_remote_consumer FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for ApplicationRemoteConsumer
CREATE TRIGGER trg_log_application_remote_consumer_update
AFTER UPDATE ON application_remote_consumer FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.offerer_application_uuid != OLD.offerer_application_uuid OR
	NEW.consumer_application_uuid != OLD.consumer_application_uuid OR
	NEW.offer_connection_uuid != OLD.offer_connection_uuid OR
	NEW.consumer_model_uuid != OLD.consumer_model_uuid OR
	NEW.version != OLD.version OR
	NEW.life_id != OLD.life_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for ApplicationRemoteConsumer
CREATE TRIGGER trg_log_application_remote_consumer_delete
AFTER DELETE ON application_remote_consumer FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForApplicationRemoteOfferer generates the triggers for the
// application_remote_offerer table.
func ChangeLogTriggersForApplicationRemoteOfferer(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for ApplicationRemoteOfferer
INSERT INTO change_log_namespace VALUES (%[2]d, 'application_remote_offerer', 'ApplicationRemoteOfferer changes based on %[1]s');

-- insert trigger for ApplicationRemoteOfferer
CREATE TRIGGER trg_log_application_remote_offerer_insert
AFTER INSERT ON application_remote_offerer FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for ApplicationRemoteOfferer
CREATE TRIGGER trg_log_application_remote_offerer_update
AFTER UPDATE ON application_remote_offerer FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.life_id != OLD.life_id OR
	NEW.application_uuid != OLD.application_uuid OR
	NEW.offer_uuid != OLD.offer_uuid OR
	NEW.offer_url != OLD.offer_url OR
	NEW.version != OLD.version OR
	(NEW.offerer_controller_uuid != OLD.offerer_controller_uuid OR (NEW.offerer_controller_uuid IS NOT NULL AND OLD.offerer_controller_uuid IS NULL) OR (NEW.offerer_controller_uuid IS NULL AND OLD.offerer_controller_uuid IS NOT NULL)) OR
	NEW.offerer_model_uuid != OLD.offerer_model_uuid OR
	NEW.macaroon != OLD.macaroon 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for ApplicationRemoteOfferer
CREATE TRIGGER trg_log_application_remote_offerer_delete
AFTER DELETE ON application_remote_offerer FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationNetworkIngress generates the triggers for the
// relation_network_ingress table.
func ChangeLogTriggersForRelationNetworkIngress(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationNetworkIngress
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_network_ingress', 'RelationNetworkIngress changes based on %[1]s');

-- insert trigger for RelationNetworkIngress
CREATE TRIGGER trg_log_relation_network_ingress_insert
AFTER INSERT ON relation_network_ingress FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for RelationNetworkIngress
CREATE TRIGGER trg_log_relation_network_ingress_update
AFTER UPDATE ON relation_network_ingress FOR EACH ROW
WHEN 
	NEW.relation_uuid != OLD.relation_uuid OR
	NEW.cidr != OLD.cidr 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for RelationNetworkIngress
CREATE TRIGGER trg_log_relation_network_ingress_delete
AFTER DELETE ON relation_network_ingress FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

