// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controllerupgrader/service (interfaces: AgentBinaryFinder,ControllerState,ControllerModelState,SimpleStreamsAgentFinder,AgentFinderControllerState,AgentFinderControllerModelState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/controllerupgrader/service AgentBinaryFinder,ControllerState,ControllerModelState,SimpleStreamsAgentFinder,AgentFinderControllerState,AgentFinderControllerModelState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	agentbinary "github.com/juju/juju/domain/agentbinary"
	environs "github.com/juju/juju/environs"
	tools "github.com/juju/juju/environs/tools"
	tools0 "github.com/juju/juju/internal/tools"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryFinder is a mock of AgentBinaryFinder interface.
type MockAgentBinaryFinder struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryFinderMockRecorder
}

// MockAgentBinaryFinderMockRecorder is the mock recorder for MockAgentBinaryFinder.
type MockAgentBinaryFinderMockRecorder struct {
	mock *MockAgentBinaryFinder
}

// NewMockAgentBinaryFinder creates a new mock instance.
func NewMockAgentBinaryFinder(ctrl *gomock.Controller) *MockAgentBinaryFinder {
	mock := &MockAgentBinaryFinder{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryFinder) EXPECT() *MockAgentBinaryFinderMockRecorder {
	return m.recorder
}

// GetHighestPatchVersionAvailable mocks base method.
func (m *MockAgentBinaryFinder) GetHighestPatchVersionAvailable(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestPatchVersionAvailable", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestPatchVersionAvailable indicates an expected call of GetHighestPatchVersionAvailable.
func (mr *MockAgentBinaryFinderMockRecorder) GetHighestPatchVersionAvailable(arg0 any) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestPatchVersionAvailable", reflect.TypeOf((*MockAgentBinaryFinder)(nil).GetHighestPatchVersionAvailable), arg0)
	return &MockAgentBinaryFinderGetHighestPatchVersionAvailableCall{Call: call}
}

// MockAgentBinaryFinderGetHighestPatchVersionAvailableCall wrap *gomock.Call
type MockAgentBinaryFinderGetHighestPatchVersionAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) Return(arg0 semversion.Number, arg1 error) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) Do(f func(context.Context) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestPatchVersionAvailableForStream mocks base method.
func (m *MockAgentBinaryFinder) GetHighestPatchVersionAvailableForStream(arg0 context.Context, arg1 agentbinary.Stream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestPatchVersionAvailableForStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestPatchVersionAvailableForStream indicates an expected call of GetHighestPatchVersionAvailableForStream.
func (mr *MockAgentBinaryFinderMockRecorder) GetHighestPatchVersionAvailableForStream(arg0, arg1 any) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestPatchVersionAvailableForStream", reflect.TypeOf((*MockAgentBinaryFinder)(nil).GetHighestPatchVersionAvailableForStream), arg0, arg1)
	return &MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall{Call: call}
}

// MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall wrap *gomock.Call
type MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) Return(arg0 semversion.Number, arg1 error) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) Do(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) DoAndReturn(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasBinariesForVersionAndArchitectures mocks base method.
func (m *MockAgentBinaryFinder) HasBinariesForVersionAndArchitectures(arg0 context.Context, arg1 semversion.Number, arg2 []agentbinary.Architecture) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinariesForVersionAndArchitectures", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBinariesForVersionAndArchitectures indicates an expected call of HasBinariesForVersionAndArchitectures.
func (mr *MockAgentBinaryFinderMockRecorder) HasBinariesForVersionAndArchitectures(arg0, arg1, arg2 any) *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinariesForVersionAndArchitectures", reflect.TypeOf((*MockAgentBinaryFinder)(nil).HasBinariesForVersionAndArchitectures), arg0, arg1, arg2)
	return &MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall{Call: call}
}

// MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall wrap *gomock.Call
type MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall) Return(arg0 bool, arg1 error) *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall) Do(f func(context.Context, semversion.Number, []agentbinary.Architecture) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall) DoAndReturn(f func(context.Context, semversion.Number, []agentbinary.Architecture) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasBinariesForVersionStreamAndArchitectures mocks base method.
func (m *MockAgentBinaryFinder) HasBinariesForVersionStreamAndArchitectures(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.Stream, arg3 []agentbinary.Architecture) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinariesForVersionStreamAndArchitectures", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBinariesForVersionStreamAndArchitectures indicates an expected call of HasBinariesForVersionStreamAndArchitectures.
func (mr *MockAgentBinaryFinderMockRecorder) HasBinariesForVersionStreamAndArchitectures(arg0, arg1, arg2, arg3 any) *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinariesForVersionStreamAndArchitectures", reflect.TypeOf((*MockAgentBinaryFinder)(nil).HasBinariesForVersionStreamAndArchitectures), arg0, arg1, arg2, arg3)
	return &MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall{Call: call}
}

// MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall wrap *gomock.Call
type MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall) Return(arg0 bool, arg1 error) *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall) Do(f func(context.Context, semversion.Number, agentbinary.Stream, []agentbinary.Architecture) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.Stream, []agentbinary.Architecture) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionStreamAndArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetControllerNodeVersions mocks base method.
func (m *MockControllerState) GetControllerNodeVersions(arg0 context.Context) (map[string]semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerNodeVersions", arg0)
	ret0, _ := ret[0].(map[string]semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerNodeVersions indicates an expected call of GetControllerNodeVersions.
func (mr *MockControllerStateMockRecorder) GetControllerNodeVersions(arg0 any) *MockControllerStateGetControllerNodeVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerNodeVersions", reflect.TypeOf((*MockControllerState)(nil).GetControllerNodeVersions), arg0)
	return &MockControllerStateGetControllerNodeVersionsCall{Call: call}
}

// MockControllerStateGetControllerNodeVersionsCall wrap *gomock.Call
type MockControllerStateGetControllerNodeVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetControllerNodeVersionsCall) Return(arg0 map[string]semversion.Number, arg1 error) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetControllerNodeVersionsCall) Do(f func(context.Context) (map[string]semversion.Number, error)) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetControllerNodeVersionsCall) DoAndReturn(f func(context.Context) (map[string]semversion.Number, error)) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerTargetVersion mocks base method.
func (m *MockControllerState) GetControllerTargetVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerTargetVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerTargetVersion indicates an expected call of GetControllerTargetVersion.
func (mr *MockControllerStateMockRecorder) GetControllerTargetVersion(arg0 any) *MockControllerStateGetControllerTargetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerTargetVersion", reflect.TypeOf((*MockControllerState)(nil).GetControllerTargetVersion), arg0)
	return &MockControllerStateGetControllerTargetVersionCall{Call: call}
}

// MockControllerStateGetControllerTargetVersionCall wrap *gomock.Call
type MockControllerStateGetControllerTargetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetControllerTargetVersionCall) Return(arg0 semversion.Number, arg1 error) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetControllerTargetVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetControllerTargetVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetControllerTargetVersion mocks base method.
func (m *MockControllerState) SetControllerTargetVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerTargetVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerTargetVersion indicates an expected call of SetControllerTargetVersion.
func (mr *MockControllerStateMockRecorder) SetControllerTargetVersion(arg0, arg1 any) *MockControllerStateSetControllerTargetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerTargetVersion", reflect.TypeOf((*MockControllerState)(nil).SetControllerTargetVersion), arg0, arg1)
	return &MockControllerStateSetControllerTargetVersionCall{Call: call}
}

// MockControllerStateSetControllerTargetVersionCall wrap *gomock.Call
type MockControllerStateSetControllerTargetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateSetControllerTargetVersionCall) Return(arg0 error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateSetControllerTargetVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateSetControllerTargetVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerModelState is a mock of ControllerModelState interface.
type MockControllerModelState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerModelStateMockRecorder
}

// MockControllerModelStateMockRecorder is the mock recorder for MockControllerModelState.
type MockControllerModelStateMockRecorder struct {
	mock *MockControllerModelState
}

// NewMockControllerModelState creates a new mock instance.
func NewMockControllerModelState(ctrl *gomock.Controller) *MockControllerModelState {
	mock := &MockControllerModelState{ctrl: ctrl}
	mock.recorder = &MockControllerModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerModelState) EXPECT() *MockControllerModelStateMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockControllerModelState) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockControllerModelStateMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockControllerModelStateGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockControllerModelState)(nil).GetModelTargetAgentVersion), arg0)
	return &MockControllerModelStateGetModelTargetAgentVersionCall{Call: call}
}

// MockControllerModelStateGetModelTargetAgentVersionCall wrap *gomock.Call
type MockControllerModelStateGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersion mocks base method.
func (m *MockControllerModelState) SetModelTargetAgentVersion(arg0 context.Context, arg1, arg2 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersion indicates an expected call of SetModelTargetAgentVersion.
func (mr *MockControllerModelStateMockRecorder) SetModelTargetAgentVersion(arg0, arg1, arg2 any) *MockControllerModelStateSetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersion", reflect.TypeOf((*MockControllerModelState)(nil).SetModelTargetAgentVersion), arg0, arg1, arg2)
	return &MockControllerModelStateSetModelTargetAgentVersionCall{Call: call}
}

// MockControllerModelStateSetModelTargetAgentVersionCall wrap *gomock.Call
type MockControllerModelStateSetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) Return(arg0 error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) Do(f func(context.Context, semversion.Number, semversion.Number) error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number) error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersionAndStream mocks base method.
func (m *MockControllerModelState) SetModelTargetAgentVersionAndStream(arg0 context.Context, arg1, arg2 semversion.Number, arg3 agentbinary.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersionAndStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersionAndStream indicates an expected call of SetModelTargetAgentVersionAndStream.
func (mr *MockControllerModelStateMockRecorder) SetModelTargetAgentVersionAndStream(arg0, arg1, arg2, arg3 any) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersionAndStream", reflect.TypeOf((*MockControllerModelState)(nil).SetModelTargetAgentVersionAndStream), arg0, arg1, arg2, arg3)
	return &MockControllerModelStateSetModelTargetAgentVersionAndStreamCall{Call: call}
}

// MockControllerModelStateSetModelTargetAgentVersionAndStreamCall wrap *gomock.Call
type MockControllerModelStateSetModelTargetAgentVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) Return(arg0 error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) Do(f func(context.Context, semversion.Number, semversion.Number, agentbinary.Stream) error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number, agentbinary.Stream) error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSimpleStreamsAgentFinder is a mock of SimpleStreamsAgentFinder interface.
type MockSimpleStreamsAgentFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleStreamsAgentFinderMockRecorder
}

// MockSimpleStreamsAgentFinderMockRecorder is the mock recorder for MockSimpleStreamsAgentFinder.
type MockSimpleStreamsAgentFinderMockRecorder struct {
	mock *MockSimpleStreamsAgentFinder
}

// NewMockSimpleStreamsAgentFinder creates a new mock instance.
func NewMockSimpleStreamsAgentFinder(ctrl *gomock.Controller) *MockSimpleStreamsAgentFinder {
	mock := &MockSimpleStreamsAgentFinder{ctrl: ctrl}
	mock.recorder = &MockSimpleStreamsAgentFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleStreamsAgentFinder) EXPECT() *MockSimpleStreamsAgentFinderMockRecorder {
	return m.recorder
}

// AgentBinaryFilter mocks base method.
func (m *MockSimpleStreamsAgentFinder) AgentBinaryFilter(arg0 context.Context, arg1 tools.SimplestreamsFetcher, arg2 environs.BootstrapEnviron, arg3, arg4 int, arg5 []string, arg6 tools0.Filter) (tools0.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBinaryFilter", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(tools0.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentBinaryFilter indicates an expected call of AgentBinaryFilter.
func (mr *MockSimpleStreamsAgentFinderMockRecorder) AgentBinaryFilter(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockSimpleStreamsAgentFinderAgentBinaryFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBinaryFilter", reflect.TypeOf((*MockSimpleStreamsAgentFinder)(nil).AgentBinaryFilter), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockSimpleStreamsAgentFinderAgentBinaryFilterCall{Call: call}
}

// MockSimpleStreamsAgentFinderAgentBinaryFilterCall wrap *gomock.Call
type MockSimpleStreamsAgentFinderAgentBinaryFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSimpleStreamsAgentFinderAgentBinaryFilterCall) Return(arg0 tools0.List, arg1 error) *MockSimpleStreamsAgentFinderAgentBinaryFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSimpleStreamsAgentFinderAgentBinaryFilterCall) Do(f func(context.Context, tools.SimplestreamsFetcher, environs.BootstrapEnviron, int, int, []string, tools0.Filter) (tools0.List, error)) *MockSimpleStreamsAgentFinderAgentBinaryFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSimpleStreamsAgentFinderAgentBinaryFilterCall) DoAndReturn(f func(context.Context, tools.SimplestreamsFetcher, environs.BootstrapEnviron, int, int, []string, tools0.Filter) (tools0.List, error)) *MockSimpleStreamsAgentFinderAgentBinaryFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPreferredSimpleStreams mocks base method.
func (m *MockSimpleStreamsAgentFinder) GetPreferredSimpleStreams(arg0 *semversion.Number, arg1 bool, arg2 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredSimpleStreams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPreferredSimpleStreams indicates an expected call of GetPreferredSimpleStreams.
func (mr *MockSimpleStreamsAgentFinderMockRecorder) GetPreferredSimpleStreams(arg0, arg1, arg2 any) *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredSimpleStreams", reflect.TypeOf((*MockSimpleStreamsAgentFinder)(nil).GetPreferredSimpleStreams), arg0, arg1, arg2)
	return &MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall{Call: call}
}

// MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall wrap *gomock.Call
type MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall) Return(arg0 []string) *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall) Do(f func(*semversion.Number, bool, string) []string) *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall) DoAndReturn(f func(*semversion.Number, bool, string) []string) *MockSimpleStreamsAgentFinderGetPreferredSimpleStreamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProvider mocks base method.
func (m *MockSimpleStreamsAgentFinder) GetProvider(arg0 context.Context) (environs.BootstrapEnviron, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider", arg0)
	ret0, _ := ret[0].(environs.BootstrapEnviron)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockSimpleStreamsAgentFinderMockRecorder) GetProvider(arg0 any) *MockSimpleStreamsAgentFinderGetProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockSimpleStreamsAgentFinder)(nil).GetProvider), arg0)
	return &MockSimpleStreamsAgentFinderGetProviderCall{Call: call}
}

// MockSimpleStreamsAgentFinderGetProviderCall wrap *gomock.Call
type MockSimpleStreamsAgentFinderGetProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSimpleStreamsAgentFinderGetProviderCall) Return(arg0 environs.BootstrapEnviron, arg1 error) *MockSimpleStreamsAgentFinderGetProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSimpleStreamsAgentFinderGetProviderCall) Do(f func(context.Context) (environs.BootstrapEnviron, error)) *MockSimpleStreamsAgentFinderGetProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSimpleStreamsAgentFinderGetProviderCall) DoAndReturn(f func(context.Context) (environs.BootstrapEnviron, error)) *MockSimpleStreamsAgentFinderGetProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentFinderControllerState is a mock of AgentFinderControllerState interface.
type MockAgentFinderControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockAgentFinderControllerStateMockRecorder
}

// MockAgentFinderControllerStateMockRecorder is the mock recorder for MockAgentFinderControllerState.
type MockAgentFinderControllerStateMockRecorder struct {
	mock *MockAgentFinderControllerState
}

// NewMockAgentFinderControllerState creates a new mock instance.
func NewMockAgentFinderControllerState(ctrl *gomock.Controller) *MockAgentFinderControllerState {
	mock := &MockAgentFinderControllerState{ctrl: ctrl}
	mock.recorder = &MockAgentFinderControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentFinderControllerState) EXPECT() *MockAgentFinderControllerStateMockRecorder {
	return m.recorder
}

// GetControllerTargetVersion mocks base method.
func (m *MockAgentFinderControllerState) GetControllerTargetVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerTargetVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerTargetVersion indicates an expected call of GetControllerTargetVersion.
func (mr *MockAgentFinderControllerStateMockRecorder) GetControllerTargetVersion(arg0 any) *MockAgentFinderControllerStateGetControllerTargetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerTargetVersion", reflect.TypeOf((*MockAgentFinderControllerState)(nil).GetControllerTargetVersion), arg0)
	return &MockAgentFinderControllerStateGetControllerTargetVersionCall{Call: call}
}

// MockAgentFinderControllerStateGetControllerTargetVersionCall wrap *gomock.Call
type MockAgentFinderControllerStateGetControllerTargetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentFinderControllerStateGetControllerTargetVersionCall) Return(arg0 semversion.Number, arg1 error) *MockAgentFinderControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentFinderControllerStateGetControllerTargetVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockAgentFinderControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentFinderControllerStateGetControllerTargetVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockAgentFinderControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasAgentBinariesForVersionArchitecturesAndStream mocks base method.
func (m *MockAgentFinderControllerState) HasAgentBinariesForVersionArchitecturesAndStream(arg0 context.Context, arg1 semversion.Number, arg2 []agentbinary.Architecture, arg3 agentbinary.Stream) (map[agentbinary.Architecture]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAgentBinariesForVersionArchitecturesAndStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[agentbinary.Architecture]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAgentBinariesForVersionArchitecturesAndStream indicates an expected call of HasAgentBinariesForVersionArchitecturesAndStream.
func (mr *MockAgentFinderControllerStateMockRecorder) HasAgentBinariesForVersionArchitecturesAndStream(arg0, arg1, arg2, arg3 any) *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAgentBinariesForVersionArchitecturesAndStream", reflect.TypeOf((*MockAgentFinderControllerState)(nil).HasAgentBinariesForVersionArchitecturesAndStream), arg0, arg1, arg2, arg3)
	return &MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall{Call: call}
}

// MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall wrap *gomock.Call
type MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall) Return(arg0 map[agentbinary.Architecture]bool, arg1 error) *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall) Do(f func(context.Context, semversion.Number, []agentbinary.Architecture, agentbinary.Stream) (map[agentbinary.Architecture]bool, error)) *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, []agentbinary.Architecture, agentbinary.Stream) (map[agentbinary.Architecture]bool, error)) *MockAgentFinderControllerStateHasAgentBinariesForVersionArchitecturesAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentFinderControllerModelState is a mock of AgentFinderControllerModelState interface.
type MockAgentFinderControllerModelState struct {
	ctrl     *gomock.Controller
	recorder *MockAgentFinderControllerModelStateMockRecorder
}

// MockAgentFinderControllerModelStateMockRecorder is the mock recorder for MockAgentFinderControllerModelState.
type MockAgentFinderControllerModelStateMockRecorder struct {
	mock *MockAgentFinderControllerModelState
}

// NewMockAgentFinderControllerModelState creates a new mock instance.
func NewMockAgentFinderControllerModelState(ctrl *gomock.Controller) *MockAgentFinderControllerModelState {
	mock := &MockAgentFinderControllerModelState{ctrl: ctrl}
	mock.recorder = &MockAgentFinderControllerModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentFinderControllerModelState) EXPECT() *MockAgentFinderControllerModelStateMockRecorder {
	return m.recorder
}

// GetModelAgentStream mocks base method.
func (m *MockAgentFinderControllerModelState) GetModelAgentStream(arg0 context.Context) (agentbinary.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelAgentStream", arg0)
	ret0, _ := ret[0].(agentbinary.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelAgentStream indicates an expected call of GetModelAgentStream.
func (mr *MockAgentFinderControllerModelStateMockRecorder) GetModelAgentStream(arg0 any) *MockAgentFinderControllerModelStateGetModelAgentStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelAgentStream", reflect.TypeOf((*MockAgentFinderControllerModelState)(nil).GetModelAgentStream), arg0)
	return &MockAgentFinderControllerModelStateGetModelAgentStreamCall{Call: call}
}

// MockAgentFinderControllerModelStateGetModelAgentStreamCall wrap *gomock.Call
type MockAgentFinderControllerModelStateGetModelAgentStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentFinderControllerModelStateGetModelAgentStreamCall) Return(arg0 agentbinary.Stream, arg1 error) *MockAgentFinderControllerModelStateGetModelAgentStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentFinderControllerModelStateGetModelAgentStreamCall) Do(f func(context.Context) (agentbinary.Stream, error)) *MockAgentFinderControllerModelStateGetModelAgentStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentFinderControllerModelStateGetModelAgentStreamCall) DoAndReturn(f func(context.Context) (agentbinary.Stream, error)) *MockAgentFinderControllerModelStateGetModelAgentStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasAgentBinariesForVersionAndArchitectures mocks base method.
func (m *MockAgentFinderControllerModelState) HasAgentBinariesForVersionAndArchitectures(arg0 context.Context, arg1 semversion.Number, arg2 []agentbinary.Architecture) (map[agentbinary.Architecture]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAgentBinariesForVersionAndArchitectures", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[agentbinary.Architecture]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAgentBinariesForVersionAndArchitectures indicates an expected call of HasAgentBinariesForVersionAndArchitectures.
func (mr *MockAgentFinderControllerModelStateMockRecorder) HasAgentBinariesForVersionAndArchitectures(arg0, arg1, arg2 any) *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAgentBinariesForVersionAndArchitectures", reflect.TypeOf((*MockAgentFinderControllerModelState)(nil).HasAgentBinariesForVersionAndArchitectures), arg0, arg1, arg2)
	return &MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall{Call: call}
}

// MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall wrap *gomock.Call
type MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall) Return(arg0 map[agentbinary.Architecture]bool, arg1 error) *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall) Do(f func(context.Context, semversion.Number, []agentbinary.Architecture) (map[agentbinary.Architecture]bool, error)) *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall) DoAndReturn(f func(context.Context, semversion.Number, []agentbinary.Architecture) (map[agentbinary.Architecture]bool, error)) *MockAgentFinderControllerModelStateHasAgentBinariesForVersionAndArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
