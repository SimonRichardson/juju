// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/applicationoffers (interfaces: AccessService,ModelService,CrossModelRelationService,RemovalService,CrossModelAuthContext,ControllerService)
//
// Generated by this command:
//
//	mockgen -typed -package applicationoffers -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/applicationoffers AccessService,ModelService,CrossModelRelationService,RemovalService,CrossModelAuthContext,ControllerService
//

// Package applicationoffers is a generated GoMock package.
package applicationoffers

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	crossmodel "github.com/juju/juju/core/crossmodel"
	model "github.com/juju/juju/core/model"
	offer "github.com/juju/juju/core/offer"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	controller "github.com/juju/juju/domain/controller"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *MockAccessService) CreatePermission(arg0 context.Context, arg1 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockAccessServiceMockRecorder) CreatePermission(arg0, arg1 any) *MockAccessServiceCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockAccessService)(nil).CreatePermission), arg0, arg1)
	return &MockAccessServiceCreatePermissionCall{Call: call}
}

// MockAccessServiceCreatePermissionCall wrap *gomock.Call
type MockAccessServiceCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceCreatePermissionCall) Do(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceCreatePermissionCall) DoAndReturn(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockAccessService) GetUserByName(arg0 context.Context, arg1 user.Name) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockAccessServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockAccessServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockAccessService)(nil).GetUserByName), arg0, arg1)
	return &MockAccessServiceGetUserByNameCall{Call: call}
}

// MockAccessServiceGetUserByNameCall wrap *gomock.Call
type MockAccessServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceGetUserByNameCall) Do(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceGetUserByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockAccessServiceUpdatePermissionCall{Call: call}
}

// MockAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceUpdatePermissionCall) Return(arg0 error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// GetModelByNameAndQualifier mocks base method.
func (m *MockModelService) GetModelByNameAndQualifier(arg0 context.Context, arg1 string, arg2 model.Qualifier) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByNameAndQualifier", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByNameAndQualifier indicates an expected call of GetModelByNameAndQualifier.
func (mr *MockModelServiceMockRecorder) GetModelByNameAndQualifier(arg0, arg1, arg2 any) *MockModelServiceGetModelByNameAndQualifierCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByNameAndQualifier", reflect.TypeOf((*MockModelService)(nil).GetModelByNameAndQualifier), arg0, arg1, arg2)
	return &MockModelServiceGetModelByNameAndQualifierCall{Call: call}
}

// MockModelServiceGetModelByNameAndQualifierCall wrap *gomock.Call
type MockModelServiceGetModelByNameAndQualifierCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelByNameAndQualifierCall) Return(arg0 model.Model, arg1 error) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelByNameAndQualifierCall) Do(f func(context.Context, string, model.Qualifier) (model.Model, error)) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelByNameAndQualifierCall) DoAndReturn(f func(context.Context, string, model.Qualifier) (model.Model, error)) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// GetOfferUUID mocks base method.
func (m *MockCrossModelRelationService) GetOfferUUID(arg0 context.Context, arg1 crossmodel.OfferURL) (offer.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(offer.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUID indicates an expected call of GetOfferUUID.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOfferUUID(arg0, arg1 any) *MockCrossModelRelationServiceGetOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUID", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOfferUUID), arg0, arg1)
	return &MockCrossModelRelationServiceGetOfferUUIDCall{Call: call}
}

// MockCrossModelRelationServiceGetOfferUUIDCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOfferUUIDCall) Return(arg0 offer.UUID, arg1 error) *MockCrossModelRelationServiceGetOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOfferUUIDCall) Do(f func(context.Context, crossmodel.OfferURL) (offer.UUID, error)) *MockCrossModelRelationServiceGetOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOfferUUIDCall) DoAndReturn(f func(context.Context, crossmodel.OfferURL) (offer.UUID, error)) *MockCrossModelRelationServiceGetOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOffers mocks base method.
func (m *MockCrossModelRelationService) GetOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffers", arg0, arg1)
	ret0, _ := ret[0].([]*crossmodelrelation.OfferDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffers indicates an expected call of GetOffers.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOffers(arg0, arg1 any) *MockCrossModelRelationServiceGetOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffers", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOffers), arg0, arg1)
	return &MockCrossModelRelationServiceGetOffersCall{Call: call}
}

// MockCrossModelRelationServiceGetOffersCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOffersCall) Return(arg0 []*crossmodelrelation.OfferDetail, arg1 error) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Offer mocks base method.
func (m *MockCrossModelRelationService) Offer(arg0 context.Context, arg1 crossmodelrelation.ApplicationOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Offer indicates an expected call of Offer.
func (mr *MockCrossModelRelationServiceMockRecorder) Offer(arg0, arg1 any) *MockCrossModelRelationServiceOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockCrossModelRelationService)(nil).Offer), arg0, arg1)
	return &MockCrossModelRelationServiceOfferCall{Call: call}
}

// MockCrossModelRelationServiceOfferCall wrap *gomock.Call
type MockCrossModelRelationServiceOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceOfferCall) Return(arg0 error) *MockCrossModelRelationServiceOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceOfferCall) Do(f func(context.Context, crossmodelrelation.ApplicationOfferArgs) error) *MockCrossModelRelationServiceOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceOfferCall) DoAndReturn(f func(context.Context, crossmodelrelation.ApplicationOfferArgs) error) *MockCrossModelRelationServiceOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// RemoveOffer mocks base method.
func (m *MockRemovalService) RemoveOffer(arg0 context.Context, arg1 offer.UUID, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOffer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOffer indicates an expected call of RemoveOffer.
func (mr *MockRemovalServiceMockRecorder) RemoveOffer(arg0, arg1, arg2 any) *MockRemovalServiceRemoveOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOffer", reflect.TypeOf((*MockRemovalService)(nil).RemoveOffer), arg0, arg1, arg2)
	return &MockRemovalServiceRemoveOfferCall{Call: call}
}

// MockRemovalServiceRemoveOfferCall wrap *gomock.Call
type MockRemovalServiceRemoveOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveOfferCall) Return(arg0 error) *MockRemovalServiceRemoveOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveOfferCall) Do(f func(context.Context, offer.UUID, bool) error) *MockRemovalServiceRemoveOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveOfferCall) DoAndReturn(f func(context.Context, offer.UUID, bool) error) *MockRemovalServiceRemoveOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelAuthContext is a mock of CrossModelAuthContext interface.
type MockCrossModelAuthContext struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelAuthContextMockRecorder
}

// MockCrossModelAuthContextMockRecorder is the mock recorder for MockCrossModelAuthContext.
type MockCrossModelAuthContextMockRecorder struct {
	mock *MockCrossModelAuthContext
}

// NewMockCrossModelAuthContext creates a new mock instance.
func NewMockCrossModelAuthContext(ctrl *gomock.Controller) *MockCrossModelAuthContext {
	mock := &MockCrossModelAuthContext{ctrl: ctrl}
	mock.recorder = &MockCrossModelAuthContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelAuthContext) EXPECT() *MockCrossModelAuthContextMockRecorder {
	return m.recorder
}

// CreateConsumeOfferMacaroon mocks base method.
func (m *MockCrossModelAuthContext) CreateConsumeOfferMacaroon(arg0 context.Context, arg1 model.UUID, arg2, arg3 string, arg4 bakery.Version) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumeOfferMacaroon", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumeOfferMacaroon indicates an expected call of CreateConsumeOfferMacaroon.
func (mr *MockCrossModelAuthContextMockRecorder) CreateConsumeOfferMacaroon(arg0, arg1, arg2, arg3, arg4 any) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumeOfferMacaroon", reflect.TypeOf((*MockCrossModelAuthContext)(nil).CreateConsumeOfferMacaroon), arg0, arg1, arg2, arg3, arg4)
	return &MockCrossModelAuthContextCreateConsumeOfferMacaroonCall{Call: call}
}

// MockCrossModelAuthContextCreateConsumeOfferMacaroonCall wrap *gomock.Call
type MockCrossModelAuthContextCreateConsumeOfferMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) Do(f func(context.Context, model.UUID, string, string, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) DoAndReturn(f func(context.Context, model.UUID, string, string, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerService is a mock of ControllerService interface.
type MockControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServiceMockRecorder
}

// MockControllerServiceMockRecorder is the mock recorder for MockControllerService.
type MockControllerServiceMockRecorder struct {
	mock *MockControllerService
}

// NewMockControllerService creates a new mock instance.
func NewMockControllerService(ctrl *gomock.Controller) *MockControllerService {
	mock := &MockControllerService{ctrl: ctrl}
	mock.recorder = &MockControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerService) EXPECT() *MockControllerServiceMockRecorder {
	return m.recorder
}

// GetControllerInfo mocks base method.
func (m *MockControllerService) GetControllerInfo(arg0 context.Context) (controller.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerInfo", arg0)
	ret0, _ := ret[0].(controller.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerInfo indicates an expected call of GetControllerInfo.
func (mr *MockControllerServiceMockRecorder) GetControllerInfo(arg0 any) *MockControllerServiceGetControllerInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerInfo", reflect.TypeOf((*MockControllerService)(nil).GetControllerInfo), arg0)
	return &MockControllerServiceGetControllerInfoCall{Call: call}
}

// MockControllerServiceGetControllerInfoCall wrap *gomock.Call
type MockControllerServiceGetControllerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerServiceGetControllerInfoCall) Return(arg0 controller.ControllerInfo, arg1 error) *MockControllerServiceGetControllerInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerServiceGetControllerInfoCall) Do(f func(context.Context) (controller.ControllerInfo, error)) *MockControllerServiceGetControllerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerServiceGetControllerInfoCall) DoAndReturn(f func(context.Context) (controller.ControllerInfo, error)) *MockControllerServiceGetControllerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
