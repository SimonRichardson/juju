// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/machinemanager (interfaces: Authorizer,CharmhubClient,ControllerConfigService,MachineService,ApplicationService,NetworkService,KeyUpdaterService,ModelConfigService,BlockCommandService,AgentBinaryService,AgentPasswordService,ControllerNodeService,StatusService,RemovalService)
//
// Generated by this command:
//
//	mockgen -typed -package machinemanager -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/machinemanager Authorizer,CharmhubClient,ControllerConfigService,MachineService,ApplicationService,NetworkService,KeyUpdaterService,ModelConfigService,BlockCommandService,AgentBinaryService,AgentPasswordService,ControllerNodeService,StatusService,RemovalService
//

// Package machinemanager is a generated GoMock package.
package machinemanager

import (
	context "context"
	reflect "reflect"
	time "time"

	controller "github.com/juju/juju/controller"
	base "github.com/juju/juju/core/base"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	network "github.com/juju/juju/core/network"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	agentbinary "github.com/juju/juju/domain/agentbinary"
	service "github.com/juju/juju/domain/agentbinary/service"
	blockcommand "github.com/juju/juju/domain/blockcommand"
	machine0 "github.com/juju/juju/domain/machine"
	service0 "github.com/juju/juju/domain/machine/service"
	removal "github.com/juju/juju/domain/removal"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	charmhub "github.com/juju/juju/internal/charmhub"
	transport "github.com/juju/juju/internal/charmhub/transport"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// AuthClient mocks base method.
func (m *MockAuthorizer) AuthClient() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClient")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthClient indicates an expected call of AuthClient.
func (mr *MockAuthorizerMockRecorder) AuthClient() *MockAuthorizerAuthClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClient", reflect.TypeOf((*MockAuthorizer)(nil).AuthClient))
	return &MockAuthorizerAuthClientCall{Call: call}
}

// MockAuthorizerAuthClientCall wrap *gomock.Call
type MockAuthorizerAuthClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerAuthClientCall) Return(arg0 bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerAuthClientCall) Do(f func() bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerAuthClientCall) DoAndReturn(f func() bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanRead mocks base method.
func (m *MockAuthorizer) CanRead(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanRead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanRead indicates an expected call of CanRead.
func (mr *MockAuthorizerMockRecorder) CanRead(arg0 any) *MockAuthorizerCanReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanRead", reflect.TypeOf((*MockAuthorizer)(nil).CanRead), arg0)
	return &MockAuthorizerCanReadCall{Call: call}
}

// MockAuthorizerCanReadCall wrap *gomock.Call
type MockAuthorizerCanReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerCanReadCall) Return(arg0 error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerCanReadCall) Do(f func(context.Context) error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerCanReadCall) DoAndReturn(f func(context.Context) error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanWrite mocks base method.
func (m *MockAuthorizer) CanWrite(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWrite", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanWrite indicates an expected call of CanWrite.
func (mr *MockAuthorizerMockRecorder) CanWrite(arg0 any) *MockAuthorizerCanWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWrite", reflect.TypeOf((*MockAuthorizer)(nil).CanWrite), arg0)
	return &MockAuthorizerCanWriteCall{Call: call}
}

// MockAuthorizerCanWriteCall wrap *gomock.Call
type MockAuthorizerCanWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerCanWriteCall) Return(arg0 error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerCanWriteCall) Do(f func(context.Context) error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerCanWriteCall) DoAndReturn(f func(context.Context) error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmhubClient is a mock of CharmhubClient interface.
type MockCharmhubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmhubClientMockRecorder
}

// MockCharmhubClientMockRecorder is the mock recorder for MockCharmhubClient.
type MockCharmhubClientMockRecorder struct {
	mock *MockCharmhubClient
}

// NewMockCharmhubClient creates a new mock instance.
func NewMockCharmhubClient(ctrl *gomock.Controller) *MockCharmhubClient {
	mock := &MockCharmhubClient{ctrl: ctrl}
	mock.recorder = &MockCharmhubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmhubClient) EXPECT() *MockCharmhubClientMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockCharmhubClient) Refresh(arg0 context.Context, arg1 charmhub.RefreshConfig) ([]transport.RefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].([]transport.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockCharmhubClientMockRecorder) Refresh(arg0, arg1 any) *MockCharmhubClientRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockCharmhubClient)(nil).Refresh), arg0, arg1)
	return &MockCharmhubClientRefreshCall{Call: call}
}

// MockCharmhubClientRefreshCall wrap *gomock.Call
type MockCharmhubClientRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmhubClientRefreshCall) Return(arg0 []transport.RefreshResponse, arg1 error) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmhubClientRefreshCall) Do(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmhubClientRefreshCall) DoAndReturn(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// AddMachine mocks base method.
func (m *MockMachineService) AddMachine(arg0 context.Context, arg1 machine0.AddMachineArgs) (service0.AddMachineResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachine", arg0, arg1)
	ret0, _ := ret[0].(service0.AddMachineResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMachine indicates an expected call of AddMachine.
func (mr *MockMachineServiceMockRecorder) AddMachine(arg0, arg1 any) *MockMachineServiceAddMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachine", reflect.TypeOf((*MockMachineService)(nil).AddMachine), arg0, arg1)
	return &MockMachineServiceAddMachineCall{Call: call}
}

// MockMachineServiceAddMachineCall wrap *gomock.Call
type MockMachineServiceAddMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAddMachineCall) Return(arg0 service0.AddMachineResults, arg1 error) *MockMachineServiceAddMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAddMachineCall) Do(f func(context.Context, machine0.AddMachineArgs) (service0.AddMachineResults, error)) *MockMachineServiceAddMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAddMachineCall) DoAndReturn(f func(context.Context, machine0.AddMachineArgs) (service0.AddMachineResults, error)) *MockMachineServiceAddMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllMachineNames mocks base method.
func (m *MockMachineService) AllMachineNames(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachineNames", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachineNames indicates an expected call of AllMachineNames.
func (mr *MockMachineServiceMockRecorder) AllMachineNames(arg0 any) *MockMachineServiceAllMachineNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachineNames", reflect.TypeOf((*MockMachineService)(nil).AllMachineNames), arg0)
	return &MockMachineServiceAllMachineNamesCall{Call: call}
}

// MockMachineServiceAllMachineNamesCall wrap *gomock.Call
type MockMachineServiceAllMachineNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAllMachineNamesCall) Return(arg0 []machine.Name, arg1 error) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAllMachineNamesCall) Do(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAllMachineNamesCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceTypesFetcher mocks base method.
func (m *MockMachineService) GetInstanceTypesFetcher(arg0 context.Context) (environs.InstanceTypesFetcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTypesFetcher", arg0)
	ret0, _ := ret[0].(environs.InstanceTypesFetcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTypesFetcher indicates an expected call of GetInstanceTypesFetcher.
func (mr *MockMachineServiceMockRecorder) GetInstanceTypesFetcher(arg0 any) *MockMachineServiceGetInstanceTypesFetcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTypesFetcher", reflect.TypeOf((*MockMachineService)(nil).GetInstanceTypesFetcher), arg0)
	return &MockMachineServiceGetInstanceTypesFetcherCall{Call: call}
}

// MockMachineServiceGetInstanceTypesFetcherCall wrap *gomock.Call
type MockMachineServiceGetInstanceTypesFetcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceTypesFetcherCall) Return(arg0 environs.InstanceTypesFetcher, arg1 error) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceTypesFetcherCall) Do(f func(context.Context) (environs.InstanceTypesFetcher, error)) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceTypesFetcherCall) DoAndReturn(f func(context.Context) (environs.InstanceTypesFetcher, error)) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineBase mocks base method.
func (m *MockMachineService) GetMachineBase(arg0 context.Context, arg1 machine.Name) (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineBase", arg0, arg1)
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineBase indicates an expected call of GetMachineBase.
func (mr *MockMachineServiceMockRecorder) GetMachineBase(arg0, arg1 any) *MockMachineServiceGetMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineBase", reflect.TypeOf((*MockMachineService)(nil).GetMachineBase), arg0, arg1)
	return &MockMachineServiceGetMachineBaseCall{Call: call}
}

// MockMachineServiceGetMachineBaseCall wrap *gomock.Call
type MockMachineServiceGetMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineBaseCall) Return(arg0 base.Base, arg1 error) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineBaseCall) Do(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineBaseCall) DoAndReturn(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineContainers mocks base method.
func (m *MockMachineService) GetMachineContainers(arg0 context.Context, arg1 machine.UUID) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineContainers", arg0, arg1)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineContainers indicates an expected call of GetMachineContainers.
func (mr *MockMachineServiceMockRecorder) GetMachineContainers(arg0, arg1 any) *MockMachineServiceGetMachineContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineContainers", reflect.TypeOf((*MockMachineService)(nil).GetMachineContainers), arg0, arg1)
	return &MockMachineServiceGetMachineContainersCall{Call: call}
}

// MockMachineServiceGetMachineContainersCall wrap *gomock.Call
type MockMachineServiceGetMachineContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineContainersCall) Return(arg0 []machine.Name, arg1 error) *MockMachineServiceGetMachineContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineContainersCall) Do(f func(context.Context, machine.UUID) ([]machine.Name, error)) *MockMachineServiceGetMachineContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineContainersCall) DoAndReturn(f func(context.Context, machine.UUID) ([]machine.Name, error)) *MockMachineServiceGetMachineContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetKeepInstance mocks base method.
func (m *MockMachineService) SetKeepInstance(arg0 context.Context, arg1 machine.Name, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepInstance indicates an expected call of SetKeepInstance.
func (mr *MockMachineServiceMockRecorder) SetKeepInstance(arg0, arg1, arg2 any) *MockMachineServiceSetKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepInstance", reflect.TypeOf((*MockMachineService)(nil).SetKeepInstance), arg0, arg1, arg2)
	return &MockMachineServiceSetKeepInstanceCall{Call: call}
}

// MockMachineServiceSetKeepInstanceCall wrap *gomock.Call
type MockMachineServiceSetKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceSetKeepInstanceCall) Return(arg0 error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceSetKeepInstanceCall) Do(f func(context.Context, machine.Name, bool) error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceSetKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name, bool) error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldKeepInstance mocks base method.
func (m *MockMachineService) ShouldKeepInstance(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldKeepInstance", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldKeepInstance indicates an expected call of ShouldKeepInstance.
func (mr *MockMachineServiceMockRecorder) ShouldKeepInstance(arg0, arg1 any) *MockMachineServiceShouldKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldKeepInstance", reflect.TypeOf((*MockMachineService)(nil).ShouldKeepInstance), arg0, arg1)
	return &MockMachineServiceShouldKeepInstanceCall{Call: call}
}

// MockMachineServiceShouldKeepInstanceCall wrap *gomock.Call
type MockMachineServiceShouldKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceShouldKeepInstanceCall) Return(arg0 bool, arg1 error) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceShouldKeepInstanceCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceShouldKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetUnitNamesOnMachine mocks base method.
func (m *MockApplicationService) GetUnitNamesOnMachine(arg0 context.Context, arg1 machine.Name) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesOnMachine", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesOnMachine indicates an expected call of GetUnitNamesOnMachine.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesOnMachine(arg0, arg1 any) *MockApplicationServiceGetUnitNamesOnMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesOnMachine", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesOnMachine), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesOnMachineCall{Call: call}
}

// MockApplicationServiceGetUnitNamesOnMachineCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesOnMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Do(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) DoAndReturn(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockKeyUpdaterService is a mock of KeyUpdaterService interface.
type MockKeyUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyUpdaterServiceMockRecorder
}

// MockKeyUpdaterServiceMockRecorder is the mock recorder for MockKeyUpdaterService.
type MockKeyUpdaterServiceMockRecorder struct {
	mock *MockKeyUpdaterService
}

// NewMockKeyUpdaterService creates a new mock instance.
func NewMockKeyUpdaterService(ctrl *gomock.Controller) *MockKeyUpdaterService {
	mock := &MockKeyUpdaterService{ctrl: ctrl}
	mock.recorder = &MockKeyUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyUpdaterService) EXPECT() *MockKeyUpdaterServiceMockRecorder {
	return m.recorder
}

// GetAuthorisedKeysForMachine mocks base method.
func (m *MockKeyUpdaterService) GetAuthorisedKeysForMachine(arg0 context.Context, arg1 machine.Name) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorisedKeysForMachine", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorisedKeysForMachine indicates an expected call of GetAuthorisedKeysForMachine.
func (mr *MockKeyUpdaterServiceMockRecorder) GetAuthorisedKeysForMachine(arg0, arg1 any) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorisedKeysForMachine", reflect.TypeOf((*MockKeyUpdaterService)(nil).GetAuthorisedKeysForMachine), arg0, arg1)
	return &MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall{Call: call}
}

// MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall wrap *gomock.Call
type MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) Return(arg0 []string, arg1 error) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) Do(f func(context.Context, machine.Name) ([]string, error)) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) DoAndReturn(f func(context.Context, machine.Name) ([]string, error)) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockCommandService is a mock of BlockCommandService interface.
type MockBlockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCommandServiceMockRecorder
}

// MockBlockCommandServiceMockRecorder is the mock recorder for MockBlockCommandService.
type MockBlockCommandServiceMockRecorder struct {
	mock *MockBlockCommandService
}

// NewMockBlockCommandService creates a new mock instance.
func NewMockBlockCommandService(ctrl *gomock.Controller) *MockBlockCommandService {
	mock := &MockBlockCommandService{ctrl: ctrl}
	mock.recorder = &MockBlockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCommandService) EXPECT() *MockBlockCommandServiceMockRecorder {
	return m.recorder
}

// GetBlockSwitchedOn mocks base method.
func (m *MockBlockCommandService) GetBlockSwitchedOn(arg0 context.Context, arg1 blockcommand.BlockType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSwitchedOn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSwitchedOn indicates an expected call of GetBlockSwitchedOn.
func (mr *MockBlockCommandServiceMockRecorder) GetBlockSwitchedOn(arg0, arg1 any) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSwitchedOn", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlockSwitchedOn), arg0, arg1)
	return &MockBlockCommandServiceGetBlockSwitchedOnCall{Call: call}
}

// MockBlockCommandServiceGetBlockSwitchedOnCall wrap *gomock.Call
type MockBlockCommandServiceGetBlockSwitchedOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Return(arg0 string, arg1 error) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Do(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockBlockCommandService) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockCommandServiceMockRecorder) GetBlocks(arg0 any) *MockBlockCommandServiceGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlocks), arg0)
	return &MockBlockCommandServiceGetBlocksCall{Call: call}
}

// MockBlockCommandServiceGetBlocksCall wrap *gomock.Call
type MockBlockCommandServiceGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryService is a mock of AgentBinaryService interface.
type MockAgentBinaryService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryServiceMockRecorder
}

// MockAgentBinaryServiceMockRecorder is the mock recorder for MockAgentBinaryService.
type MockAgentBinaryServiceMockRecorder struct {
	mock *MockAgentBinaryService
}

// NewMockAgentBinaryService creates a new mock instance.
func NewMockAgentBinaryService(ctrl *gomock.Controller) *MockAgentBinaryService {
	mock := &MockAgentBinaryService{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryService) EXPECT() *MockAgentBinaryServiceMockRecorder {
	return m.recorder
}

// GetEnvironAgentBinariesFinder mocks base method.
func (m *MockAgentBinaryService) GetEnvironAgentBinariesFinder() service.EnvironAgentBinariesFinderFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironAgentBinariesFinder")
	ret0, _ := ret[0].(service.EnvironAgentBinariesFinderFunc)
	return ret0
}

// GetEnvironAgentBinariesFinder indicates an expected call of GetEnvironAgentBinariesFinder.
func (mr *MockAgentBinaryServiceMockRecorder) GetEnvironAgentBinariesFinder() *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironAgentBinariesFinder", reflect.TypeOf((*MockAgentBinaryService)(nil).GetEnvironAgentBinariesFinder))
	return &MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall{Call: call}
}

// MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall wrap *gomock.Call
type MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Return(arg0 service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Do(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) DoAndReturn(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAgentBinaries mocks base method.
func (m *MockAgentBinaryService) ListAgentBinaries(arg0 context.Context) ([]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentBinaries", arg0)
	ret0, _ := ret[0].([]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentBinaries indicates an expected call of ListAgentBinaries.
func (mr *MockAgentBinaryServiceMockRecorder) ListAgentBinaries(arg0 any) *MockAgentBinaryServiceListAgentBinariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentBinaries", reflect.TypeOf((*MockAgentBinaryService)(nil).ListAgentBinaries), arg0)
	return &MockAgentBinaryServiceListAgentBinariesCall{Call: call}
}

// MockAgentBinaryServiceListAgentBinariesCall wrap *gomock.Call
type MockAgentBinaryServiceListAgentBinariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryServiceListAgentBinariesCall) Return(arg0 []agentbinary.Metadata, arg1 error) *MockAgentBinaryServiceListAgentBinariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryServiceListAgentBinariesCall) Do(f func(context.Context) ([]agentbinary.Metadata, error)) *MockAgentBinaryServiceListAgentBinariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryServiceListAgentBinariesCall) DoAndReturn(f func(context.Context) ([]agentbinary.Metadata, error)) *MockAgentBinaryServiceListAgentBinariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// SetMachinePassword mocks base method.
func (m *MockAgentPasswordService) SetMachinePassword(arg0 context.Context, arg1 machine.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePassword indicates an expected call of SetMachinePassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetMachinePassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetMachinePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetMachinePassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetMachinePasswordCall{Call: call}
}

// MockAgentPasswordServiceSetMachinePasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetMachinePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Do(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetMachinePasswordCall) DoAndReturn(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForAgents mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForAgents(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgents indicates an expected call of GetAllAPIAddressesForAgents.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForAgents(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgents", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForAgents), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForAgentsCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForAgentsCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetInstanceStatus mocks base method.
func (m *MockStatusService) GetInstanceStatus(arg0 context.Context, arg1 machine.Name) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceStatus indicates an expected call of GetInstanceStatus.
func (mr *MockStatusServiceMockRecorder) GetInstanceStatus(arg0, arg1 any) *MockStatusServiceGetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStatus", reflect.TypeOf((*MockStatusService)(nil).GetInstanceStatus), arg0, arg1)
	return &MockStatusServiceGetInstanceStatusCall{Call: call}
}

// MockStatusServiceGetInstanceStatusCall wrap *gomock.Call
type MockStatusServiceGetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetInstanceStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetInstanceStatusCall) Do(f func(context.Context, machine.Name) (status.StatusInfo, error)) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetInstanceStatusCall) DoAndReturn(f func(context.Context, machine.Name) (status.StatusInfo, error)) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstanceStatus mocks base method.
func (m *MockStatusService) SetInstanceStatus(arg0 context.Context, arg1 machine.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceStatus indicates an expected call of SetInstanceStatus.
func (mr *MockStatusServiceMockRecorder) SetInstanceStatus(arg0, arg1, arg2 any) *MockStatusServiceSetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceStatus", reflect.TypeOf((*MockStatusService)(nil).SetInstanceStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetInstanceStatusCall{Call: call}
}

// MockStatusServiceSetInstanceStatusCall wrap *gomock.Call
type MockStatusServiceSetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetInstanceStatusCall) Return(arg0 error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetInstanceStatusCall) Do(f func(context.Context, machine.Name, status.StatusInfo) error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetInstanceStatusCall) DoAndReturn(f func(context.Context, machine.Name, status.StatusInfo) error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// RemoveMachine mocks base method.
func (m *MockRemovalService) RemoveMachine(arg0 context.Context, arg1 machine.UUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMachine", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMachine indicates an expected call of RemoveMachine.
func (mr *MockRemovalServiceMockRecorder) RemoveMachine(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMachine", reflect.TypeOf((*MockRemovalService)(nil).RemoveMachine), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveMachineCall{Call: call}
}

// MockRemovalServiceRemoveMachineCall wrap *gomock.Call
type MockRemovalServiceRemoveMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveMachineCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveMachineCall) Do(f func(context.Context, machine.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveMachineCall) DoAndReturn(f func(context.Context, machine.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
