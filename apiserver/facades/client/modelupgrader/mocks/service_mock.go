// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelupgrader (interfaces: ControllerUpgraderService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelupgrader ControllerUpgraderService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	agentbinary "github.com/juju/juju/domain/agentbinary"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerUpgraderService is a mock of ControllerUpgraderService interface.
type MockControllerUpgraderService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerUpgraderServiceMockRecorder
}

// MockControllerUpgraderServiceMockRecorder is the mock recorder for MockControllerUpgraderService.
type MockControllerUpgraderServiceMockRecorder struct {
	mock *MockControllerUpgraderService
}

// NewMockControllerUpgraderService creates a new mock instance.
func NewMockControllerUpgraderService(ctrl *gomock.Controller) *MockControllerUpgraderService {
	mock := &MockControllerUpgraderService{ctrl: ctrl}
	mock.recorder = &MockControllerUpgraderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerUpgraderService) EXPECT() *MockControllerUpgraderServiceMockRecorder {
	return m.recorder
}

// RunPreUpgradeChecks mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecks(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecks", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecks indicates an expected call of RunPreUpgradeChecks.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecks(arg0 any) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecks", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecks), arg0)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersion mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreUpgradeChecksToVersion indicates an expected call of RunPreUpgradeChecksToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksToVersion(arg0, arg1 any) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersionWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreUpgradeChecksToVersionWithStream indicates an expected call of RunPreUpgradeChecksToVersionWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksToVersionWithStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersionWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersionWithStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) Return(arg0 error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksWithStream(arg0 context.Context, arg1 agentbinary.Stream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecksWithStream indicates an expected call of RunPreUpgradeChecksWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksWithStream(arg0, arg1 any) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) Do(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) DoAndReturn(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeController mocks base method.
func (m *MockControllerUpgraderService) UpgradeController(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeController", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeController indicates an expected call of UpgradeController.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeController(arg0 any) *MockControllerUpgraderServiceUpgradeControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeController", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeController), arg0)
	return &MockControllerUpgraderServiceUpgradeControllerCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersion mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersion indicates an expected call of UpgradeControllerToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersion(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersionWithStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersionWithStream indicates an expected call of UpgradeControllerToVersionWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersionWithStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersionWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersionWithStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerWithStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerWithStream(arg0 context.Context, arg1 agentbinary.Stream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeControllerWithStream indicates an expected call of UpgradeControllerWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerWithStream(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Do(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) DoAndReturn(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
