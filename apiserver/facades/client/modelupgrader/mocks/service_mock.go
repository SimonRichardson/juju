// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelupgrader (interfaces: ControllerUpgraderService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelupgrader ControllerUpgraderService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	modelagent "github.com/juju/juju/domain/modelagent"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerUpgraderService is a mock of ControllerUpgraderService interface.
type MockControllerUpgraderService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerUpgraderServiceMockRecorder
}

// MockControllerUpgraderServiceMockRecorder is the mock recorder for MockControllerUpgraderService.
type MockControllerUpgraderServiceMockRecorder struct {
	mock *MockControllerUpgraderService
}

// NewMockControllerUpgraderService creates a new mock instance.
func NewMockControllerUpgraderService(ctrl *gomock.Controller) *MockControllerUpgraderService {
	mock := &MockControllerUpgraderService{ctrl: ctrl}
	mock.recorder = &MockControllerUpgraderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerUpgraderService) EXPECT() *MockControllerUpgraderServiceMockRecorder {
	return m.recorder
}

// CanUpgradeController mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecks(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecks", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanUpgradeController indicates an expected call of CanUpgradeController.
func (mr *MockControllerUpgraderServiceMockRecorder) CanUpgradeController(arg0 any) *MockControllerUpgraderServiceCanUpgradeControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecks", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecks), arg0)
	return &MockControllerUpgraderServiceCanUpgradeControllerCall{Call: call}
}

// MockControllerUpgraderServiceCanUpgradeControllerCall wrap *gomock.Call
type MockControllerUpgraderServiceCanUpgradeControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceCanUpgradeControllerCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceCanUpgradeControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceCanUpgradeControllerCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceCanUpgradeControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceCanUpgradeControllerCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceCanUpgradeControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanUpgradeControllerToVersion mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUpgradeControllerToVersion indicates an expected call of CanUpgradeControllerToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) CanUpgradeControllerToVersion(arg0, arg1 any) *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceCanUpgradeControllerToVersionCall{Call: call}
}

// MockControllerUpgraderServiceCanUpgradeControllerToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceCanUpgradeControllerToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanUpgradeControllerToVersionWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUpgradeControllerToVersionWithStream indicates an expected call of CanUpgradeControllerToVersionWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) CanUpgradeControllerToVersionWithStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersionWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersionWithStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall) Return(arg0 error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockControllerUpgraderServiceCanUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanUpgradeControllerWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksWithStream(arg0 context.Context, arg1 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanUpgradeControllerWithStream indicates an expected call of CanUpgradeControllerWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) CanUpgradeControllerWithStream(arg0, arg1 any) *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall) Do(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockControllerUpgraderServiceCanUpgradeControllerWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeController mocks base method.
func (m *MockControllerUpgraderService) UpgradeController(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeController", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeController indicates an expected call of UpgradeController.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeController(arg0 any) *MockControllerUpgraderServiceUpgradeControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeController", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeController), arg0)
	return &MockControllerUpgraderServiceUpgradeControllerCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersion mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersion indicates an expected call of UpgradeControllerToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersion(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersionAndStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersionAndStream(arg0 context.Context, arg1 semversion.Number, arg2 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersionAndStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersionAndStream indicates an expected call of UpgradeControllerToVersionAndStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersionAndStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersionAndStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersionAndStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall) Do(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerWithStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerWithStream(arg0 context.Context, arg1 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeControllerWithStream indicates an expected call of UpgradeControllerWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerWithStream(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Do(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
