// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelupgrader (interfaces: ControllerUpgraderService,ModelAgentService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelupgrader ControllerUpgraderService,ModelAgentService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	agentbinary "github.com/juju/juju/domain/agentbinary"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerUpgraderService is a mock of ControllerUpgraderService interface.
type MockControllerUpgraderService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerUpgraderServiceMockRecorder
}

// MockControllerUpgraderServiceMockRecorder is the mock recorder for MockControllerUpgraderService.
type MockControllerUpgraderServiceMockRecorder struct {
	mock *MockControllerUpgraderService
}

// NewMockControllerUpgraderService creates a new mock instance.
func NewMockControllerUpgraderService(ctrl *gomock.Controller) *MockControllerUpgraderService {
	mock := &MockControllerUpgraderService{ctrl: ctrl}
	mock.recorder = &MockControllerUpgraderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerUpgraderService) EXPECT() *MockControllerUpgraderServiceMockRecorder {
	return m.recorder
}

// RunPreUpgradeChecks mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecks(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecks", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecks indicates an expected call of RunPreUpgradeChecks.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecks(arg0 any) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecks", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecks), arg0)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersion mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreUpgradeChecksToVersion indicates an expected call of RunPreUpgradeChecksToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksToVersion(arg0, arg1 any) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersionWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreUpgradeChecksToVersionWithStream indicates an expected call of RunPreUpgradeChecksToVersionWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksToVersionWithStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersionWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksToVersionWithStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) Return(arg0 error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksWithStream mocks base method.
func (m *MockControllerUpgraderService) RunPreUpgradeChecksWithStream(arg0 context.Context, arg1 agentbinary.Stream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecksWithStream indicates an expected call of RunPreUpgradeChecksWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) RunPreUpgradeChecksWithStream(arg0, arg1 any) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).RunPreUpgradeChecksWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) Do(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall) DoAndReturn(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeController mocks base method.
func (m *MockControllerUpgraderService) UpgradeController(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeController", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeController indicates an expected call of UpgradeController.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeController(arg0 any) *MockControllerUpgraderServiceUpgradeControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeController", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeController), arg0)
	return &MockControllerUpgraderServiceUpgradeControllerCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersion mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersion indicates an expected call of UpgradeControllerToVersion.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersion(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersion", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersion), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerUpgraderServiceUpgradeControllerToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerToVersionWithStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeControllerToVersionWithStream indicates an expected call of UpgradeControllerToVersionWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerToVersionWithStream(arg0, arg1, arg2 any) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerToVersionWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerToVersionWithStream), arg0, arg1, arg2)
	return &MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) Return(arg0 error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.Stream) error) *MockControllerUpgraderServiceUpgradeControllerToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeControllerWithStream mocks base method.
func (m *MockControllerUpgraderService) UpgradeControllerWithStream(arg0 context.Context, arg1 agentbinary.Stream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeControllerWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeControllerWithStream indicates an expected call of UpgradeControllerWithStream.
func (mr *MockControllerUpgraderServiceMockRecorder) UpgradeControllerWithStream(arg0, arg1 any) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeControllerWithStream", reflect.TypeOf((*MockControllerUpgraderService)(nil).UpgradeControllerWithStream), arg0, arg1)
	return &MockControllerUpgraderServiceUpgradeControllerWithStreamCall{Call: call}
}

// MockControllerUpgraderServiceUpgradeControllerWithStreamCall wrap *gomock.Call
type MockControllerUpgraderServiceUpgradeControllerWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) Do(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerUpgraderServiceUpgradeControllerWithStreamCall) DoAndReturn(f func(context.Context, agentbinary.Stream) (semversion.Number, error)) *MockControllerUpgraderServiceUpgradeControllerWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// RunPreUpgradeChecks mocks base method.
func (m *MockModelAgentService) RunPreUpgradeChecks(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecks", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecks indicates an expected call of RunPreUpgradeChecks.
func (mr *MockModelAgentServiceMockRecorder) RunPreUpgradeChecks(arg0 any) *MockModelAgentServiceRunPreUpgradeChecksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecks", reflect.TypeOf((*MockModelAgentService)(nil).RunPreUpgradeChecks), arg0)
	return &MockModelAgentServiceRunPreUpgradeChecksCall{Call: call}
}

// MockModelAgentServiceRunPreUpgradeChecksCall wrap *gomock.Call
type MockModelAgentServiceRunPreUpgradeChecksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceRunPreUpgradeChecksCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceRunPreUpgradeChecksCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceRunPreUpgradeChecksCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersion mocks base method.
func (m *MockModelAgentService) RunPreUpgradeChecksToVersion(arg0 context.Context, arg1 semversion.Number) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersion", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecksToVersion indicates an expected call of RunPreUpgradeChecksToVersion.
func (mr *MockModelAgentServiceMockRecorder) RunPreUpgradeChecksToVersion(arg0, arg1 any) *MockModelAgentServiceRunPreUpgradeChecksToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersion", reflect.TypeOf((*MockModelAgentService)(nil).RunPreUpgradeChecksToVersion), arg0, arg1)
	return &MockModelAgentServiceRunPreUpgradeChecksToVersionCall{Call: call}
}

// MockModelAgentServiceRunPreUpgradeChecksToVersionCall wrap *gomock.Call
type MockModelAgentServiceRunPreUpgradeChecksToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionCall) Do(f func(context.Context, semversion.Number) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionCall) DoAndReturn(f func(context.Context, semversion.Number) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksToVersionWithStream mocks base method.
func (m *MockModelAgentService) RunPreUpgradeChecksToVersionWithStream(arg0 context.Context, arg1 semversion.Number, arg2 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksToVersionWithStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecksToVersionWithStream indicates an expected call of RunPreUpgradeChecksToVersionWithStream.
func (mr *MockModelAgentServiceMockRecorder) RunPreUpgradeChecksToVersionWithStream(arg0, arg1, arg2 any) *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksToVersionWithStream", reflect.TypeOf((*MockModelAgentService)(nil).RunPreUpgradeChecksToVersionWithStream), arg0, arg1, arg2)
	return &MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall{Call: call}
}

// MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall wrap *gomock.Call
type MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall) Do(f func(context.Context, semversion.Number, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall) DoAndReturn(f func(context.Context, semversion.Number, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksToVersionWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunPreUpgradeChecksWithStream mocks base method.
func (m *MockModelAgentService) RunPreUpgradeChecksWithStream(arg0 context.Context, arg1 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreUpgradeChecksWithStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPreUpgradeChecksWithStream indicates an expected call of RunPreUpgradeChecksWithStream.
func (mr *MockModelAgentServiceMockRecorder) RunPreUpgradeChecksWithStream(arg0, arg1 any) *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreUpgradeChecksWithStream", reflect.TypeOf((*MockModelAgentService)(nil).RunPreUpgradeChecksWithStream), arg0, arg1)
	return &MockModelAgentServiceRunPreUpgradeChecksWithStreamCall{Call: call}
}

// MockModelAgentServiceRunPreUpgradeChecksWithStreamCall wrap *gomock.Call
type MockModelAgentServiceRunPreUpgradeChecksWithStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall) Do(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceRunPreUpgradeChecksWithStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) UpgradeModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeModelTargetAgentVersion indicates an expected call of UpgradeModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) UpgradeModelTargetAgentVersion(arg0 any) *MockModelAgentServiceUpgradeModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).UpgradeModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceUpgradeModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceUpgradeModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceUpgradeModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceUpgradeModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceUpgradeModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceUpgradeModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeModelTargetAgentVersionStream mocks base method.
func (m *MockModelAgentService) UpgradeModelTargetAgentVersionStream(arg0 context.Context, arg1 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeModelTargetAgentVersionStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeModelTargetAgentVersionStream indicates an expected call of UpgradeModelTargetAgentVersionStream.
func (mr *MockModelAgentServiceMockRecorder) UpgradeModelTargetAgentVersionStream(arg0, arg1 any) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeModelTargetAgentVersionStream", reflect.TypeOf((*MockModelAgentService)(nil).UpgradeModelTargetAgentVersionStream), arg0, arg1)
	return &MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall{Call: call}
}

// MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall wrap *gomock.Call
type MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall) Do(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeModelTargetAgentVersionStreamTo mocks base method.
func (m *MockModelAgentService) UpgradeModelTargetAgentVersionStreamTo(arg0 context.Context, arg1 semversion.Number, arg2 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeModelTargetAgentVersionStreamTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeModelTargetAgentVersionStreamTo indicates an expected call of UpgradeModelTargetAgentVersionStreamTo.
func (mr *MockModelAgentServiceMockRecorder) UpgradeModelTargetAgentVersionStreamTo(arg0, arg1, arg2 any) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeModelTargetAgentVersionStreamTo", reflect.TypeOf((*MockModelAgentService)(nil).UpgradeModelTargetAgentVersionStreamTo), arg0, arg1, arg2)
	return &MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall{Call: call}
}

// MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall wrap *gomock.Call
type MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall) Return(arg0 error) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall) Do(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall) DoAndReturn(f func(context.Context, semversion.Number, modelagent.AgentStream) error) *MockModelAgentServiceUpgradeModelTargetAgentVersionStreamToCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeModelTargetAgentVersionTo mocks base method.
func (m *MockModelAgentService) UpgradeModelTargetAgentVersionTo(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeModelTargetAgentVersionTo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeModelTargetAgentVersionTo indicates an expected call of UpgradeModelTargetAgentVersionTo.
func (mr *MockModelAgentServiceMockRecorder) UpgradeModelTargetAgentVersionTo(arg0, arg1 any) *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeModelTargetAgentVersionTo", reflect.TypeOf((*MockModelAgentService)(nil).UpgradeModelTargetAgentVersionTo), arg0, arg1)
	return &MockModelAgentServiceUpgradeModelTargetAgentVersionToCall{Call: call}
}

// MockModelAgentServiceUpgradeModelTargetAgentVersionToCall wrap *gomock.Call
type MockModelAgentServiceUpgradeModelTargetAgentVersionToCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall) Return(arg0 error) *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall) Do(f func(context.Context, semversion.Number) error) *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockModelAgentServiceUpgradeModelTargetAgentVersionToCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
