// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/resources (interfaces: ApplicationService,ResourceService,NewCharmRepository)
//
// Generated by this command:
//
//	mockgen -typed -package resources -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/resources ApplicationService,ResourceService,NewCharmRepository
//

// Package resources is a generated GoMock package.
package resources

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	charm "github.com/juju/juju/core/charm"
	resource "github.com/juju/juju/core/resource"
	resource0 "github.com/juju/juju/domain/resource"
	resource1 "github.com/juju/juju/internal/charm/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationUUIDByName mocks base method.
func (m *MockApplicationService) GetApplicationUUIDByName(arg0 context.Context, arg1 string) (application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUUIDByName indicates an expected call of GetApplicationUUIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationUUIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUUIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationUUIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationUUIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationUUIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) Return(arg0 application.UUID, arg1 error) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) Do(f func(context.Context, string) (application.UUID, error)) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) DoAndReturn(f func(context.Context, string) (application.UUID, error)) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// AddResourcesBeforeApplication mocks base method.
func (m *MockResourceService) AddResourcesBeforeApplication(arg0 context.Context, arg1 resource0.AddResourcesBeforeApplicationArgs) ([]resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourcesBeforeApplication", arg0, arg1)
	ret0, _ := ret[0].([]resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddResourcesBeforeApplication indicates an expected call of AddResourcesBeforeApplication.
func (mr *MockResourceServiceMockRecorder) AddResourcesBeforeApplication(arg0, arg1 any) *MockResourceServiceAddResourcesBeforeApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourcesBeforeApplication", reflect.TypeOf((*MockResourceService)(nil).AddResourcesBeforeApplication), arg0, arg1)
	return &MockResourceServiceAddResourcesBeforeApplicationCall{Call: call}
}

// MockResourceServiceAddResourcesBeforeApplicationCall wrap *gomock.Call
type MockResourceServiceAddResourcesBeforeApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceAddResourcesBeforeApplicationCall) Return(arg0 []resource.UUID, arg1 error) *MockResourceServiceAddResourcesBeforeApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceAddResourcesBeforeApplicationCall) Do(f func(context.Context, resource0.AddResourcesBeforeApplicationArgs) ([]resource.UUID, error)) *MockResourceServiceAddResourcesBeforeApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceAddResourcesBeforeApplicationCall) DoAndReturn(f func(context.Context, resource0.AddResourcesBeforeApplicationArgs) ([]resource.UUID, error)) *MockResourceServiceAddResourcesBeforeApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationResourceID mocks base method.
func (m *MockResourceService) GetApplicationResourceID(arg0 context.Context, arg1 resource0.GetApplicationResourceIDArgs) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourceID", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResourceID indicates an expected call of GetApplicationResourceID.
func (mr *MockResourceServiceMockRecorder) GetApplicationResourceID(arg0, arg1 any) *MockResourceServiceGetApplicationResourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourceID", reflect.TypeOf((*MockResourceService)(nil).GetApplicationResourceID), arg0, arg1)
	return &MockResourceServiceGetApplicationResourceIDCall{Call: call}
}

// MockResourceServiceGetApplicationResourceIDCall wrap *gomock.Call
type MockResourceServiceGetApplicationResourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetApplicationResourceIDCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetApplicationResourceIDCall) Do(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetApplicationResourceIDCall) DoAndReturn(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockResourceService) ListResources(arg0 context.Context, arg1 application.UUID) (resource.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].(resource.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourceServiceMockRecorder) ListResources(arg0, arg1 any) *MockResourceServiceListResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourceService)(nil).ListResources), arg0, arg1)
	return &MockResourceServiceListResourcesCall{Call: call}
}

// MockResourceServiceListResourcesCall wrap *gomock.Call
type MockResourceServiceListResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceListResourcesCall) Return(arg0 resource.ApplicationResources, arg1 error) *MockResourceServiceListResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceListResourcesCall) Do(f func(context.Context, application.UUID) (resource.ApplicationResources, error)) *MockResourceServiceListResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceListResourcesCall) DoAndReturn(f func(context.Context, application.UUID) (resource.ApplicationResources, error)) *MockResourceServiceListResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateResourceRevision mocks base method.
func (m *MockResourceService) UpdateResourceRevision(arg0 context.Context, arg1 resource0.UpdateResourceRevisionArgs) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceRevision", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceRevision indicates an expected call of UpdateResourceRevision.
func (mr *MockResourceServiceMockRecorder) UpdateResourceRevision(arg0, arg1 any) *MockResourceServiceUpdateResourceRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceRevision", reflect.TypeOf((*MockResourceService)(nil).UpdateResourceRevision), arg0, arg1)
	return &MockResourceServiceUpdateResourceRevisionCall{Call: call}
}

// MockResourceServiceUpdateResourceRevisionCall wrap *gomock.Call
type MockResourceServiceUpdateResourceRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceUpdateResourceRevisionCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceUpdateResourceRevisionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceUpdateResourceRevisionCall) Do(f func(context.Context, resource0.UpdateResourceRevisionArgs) (resource.UUID, error)) *MockResourceServiceUpdateResourceRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceUpdateResourceRevisionCall) DoAndReturn(f func(context.Context, resource0.UpdateResourceRevisionArgs) (resource.UUID, error)) *MockResourceServiceUpdateResourceRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUploadResource mocks base method.
func (m *MockResourceService) UpdateUploadResource(arg0 context.Context, arg1 resource.UUID) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadResource", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUploadResource indicates an expected call of UpdateUploadResource.
func (mr *MockResourceServiceMockRecorder) UpdateUploadResource(arg0, arg1 any) *MockResourceServiceUpdateUploadResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadResource", reflect.TypeOf((*MockResourceService)(nil).UpdateUploadResource), arg0, arg1)
	return &MockResourceServiceUpdateUploadResourceCall{Call: call}
}

// MockResourceServiceUpdateUploadResourceCall wrap *gomock.Call
type MockResourceServiceUpdateUploadResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceUpdateUploadResourceCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceUpdateUploadResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceUpdateUploadResourceCall) Do(f func(context.Context, resource.UUID) (resource.UUID, error)) *MockResourceServiceUpdateUploadResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceUpdateUploadResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource.UUID, error)) *MockResourceServiceUpdateUploadResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNewCharmRepository is a mock of NewCharmRepository interface.
type MockNewCharmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewCharmRepositoryMockRecorder
}

// MockNewCharmRepositoryMockRecorder is the mock recorder for MockNewCharmRepository.
type MockNewCharmRepositoryMockRecorder struct {
	mock *MockNewCharmRepository
}

// NewMockNewCharmRepository creates a new mock instance.
func NewMockNewCharmRepository(ctrl *gomock.Controller) *MockNewCharmRepository {
	mock := &MockNewCharmRepository{ctrl: ctrl}
	mock.recorder = &MockNewCharmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewCharmRepository) EXPECT() *MockNewCharmRepositoryMockRecorder {
	return m.recorder
}

// ResolveResources mocks base method.
func (m *MockNewCharmRepository) ResolveResources(arg0 context.Context, arg1 []resource1.Resource, arg2 charm.CharmID) ([]resource1.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveResources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]resource1.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveResources indicates an expected call of ResolveResources.
func (mr *MockNewCharmRepositoryMockRecorder) ResolveResources(arg0, arg1, arg2 any) *MockNewCharmRepositoryResolveResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveResources", reflect.TypeOf((*MockNewCharmRepository)(nil).ResolveResources), arg0, arg1, arg2)
	return &MockNewCharmRepositoryResolveResourcesCall{Call: call}
}

// MockNewCharmRepositoryResolveResourcesCall wrap *gomock.Call
type MockNewCharmRepositoryResolveResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNewCharmRepositoryResolveResourcesCall) Return(arg0 []resource1.Resource, arg1 error) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNewCharmRepositoryResolveResourcesCall) Do(f func(context.Context, []resource1.Resource, charm.CharmID) ([]resource1.Resource, error)) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNewCharmRepositoryResolveResourcesCall) DoAndReturn(f func(context.Context, []resource1.Resource, charm.CharmID) ([]resource1.Resource, error)) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
