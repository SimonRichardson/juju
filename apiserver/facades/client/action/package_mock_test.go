// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/action (interfaces: ApplicationService,ModelInfoService,OperationService)
//
// Generated by this command:
//
//	mockgen -typed -package action -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/action ApplicationService,ModelInfoService,OperationService
//

// Package action is a generated GoMock package.
package action

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	charm "github.com/juju/juju/domain/application/charm"
	operation "github.com/juju/juju/domain/operation"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetCharmActions mocks base method.
func (m *MockApplicationService) GetCharmActions(arg0 context.Context, arg1 charm.CharmLocator) (charm0.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmActions", arg0, arg1)
	ret0, _ := ret[0].(charm0.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmActions indicates an expected call of GetCharmActions.
func (mr *MockApplicationServiceMockRecorder) GetCharmActions(arg0, arg1 any) *MockApplicationServiceGetCharmActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmActions", reflect.TypeOf((*MockApplicationService)(nil).GetCharmActions), arg0, arg1)
	return &MockApplicationServiceGetCharmActionsCall{Call: call}
}

// MockApplicationServiceGetCharmActionsCall wrap *gomock.Call
type MockApplicationServiceGetCharmActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmActionsCall) Return(arg0 charm0.Actions, arg1 error) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmActionsCall) Do(f func(context.Context, charm.CharmLocator) (charm0.Actions, error)) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmActionsCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.Actions, error)) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockOperationService) CancelTask(arg0 context.Context, arg1 string) (operation.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0, arg1)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockOperationServiceMockRecorder) CancelTask(arg0, arg1 any) *MockOperationServiceCancelTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockOperationService)(nil).CancelTask), arg0, arg1)
	return &MockOperationServiceCancelTaskCall{Call: call}
}

// MockOperationServiceCancelTaskCall wrap *gomock.Call
type MockOperationServiceCancelTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceCancelTaskCall) Return(arg0 operation.Task, arg1 error) *MockOperationServiceCancelTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceCancelTaskCall) Do(f func(context.Context, string) (operation.Task, error)) *MockOperationServiceCancelTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceCancelTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, error)) *MockOperationServiceCancelTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationByID mocks base method.
func (m *MockOperationService) GetOperationByID(arg0 context.Context, arg1 string) (operation.OperationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", arg0, arg1)
	ret0, _ := ret[0].(operation.OperationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID.
func (mr *MockOperationServiceMockRecorder) GetOperationByID(arg0, arg1 any) *MockOperationServiceGetOperationByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockOperationService)(nil).GetOperationByID), arg0, arg1)
	return &MockOperationServiceGetOperationByIDCall{Call: call}
}

// MockOperationServiceGetOperationByIDCall wrap *gomock.Call
type MockOperationServiceGetOperationByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetOperationByIDCall) Return(arg0 operation.OperationInfo, arg1 error) *MockOperationServiceGetOperationByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetOperationByIDCall) Do(f func(context.Context, string) (operation.OperationInfo, error)) *MockOperationServiceGetOperationByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetOperationByIDCall) DoAndReturn(f func(context.Context, string) (operation.OperationInfo, error)) *MockOperationServiceGetOperationByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperations mocks base method.
func (m *MockOperationService) GetOperations(arg0 context.Context, arg1 operation.QueryArgs) (operation.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", arg0, arg1)
	ret0, _ := ret[0].(operation.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockOperationServiceMockRecorder) GetOperations(arg0, arg1 any) *MockOperationServiceGetOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockOperationService)(nil).GetOperations), arg0, arg1)
	return &MockOperationServiceGetOperationsCall{Call: call}
}

// MockOperationServiceGetOperationsCall wrap *gomock.Call
type MockOperationServiceGetOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetOperationsCall) Return(arg0 operation.QueryResult, arg1 error) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetOperationsCall) Do(f func(context.Context, operation.QueryArgs) (operation.QueryResult, error)) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetOperationsCall) DoAndReturn(f func(context.Context, operation.QueryArgs) (operation.QueryResult, error)) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTask mocks base method.
func (m *MockOperationService) GetTask(arg0 context.Context, arg1 string) (operation.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockOperationServiceMockRecorder) GetTask(arg0, arg1 any) *MockOperationServiceGetTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockOperationService)(nil).GetTask), arg0, arg1)
	return &MockOperationServiceGetTaskCall{Call: call}
}

// MockOperationServiceGetTaskCall wrap *gomock.Call
type MockOperationServiceGetTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetTaskCall) Return(arg0 operation.Task, arg1 error) *MockOperationServiceGetTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetTaskCall) Do(f func(context.Context, string) (operation.Task, error)) *MockOperationServiceGetTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, error)) *MockOperationServiceGetTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartActionOperation mocks base method.
func (m *MockOperationService) StartActionOperation(arg0 context.Context, arg1 []operation.ActionReceiver, arg2 operation.TaskArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartActionOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartActionOperation indicates an expected call of StartActionOperation.
func (mr *MockOperationServiceMockRecorder) StartActionOperation(arg0, arg1, arg2 any) *MockOperationServiceStartActionOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartActionOperation", reflect.TypeOf((*MockOperationService)(nil).StartActionOperation), arg0, arg1, arg2)
	return &MockOperationServiceStartActionOperationCall{Call: call}
}

// MockOperationServiceStartActionOperationCall wrap *gomock.Call
type MockOperationServiceStartActionOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceStartActionOperationCall) Return(arg0 operation.RunResult, arg1 error) *MockOperationServiceStartActionOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceStartActionOperationCall) Do(f func(context.Context, []operation.ActionReceiver, operation.TaskArgs) (operation.RunResult, error)) *MockOperationServiceStartActionOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceStartActionOperationCall) DoAndReturn(f func(context.Context, []operation.ActionReceiver, operation.TaskArgs) (operation.RunResult, error)) *MockOperationServiceStartActionOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartExecOperation mocks base method.
func (m *MockOperationService) StartExecOperation(arg0 context.Context, arg1 operation.Receivers, arg2 operation.ExecArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecOperation indicates an expected call of StartExecOperation.
func (mr *MockOperationServiceMockRecorder) StartExecOperation(arg0, arg1, arg2 any) *MockOperationServiceStartExecOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecOperation", reflect.TypeOf((*MockOperationService)(nil).StartExecOperation), arg0, arg1, arg2)
	return &MockOperationServiceStartExecOperationCall{Call: call}
}

// MockOperationServiceStartExecOperationCall wrap *gomock.Call
type MockOperationServiceStartExecOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceStartExecOperationCall) Return(arg0 operation.RunResult, arg1 error) *MockOperationServiceStartExecOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceStartExecOperationCall) Do(f func(context.Context, operation.Receivers, operation.ExecArgs) (operation.RunResult, error)) *MockOperationServiceStartExecOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceStartExecOperationCall) DoAndReturn(f func(context.Context, operation.Receivers, operation.ExecArgs) (operation.RunResult, error)) *MockOperationServiceStartExecOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartExecOperationOnAllMachines mocks base method.
func (m *MockOperationService) StartExecOperationOnAllMachines(arg0 context.Context, arg1 operation.ExecArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecOperationOnAllMachines", arg0, arg1)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecOperationOnAllMachines indicates an expected call of StartExecOperationOnAllMachines.
func (mr *MockOperationServiceMockRecorder) StartExecOperationOnAllMachines(arg0, arg1 any) *MockOperationServiceStartExecOperationOnAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecOperationOnAllMachines", reflect.TypeOf((*MockOperationService)(nil).StartExecOperationOnAllMachines), arg0, arg1)
	return &MockOperationServiceStartExecOperationOnAllMachinesCall{Call: call}
}

// MockOperationServiceStartExecOperationOnAllMachinesCall wrap *gomock.Call
type MockOperationServiceStartExecOperationOnAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceStartExecOperationOnAllMachinesCall) Return(arg0 operation.RunResult, arg1 error) *MockOperationServiceStartExecOperationOnAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceStartExecOperationOnAllMachinesCall) Do(f func(context.Context, operation.ExecArgs) (operation.RunResult, error)) *MockOperationServiceStartExecOperationOnAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceStartExecOperationOnAllMachinesCall) DoAndReturn(f func(context.Context, operation.ExecArgs) (operation.RunResult, error)) *MockOperationServiceStartExecOperationOnAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchTaskLogs mocks base method.
func (m *MockOperationService) WatchTaskLogs(arg0 context.Context, arg1 string) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTaskLogs", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTaskLogs indicates an expected call of WatchTaskLogs.
func (mr *MockOperationServiceMockRecorder) WatchTaskLogs(arg0, arg1 any) *MockOperationServiceWatchTaskLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTaskLogs", reflect.TypeOf((*MockOperationService)(nil).WatchTaskLogs), arg0, arg1)
	return &MockOperationServiceWatchTaskLogsCall{Call: call}
}

// MockOperationServiceWatchTaskLogsCall wrap *gomock.Call
type MockOperationServiceWatchTaskLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceWatchTaskLogsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockOperationServiceWatchTaskLogsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceWatchTaskLogsCall) Do(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockOperationServiceWatchTaskLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceWatchTaskLogsCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockOperationServiceWatchTaskLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
