// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facade (interfaces: CrossModelAuthContext,MacaroonAuthenticator)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodelsecrets_test -destination auth_mock_test.go github.com/juju/juju/apiserver/facade CrossModelAuthContext,MacaroonAuthenticator
//

// Package crossmodelsecrets_test is a generated GoMock package.
package crossmodelsecrets_test

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	facade "github.com/juju/juju/apiserver/facade"
	bakery0 "github.com/juju/juju/apiserver/internal/crossmodel/bakery"
	model "github.com/juju/juju/core/model"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockCrossModelAuthContext is a mock of CrossModelAuthContext interface.
type MockCrossModelAuthContext struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelAuthContextMockRecorder
}

// MockCrossModelAuthContextMockRecorder is the mock recorder for MockCrossModelAuthContext.
type MockCrossModelAuthContextMockRecorder struct {
	mock *MockCrossModelAuthContext
}

// NewMockCrossModelAuthContext creates a new mock instance.
func NewMockCrossModelAuthContext(ctrl *gomock.Controller) *MockCrossModelAuthContext {
	mock := &MockCrossModelAuthContext{ctrl: ctrl}
	mock.recorder = &MockCrossModelAuthContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelAuthContext) EXPECT() *MockCrossModelAuthContextMockRecorder {
	return m.recorder
}

// Authenticator mocks base method.
func (m *MockCrossModelAuthContext) Authenticator() facade.MacaroonAuthenticator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticator")
	ret0, _ := ret[0].(facade.MacaroonAuthenticator)
	return ret0
}

// Authenticator indicates an expected call of Authenticator.
func (mr *MockCrossModelAuthContextMockRecorder) Authenticator() *MockCrossModelAuthContextAuthenticatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticator", reflect.TypeOf((*MockCrossModelAuthContext)(nil).Authenticator))
	return &MockCrossModelAuthContextAuthenticatorCall{Call: call}
}

// MockCrossModelAuthContextAuthenticatorCall wrap *gomock.Call
type MockCrossModelAuthContextAuthenticatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextAuthenticatorCall) Return(arg0 facade.MacaroonAuthenticator) *MockCrossModelAuthContextAuthenticatorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextAuthenticatorCall) Do(f func() facade.MacaroonAuthenticator) *MockCrossModelAuthContextAuthenticatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextAuthenticatorCall) DoAndReturn(f func() facade.MacaroonAuthenticator) *MockCrossModelAuthContextAuthenticatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckLocalAccessRequest mocks base method.
func (m *MockCrossModelAuthContext) CheckLocalAccessRequest(arg0 context.Context, arg1 bakery0.OfferAccessDetails) ([]checkers.Caveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLocalAccessRequest", arg0, arg1)
	ret0, _ := ret[0].([]checkers.Caveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLocalAccessRequest indicates an expected call of CheckLocalAccessRequest.
func (mr *MockCrossModelAuthContextMockRecorder) CheckLocalAccessRequest(arg0, arg1 any) *MockCrossModelAuthContextCheckLocalAccessRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLocalAccessRequest", reflect.TypeOf((*MockCrossModelAuthContext)(nil).CheckLocalAccessRequest), arg0, arg1)
	return &MockCrossModelAuthContextCheckLocalAccessRequestCall{Call: call}
}

// MockCrossModelAuthContextCheckLocalAccessRequestCall wrap *gomock.Call
type MockCrossModelAuthContextCheckLocalAccessRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextCheckLocalAccessRequestCall) Return(arg0 []checkers.Caveat, arg1 error) *MockCrossModelAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextCheckLocalAccessRequestCall) Do(f func(context.Context, bakery0.OfferAccessDetails) ([]checkers.Caveat, error)) *MockCrossModelAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextCheckLocalAccessRequestCall) DoAndReturn(f func(context.Context, bakery0.OfferAccessDetails) ([]checkers.Caveat, error)) *MockCrossModelAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckOfferAccessCaveat mocks base method.
func (m *MockCrossModelAuthContext) CheckOfferAccessCaveat(arg0 context.Context, arg1 string) (bakery0.OfferAccessDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOfferAccessCaveat", arg0, arg1)
	ret0, _ := ret[0].(bakery0.OfferAccessDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOfferAccessCaveat indicates an expected call of CheckOfferAccessCaveat.
func (mr *MockCrossModelAuthContextMockRecorder) CheckOfferAccessCaveat(arg0, arg1 any) *MockCrossModelAuthContextCheckOfferAccessCaveatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOfferAccessCaveat", reflect.TypeOf((*MockCrossModelAuthContext)(nil).CheckOfferAccessCaveat), arg0, arg1)
	return &MockCrossModelAuthContextCheckOfferAccessCaveatCall{Call: call}
}

// MockCrossModelAuthContextCheckOfferAccessCaveatCall wrap *gomock.Call
type MockCrossModelAuthContextCheckOfferAccessCaveatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextCheckOfferAccessCaveatCall) Return(arg0 bakery0.OfferAccessDetails, arg1 error) *MockCrossModelAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextCheckOfferAccessCaveatCall) Do(f func(context.Context, string) (bakery0.OfferAccessDetails, error)) *MockCrossModelAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextCheckOfferAccessCaveatCall) DoAndReturn(f func(context.Context, string) (bakery0.OfferAccessDetails, error)) *MockCrossModelAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateConsumeOfferMacaroon mocks base method.
func (m *MockCrossModelAuthContext) CreateConsumeOfferMacaroon(arg0 context.Context, arg1 model.UUID, arg2, arg3 string, arg4 bakery.Version) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumeOfferMacaroon", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumeOfferMacaroon indicates an expected call of CreateConsumeOfferMacaroon.
func (mr *MockCrossModelAuthContextMockRecorder) CreateConsumeOfferMacaroon(arg0, arg1, arg2, arg3, arg4 any) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumeOfferMacaroon", reflect.TypeOf((*MockCrossModelAuthContext)(nil).CreateConsumeOfferMacaroon), arg0, arg1, arg2, arg3, arg4)
	return &MockCrossModelAuthContextCreateConsumeOfferMacaroonCall{Call: call}
}

// MockCrossModelAuthContextCreateConsumeOfferMacaroonCall wrap *gomock.Call
type MockCrossModelAuthContextCreateConsumeOfferMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) Do(f func(context.Context, model.UUID, string, string, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall) DoAndReturn(f func(context.Context, model.UUID, string, string, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateConsumeOfferMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRemoteRelationMacaroon mocks base method.
func (m *MockCrossModelAuthContext) CreateRemoteRelationMacaroon(arg0 context.Context, arg1 model.UUID, arg2, arg3 string, arg4 names.RelationTag, arg5 bakery.Version) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteRelationMacaroon", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteRelationMacaroon indicates an expected call of CreateRemoteRelationMacaroon.
func (mr *MockCrossModelAuthContextMockRecorder) CreateRemoteRelationMacaroon(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteRelationMacaroon", reflect.TypeOf((*MockCrossModelAuthContext)(nil).CreateRemoteRelationMacaroon), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockCrossModelAuthContextCreateRemoteRelationMacaroonCall{Call: call}
}

// MockCrossModelAuthContextCreateRemoteRelationMacaroonCall wrap *gomock.Call
type MockCrossModelAuthContextCreateRemoteRelationMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall) Do(f func(context.Context, model.UUID, string, string, names.RelationTag, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall) DoAndReturn(f func(context.Context, model.UUID, string, string, names.RelationTag, bakery.Version) (*bakery.Macaroon, error)) *MockCrossModelAuthContextCreateRemoteRelationMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferThirdPartyKey mocks base method.
func (m *MockCrossModelAuthContext) OfferThirdPartyKey() *bakery.KeyPair {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferThirdPartyKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	return ret0
}

// OfferThirdPartyKey indicates an expected call of OfferThirdPartyKey.
func (mr *MockCrossModelAuthContextMockRecorder) OfferThirdPartyKey() *MockCrossModelAuthContextOfferThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferThirdPartyKey", reflect.TypeOf((*MockCrossModelAuthContext)(nil).OfferThirdPartyKey))
	return &MockCrossModelAuthContextOfferThirdPartyKeyCall{Call: call}
}

// MockCrossModelAuthContextOfferThirdPartyKeyCall wrap *gomock.Call
type MockCrossModelAuthContextOfferThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextOfferThirdPartyKeyCall) Return(arg0 *bakery.KeyPair) *MockCrossModelAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextOfferThirdPartyKeyCall) Do(f func() *bakery.KeyPair) *MockCrossModelAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextOfferThirdPartyKeyCall) DoAndReturn(f func() *bakery.KeyPair) *MockCrossModelAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMacaroonAuthenticator is a mock of MacaroonAuthenticator interface.
type MockMacaroonAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockMacaroonAuthenticatorMockRecorder
}

// MockMacaroonAuthenticatorMockRecorder is the mock recorder for MockMacaroonAuthenticator.
type MockMacaroonAuthenticatorMockRecorder struct {
	mock *MockMacaroonAuthenticator
}

// NewMockMacaroonAuthenticator creates a new mock instance.
func NewMockMacaroonAuthenticator(ctrl *gomock.Controller) *MockMacaroonAuthenticator {
	mock := &MockMacaroonAuthenticator{ctrl: ctrl}
	mock.recorder = &MockMacaroonAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMacaroonAuthenticator) EXPECT() *MockMacaroonAuthenticatorMockRecorder {
	return m.recorder
}

// CheckOfferMacaroons mocks base method.
func (m *MockMacaroonAuthenticator) CheckOfferMacaroons(arg0 context.Context, arg1, arg2 string, arg3 macaroon.Slice, arg4 bakery.Version) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOfferMacaroons", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOfferMacaroons indicates an expected call of CheckOfferMacaroons.
func (mr *MockMacaroonAuthenticatorMockRecorder) CheckOfferMacaroons(arg0, arg1, arg2, arg3, arg4 any) *MockMacaroonAuthenticatorCheckOfferMacaroonsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOfferMacaroons", reflect.TypeOf((*MockMacaroonAuthenticator)(nil).CheckOfferMacaroons), arg0, arg1, arg2, arg3, arg4)
	return &MockMacaroonAuthenticatorCheckOfferMacaroonsCall{Call: call}
}

// MockMacaroonAuthenticatorCheckOfferMacaroonsCall wrap *gomock.Call
type MockMacaroonAuthenticatorCheckOfferMacaroonsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMacaroonAuthenticatorCheckOfferMacaroonsCall) Return(arg0 map[string]string, arg1 error) *MockMacaroonAuthenticatorCheckOfferMacaroonsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMacaroonAuthenticatorCheckOfferMacaroonsCall) Do(f func(context.Context, string, string, macaroon.Slice, bakery.Version) (map[string]string, error)) *MockMacaroonAuthenticatorCheckOfferMacaroonsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMacaroonAuthenticatorCheckOfferMacaroonsCall) DoAndReturn(f func(context.Context, string, string, macaroon.Slice, bakery.Version) (map[string]string, error)) *MockMacaroonAuthenticatorCheckOfferMacaroonsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckRelationMacaroons mocks base method.
func (m *MockMacaroonAuthenticator) CheckRelationMacaroons(arg0 context.Context, arg1, arg2 string, arg3 names.RelationTag, arg4 macaroon.Slice, arg5 bakery.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRelationMacaroons", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRelationMacaroons indicates an expected call of CheckRelationMacaroons.
func (mr *MockMacaroonAuthenticatorMockRecorder) CheckRelationMacaroons(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockMacaroonAuthenticatorCheckRelationMacaroonsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRelationMacaroons", reflect.TypeOf((*MockMacaroonAuthenticator)(nil).CheckRelationMacaroons), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockMacaroonAuthenticatorCheckRelationMacaroonsCall{Call: call}
}

// MockMacaroonAuthenticatorCheckRelationMacaroonsCall wrap *gomock.Call
type MockMacaroonAuthenticatorCheckRelationMacaroonsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMacaroonAuthenticatorCheckRelationMacaroonsCall) Return(arg0 error) *MockMacaroonAuthenticatorCheckRelationMacaroonsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMacaroonAuthenticatorCheckRelationMacaroonsCall) Do(f func(context.Context, string, string, names.RelationTag, macaroon.Slice, bakery.Version) error) *MockMacaroonAuthenticatorCheckRelationMacaroonsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMacaroonAuthenticatorCheckRelationMacaroonsCall) DoAndReturn(f func(context.Context, string, string, names.RelationTag, macaroon.Slice, bakery.Version) error) *MockMacaroonAuthenticatorCheckRelationMacaroonsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
