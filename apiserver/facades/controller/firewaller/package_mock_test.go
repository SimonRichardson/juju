// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/firewaller (interfaces: ControllerConfigAPI)
//
// Generated by this command:
//
//	mockgen -typed -package firewaller_test -destination package_mock_test.go github.com/juju/juju/apiserver/facades/controller/firewaller ControllerConfigAPI
//

// Package firewaller_test is a generated GoMock package.
package firewaller_test

import (
	context "context"
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigAPI is a mock of ControllerConfigAPI interface.
type MockControllerConfigAPI struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigAPIMockRecorder
}

// MockControllerConfigAPIMockRecorder is the mock recorder for MockControllerConfigAPI.
type MockControllerConfigAPIMockRecorder struct {
	mock *MockControllerConfigAPI
}

// NewMockControllerConfigAPI creates a new mock instance.
func NewMockControllerConfigAPI(ctrl *gomock.Controller) *MockControllerConfigAPI {
	mock := &MockControllerConfigAPI{ctrl: ctrl}
	mock.recorder = &MockControllerConfigAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigAPI) EXPECT() *MockControllerConfigAPIMockRecorder {
	return m.recorder
}

// ControllerAPIInfoForModels mocks base method.
func (m *MockControllerConfigAPI) ControllerAPIInfoForModels(arg0 context.Context, arg1 params.Entities) (params.ControllerAPIInfoResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAPIInfoForModels", arg0, arg1)
	ret0, _ := ret[0].(params.ControllerAPIInfoResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAPIInfoForModels indicates an expected call of ControllerAPIInfoForModels.
func (mr *MockControllerConfigAPIMockRecorder) ControllerAPIInfoForModels(arg0, arg1 any) *MockControllerConfigAPIControllerAPIInfoForModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAPIInfoForModels", reflect.TypeOf((*MockControllerConfigAPI)(nil).ControllerAPIInfoForModels), arg0, arg1)
	return &MockControllerConfigAPIControllerAPIInfoForModelsCall{Call: call}
}

// MockControllerConfigAPIControllerAPIInfoForModelsCall wrap *gomock.Call
type MockControllerConfigAPIControllerAPIInfoForModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigAPIControllerAPIInfoForModelsCall) Return(arg0 params.ControllerAPIInfoResults, arg1 error) *MockControllerConfigAPIControllerAPIInfoForModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigAPIControllerAPIInfoForModelsCall) Do(f func(context.Context, params.Entities) (params.ControllerAPIInfoResults, error)) *MockControllerConfigAPIControllerAPIInfoForModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigAPIControllerAPIInfoForModelsCall) DoAndReturn(f func(context.Context, params.Entities) (params.ControllerAPIInfoResults, error)) *MockControllerConfigAPIControllerAPIInfoForModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigAPI) ControllerConfig(arg0 context.Context) (params.ControllerConfigResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(params.ControllerConfigResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigAPIMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigAPIControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigAPI)(nil).ControllerConfig), arg0)
	return &MockControllerConfigAPIControllerConfigCall{Call: call}
}

// MockControllerConfigAPIControllerConfigCall wrap *gomock.Call
type MockControllerConfigAPIControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigAPIControllerConfigCall) Return(arg0 params.ControllerConfigResult, arg1 error) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigAPIControllerConfigCall) Do(f func(context.Context) (params.ControllerConfigResult, error)) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigAPIControllerConfigCall) DoAndReturn(f func(context.Context) (params.ControllerConfigResult, error)) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
