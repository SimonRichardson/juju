// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelrelations (interfaces: CrossModelRelationService)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodelrelations -destination package_mock_test.go github.com/juju/juju/apiserver/facades/controller/crossmodelrelations CrossModelRelationService
//

// Package crossmodelrelations is a generated GoMock package.
package crossmodelrelations

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	service "github.com/juju/juju/domain/crossmodelrelation/service"
	gomock "go.uber.org/mock/gomock"
)

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// AddRemoteApplicationConsumer mocks base method.
func (m *MockCrossModelRelationService) AddRemoteApplicationConsumer(arg0 context.Context, arg1 service.AddRemoteApplicationConsumerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationConsumer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationConsumer indicates an expected call of AddRemoteApplicationConsumer.
func (mr *MockCrossModelRelationServiceMockRecorder) AddRemoteApplicationConsumer(arg0, arg1 any) *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationConsumer", reflect.TypeOf((*MockCrossModelRelationService)(nil).AddRemoteApplicationConsumer), arg0, arg1)
	return &MockCrossModelRelationServiceAddRemoteApplicationConsumerCall{Call: call}
}

// MockCrossModelRelationServiceAddRemoteApplicationConsumerCall wrap *gomock.Call
type MockCrossModelRelationServiceAddRemoteApplicationConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall) Return(arg0 error) *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall) Do(f func(context.Context, service.AddRemoteApplicationConsumerArgs) error) *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall) DoAndReturn(f func(context.Context, service.AddRemoteApplicationConsumerArgs) error) *MockCrossModelRelationServiceAddRemoteApplicationConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationNameAndUUIDByOfferUUID mocks base method.
func (m *MockCrossModelRelationService) GetApplicationNameAndUUIDByOfferUUID(arg0 context.Context, arg1 string) (string, application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNameAndUUIDByOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(application.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationNameAndUUIDByOfferUUID indicates an expected call of GetApplicationNameAndUUIDByOfferUUID.
func (mr *MockCrossModelRelationServiceMockRecorder) GetApplicationNameAndUUIDByOfferUUID(arg0, arg1 any) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNameAndUUIDByOfferUUID", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetApplicationNameAndUUIDByOfferUUID), arg0, arg1)
	return &MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall{Call: call}
}

// MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall wrap *gomock.Call
type MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) Return(arg0 string, arg1 application.UUID, arg2 error) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) Do(f func(context.Context, string) (string, application.UUID, error)) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) DoAndReturn(f func(context.Context, string) (string, application.UUID, error)) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
