// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/secretsmanager (interfaces: CrossModelSecretsClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/crossmodel.go github.com/juju/juju/apiserver/facades/agent/secretsmanager CrossModelSecretsClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	secrets "github.com/juju/juju/core/secrets"
	secrets0 "github.com/juju/juju/internal/secrets"
	provider "github.com/juju/juju/internal/secrets/provider"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockCrossModelSecretsClient is a mock of CrossModelSecretsClient interface.
type MockCrossModelSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelSecretsClientMockRecorder
}

// MockCrossModelSecretsClientMockRecorder is the mock recorder for MockCrossModelSecretsClient.
type MockCrossModelSecretsClientMockRecorder struct {
	mock *MockCrossModelSecretsClient
}

// NewMockCrossModelSecretsClient creates a new mock instance.
func NewMockCrossModelSecretsClient(ctrl *gomock.Controller) *MockCrossModelSecretsClient {
	mock := &MockCrossModelSecretsClient{ctrl: ctrl}
	mock.recorder = &MockCrossModelSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelSecretsClient) EXPECT() *MockCrossModelSecretsClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCrossModelSecretsClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCrossModelSecretsClientMockRecorder) Close() *MockCrossModelSecretsClientCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCrossModelSecretsClient)(nil).Close))
	return &MockCrossModelSecretsClientCloseCall{Call: call}
}

// MockCrossModelSecretsClientCloseCall wrap *gomock.Call
type MockCrossModelSecretsClientCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelSecretsClientCloseCall) Return(arg0 error) *MockCrossModelSecretsClientCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelSecretsClientCloseCall) Do(f func() error) *MockCrossModelSecretsClientCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelSecretsClientCloseCall) DoAndReturn(f func() error) *MockCrossModelSecretsClientCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteSecretContentInfo mocks base method.
func (m *MockCrossModelSecretsClient) GetRemoteSecretContentInfo(arg0 context.Context, arg1 *secrets.URI, arg2 int, arg3, arg4 bool, arg5 string, arg6 application.UUID, arg7 int, arg8 macaroon.Slice) (*secrets0.ContentParams, *provider.ModelBackendConfig, int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteSecretContentInfo", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*secrets0.ContentParams)
	ret1, _ := ret[1].(*provider.ModelBackendConfig)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetRemoteSecretContentInfo indicates an expected call of GetRemoteSecretContentInfo.
func (mr *MockCrossModelSecretsClientMockRecorder) GetRemoteSecretContentInfo(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteSecretContentInfo", reflect.TypeOf((*MockCrossModelSecretsClient)(nil).GetRemoteSecretContentInfo), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	return &MockCrossModelSecretsClientGetRemoteSecretContentInfoCall{Call: call}
}

// MockCrossModelSecretsClientGetRemoteSecretContentInfoCall wrap *gomock.Call
type MockCrossModelSecretsClientGetRemoteSecretContentInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall) Return(arg0 *secrets0.ContentParams, arg1 *provider.ModelBackendConfig, arg2 int, arg3 bool, arg4 error) *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3, arg4)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall) Do(f func(context.Context, *secrets.URI, int, bool, bool, string, application.UUID, int, macaroon.Slice) (*secrets0.ContentParams, *provider.ModelBackendConfig, int, bool, error)) *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall) DoAndReturn(f func(context.Context, *secrets.URI, int, bool, bool, string, application.UUID, int, macaroon.Slice) (*secrets0.ContentParams, *provider.ModelBackendConfig, int, bool, error)) *MockCrossModelSecretsClientGetRemoteSecretContentInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretAccessScope mocks base method.
func (m *MockCrossModelSecretsClient) GetSecretAccessScope(arg0 context.Context, arg1 *secrets.URI, arg2 application.UUID, arg3 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccessScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccessScope indicates an expected call of GetSecretAccessScope.
func (mr *MockCrossModelSecretsClientMockRecorder) GetSecretAccessScope(arg0, arg1, arg2, arg3 any) *MockCrossModelSecretsClientGetSecretAccessScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccessScope", reflect.TypeOf((*MockCrossModelSecretsClient)(nil).GetSecretAccessScope), arg0, arg1, arg2, arg3)
	return &MockCrossModelSecretsClientGetSecretAccessScopeCall{Call: call}
}

// MockCrossModelSecretsClientGetSecretAccessScopeCall wrap *gomock.Call
type MockCrossModelSecretsClientGetSecretAccessScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelSecretsClientGetSecretAccessScopeCall) Return(arg0 relation.UUID, arg1 error) *MockCrossModelSecretsClientGetSecretAccessScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelSecretsClientGetSecretAccessScopeCall) Do(f func(context.Context, *secrets.URI, application.UUID, int) (relation.UUID, error)) *MockCrossModelSecretsClientGetSecretAccessScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelSecretsClientGetSecretAccessScopeCall) DoAndReturn(f func(context.Context, *secrets.URI, application.UUID, int) (relation.UUID, error)) *MockCrossModelSecretsClientGetSecretAccessScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
