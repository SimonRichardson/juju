// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/secretsmanager (interfaces: SecretsState)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/secretsstate.go github.com/juju/juju/apiserver/facades/agent/secretsmanager SecretsState
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsState is a mock of SecretsState interface.
type MockSecretsState struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsStateMockRecorder
}

// MockSecretsStateMockRecorder is the mock recorder for MockSecretsState.
type MockSecretsStateMockRecorder struct {
	mock *MockSecretsState
}

// NewMockSecretsState creates a new mock instance.
func NewMockSecretsState(ctrl *gomock.Controller) *MockSecretsState {
	mock := &MockSecretsState{ctrl: ctrl}
	mock.recorder = &MockSecretsStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsState) EXPECT() *MockSecretsStateMockRecorder {
	return m.recorder
}

// ChangeSecretBackend mocks base method.
func (m *MockSecretsState) ChangeSecretBackend(arg0 state.ChangeSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockSecretsStateMockRecorder) ChangeSecretBackend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockSecretsState)(nil).ChangeSecretBackend), arg0)
}

// CreateSecret mocks base method.
func (m *MockSecretsState) CreateSecret(arg0 *secrets.URI, arg1 state.CreateSecretParams) (*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretsStateMockRecorder) CreateSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretsState)(nil).CreateSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockSecretsState) DeleteSecret(arg0 *secrets.URI, arg1 ...int) ([]secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].([]secrets.ValueRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretsStateMockRecorder) DeleteSecret(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretsState)(nil).DeleteSecret), varargs...)
}

// GetOwnedSecretIDsAsLeaderUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretIDsAsLeaderUnit(arg0 names.UnitTag) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretIDsAsLeaderUnit", arg0)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretIDsAsLeaderUnit indicates an expected call of GetOwnedSecretIDsAsLeaderUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretIDsAsLeaderUnit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretIDsAsLeaderUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretIDsAsLeaderUnit), arg0)
}

// GetOwnedSecretIDsAsUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretIDsAsUnit(arg0 names.UnitTag) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretIDsAsUnit", arg0)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretIDsAsUnit indicates an expected call of GetOwnedSecretIDsAsUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretIDsAsUnit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretIDsAsUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretIDsAsUnit), arg0)
}

// GetOwnedSecretMetadataAsApp mocks base method.
func (m *MockSecretsState) GetOwnedSecretMetadataAsApp(arg0 names.ApplicationTag, arg1 *secrets.URI) (*secrets.SecretMetadataOwnerIdent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretMetadataAsApp", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadataOwnerIdent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretMetadataAsApp indicates an expected call of GetOwnedSecretMetadataAsApp.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretMetadataAsApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretMetadataAsApp", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretMetadataAsApp), arg0, arg1)
}

// GetOwnedSecretMetadataAsUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretMetadataAsUnit(arg0 names.UnitTag, arg1 *secrets.URI) (*secrets.SecretMetadataOwnerIdent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretMetadataAsUnit", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadataOwnerIdent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretMetadataAsUnit indicates an expected call of GetOwnedSecretMetadataAsUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretMetadataAsUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretMetadataAsUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretMetadataAsUnit), arg0, arg1)
}

// GetOwnedSecretMetadataByLabelAsApp mocks base method.
func (m *MockSecretsState) GetOwnedSecretMetadataByLabelAsApp(arg0 names.ApplicationTag, arg1 string) (*secrets.SecretMetadataOwnerIdent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretMetadataByLabelAsApp", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadataOwnerIdent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretMetadataByLabelAsApp indicates an expected call of GetOwnedSecretMetadataByLabelAsApp.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretMetadataByLabelAsApp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretMetadataByLabelAsApp", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretMetadataByLabelAsApp), arg0, arg1)
}

// GetOwnedSecretMetadataByLabelAsUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretMetadataByLabelAsUnit(arg0 names.UnitTag, arg1 string) (*secrets.SecretMetadataOwnerIdent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretMetadataByLabelAsUnit", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadataOwnerIdent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretMetadataByLabelAsUnit indicates an expected call of GetOwnedSecretMetadataByLabelAsUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretMetadataByLabelAsUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretMetadataByLabelAsUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretMetadataByLabelAsUnit), arg0, arg1)
}

// GetOwnedSecretRevisionsAsUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretRevisionsAsUnit(arg0 names.UnitTag) (map[secrets.URI][]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretRevisionsAsUnit", arg0)
	ret0, _ := ret[0].(map[secrets.URI][]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretRevisionsAsUnit indicates an expected call of GetOwnedSecretRevisionsAsUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretRevisionsAsUnit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretRevisionsAsUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretRevisionsAsUnit), arg0)
}

// GetOwnedSecretRevisionsByIDAsLeaderUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretRevisionsByIDAsLeaderUnit(arg0 names.UnitTag, arg1 *secrets.URI) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretRevisionsByIDAsLeaderUnit", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretRevisionsByIDAsLeaderUnit indicates an expected call of GetOwnedSecretRevisionsByIDAsLeaderUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretRevisionsByIDAsLeaderUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretRevisionsByIDAsLeaderUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretRevisionsByIDAsLeaderUnit), arg0, arg1)
}

// GetOwnedSecretRevisionsByIDAsUnit mocks base method.
func (m *MockSecretsState) GetOwnedSecretRevisionsByIDAsUnit(arg0 names.UnitTag, arg1 *secrets.URI) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretRevisionsByIDAsUnit", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretRevisionsByIDAsUnit indicates an expected call of GetOwnedSecretRevisionsByIDAsUnit.
func (mr *MockSecretsStateMockRecorder) GetOwnedSecretRevisionsByIDAsUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretRevisionsByIDAsUnit", reflect.TypeOf((*MockSecretsState)(nil).GetOwnedSecretRevisionsByIDAsUnit), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockSecretsState) GetSecret(arg0 *secrets.URI) (*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretsStateMockRecorder) GetSecret(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretsState)(nil).GetSecret), arg0)
}

// GetSecretRevision mocks base method.
func (m *MockSecretsState) GetSecretRevision(arg0 *secrets.URI, arg1 int) (*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretRevision", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretRevisionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretRevision indicates an expected call of GetSecretRevision.
func (mr *MockSecretsStateMockRecorder) GetSecretRevision(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretRevision", reflect.TypeOf((*MockSecretsState)(nil).GetSecretRevision), arg0, arg1)
}

// GetSecretValue mocks base method.
func (m *MockSecretsState) GetSecretValue(arg0 *secrets.URI, arg1 int) (secrets.SecretValue, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretsStateMockRecorder) GetSecretValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretsState)(nil).GetSecretValue), arg0, arg1)
}

// ListSecretRevisions mocks base method.
func (m *MockSecretsState) ListSecretRevisions(arg0 *secrets.URI) ([]*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretRevisions", arg0)
	ret0, _ := ret[0].([]*secrets.SecretRevisionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretRevisions indicates an expected call of ListSecretRevisions.
func (mr *MockSecretsStateMockRecorder) ListSecretRevisions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretRevisions", reflect.TypeOf((*MockSecretsState)(nil).ListSecretRevisions), arg0)
}

// ListSecrets mocks base method.
func (m *MockSecretsState) ListSecrets(arg0 state.SecretsFilter) ([]*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0)
	ret0, _ := ret[0].([]*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretsStateMockRecorder) ListSecrets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsState)(nil).ListSecrets), arg0)
}

// SecretGrants mocks base method.
func (m *MockSecretsState) SecretGrants(arg0 *secrets.URI, arg1 secrets.SecretRole) ([]secrets.AccessInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGrants", arg0, arg1)
	ret0, _ := ret[0].([]secrets.AccessInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGrants indicates an expected call of SecretGrants.
func (mr *MockSecretsStateMockRecorder) SecretGrants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGrants", reflect.TypeOf((*MockSecretsState)(nil).SecretGrants), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockSecretsState) UpdateSecret(arg0 *secrets.URI, arg1 state.UpdateSecretParams) (*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretsStateMockRecorder) UpdateSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretsState)(nil).UpdateSecret), arg0, arg1)
}

// WatchDeleted mocks base method.
func (m *MockSecretsState) WatchDeleted(arg0 []names.Tag) (state.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchDeleted", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDeleted indicates an expected call of WatchDeleted.
func (mr *MockSecretsStateMockRecorder) WatchDeleted(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDeleted", reflect.TypeOf((*MockSecretsState)(nil).WatchDeleted), arg0)
}

// WatchObsolete mocks base method.
func (m *MockSecretsState) WatchObsolete(arg0 []names.Tag, arg1 bool) (state.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchObsolete", arg0, arg1)
	ret0, _ := ret[0].(state.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchObsolete indicates an expected call of WatchObsolete.
func (mr *MockSecretsStateMockRecorder) WatchObsolete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchObsolete", reflect.TypeOf((*MockSecretsState)(nil).WatchObsolete), arg0, arg1)
}
