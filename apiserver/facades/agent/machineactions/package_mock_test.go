// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/machineactions (interfaces: OperationService)
//
// Generated by this command:
//
//	mockgen -typed -package machineactions -destination package_mock_test.go github.com/juju/juju/apiserver/facades/agent/machineactions OperationService
//

// Package machineactions is a generated GoMock package.
package machineactions

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	status "github.com/juju/juju/core/status"
	watcher "github.com/juju/juju/core/watcher"
	operation "github.com/juju/juju/domain/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// FinishTask mocks base method.
func (m *MockOperationService) FinishTask(arg0 context.Context, arg1 operation.CompletedTaskResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTask indicates an expected call of FinishTask.
func (mr *MockOperationServiceMockRecorder) FinishTask(arg0, arg1 any) *MockOperationServiceFinishTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTask", reflect.TypeOf((*MockOperationService)(nil).FinishTask), arg0, arg1)
	return &MockOperationServiceFinishTaskCall{Call: call}
}

// MockOperationServiceFinishTaskCall wrap *gomock.Call
type MockOperationServiceFinishTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceFinishTaskCall) Return(arg0 error) *MockOperationServiceFinishTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceFinishTaskCall) Do(f func(context.Context, operation.CompletedTaskResult) error) *MockOperationServiceFinishTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceFinishTaskCall) DoAndReturn(f func(context.Context, operation.CompletedTaskResult) error) *MockOperationServiceFinishTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineTaskIDsWithStatus mocks base method.
func (m *MockOperationService) GetMachineTaskIDsWithStatus(arg0 context.Context, arg1 machine.Name, arg2 status.Status) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTaskIDsWithStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTaskIDsWithStatus indicates an expected call of GetMachineTaskIDsWithStatus.
func (mr *MockOperationServiceMockRecorder) GetMachineTaskIDsWithStatus(arg0, arg1, arg2 any) *MockOperationServiceGetMachineTaskIDsWithStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTaskIDsWithStatus", reflect.TypeOf((*MockOperationService)(nil).GetMachineTaskIDsWithStatus), arg0, arg1, arg2)
	return &MockOperationServiceGetMachineTaskIDsWithStatusCall{Call: call}
}

// MockOperationServiceGetMachineTaskIDsWithStatusCall wrap *gomock.Call
type MockOperationServiceGetMachineTaskIDsWithStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetMachineTaskIDsWithStatusCall) Return(arg0 []string, arg1 error) *MockOperationServiceGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetMachineTaskIDsWithStatusCall) Do(f func(context.Context, machine.Name, status.Status) ([]string, error)) *MockOperationServiceGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetMachineTaskIDsWithStatusCall) DoAndReturn(f func(context.Context, machine.Name, status.Status) ([]string, error)) *MockOperationServiceGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTaskByTaskID mocks base method.
func (m *MockOperationService) GetPendingTaskByTaskID(arg0 context.Context, arg1 string) (operation.TaskArgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTaskByTaskID", arg0, arg1)
	ret0, _ := ret[0].(operation.TaskArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTaskByTaskID indicates an expected call of GetPendingTaskByTaskID.
func (mr *MockOperationServiceMockRecorder) GetPendingTaskByTaskID(arg0, arg1 any) *MockOperationServiceGetPendingTaskByTaskIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTaskByTaskID", reflect.TypeOf((*MockOperationService)(nil).GetPendingTaskByTaskID), arg0, arg1)
	return &MockOperationServiceGetPendingTaskByTaskIDCall{Call: call}
}

// MockOperationServiceGetPendingTaskByTaskIDCall wrap *gomock.Call
type MockOperationServiceGetPendingTaskByTaskIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetPendingTaskByTaskIDCall) Return(arg0 operation.TaskArgs, arg1 error) *MockOperationServiceGetPendingTaskByTaskIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetPendingTaskByTaskIDCall) Do(f func(context.Context, string) (operation.TaskArgs, error)) *MockOperationServiceGetPendingTaskByTaskIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetPendingTaskByTaskIDCall) DoAndReturn(f func(context.Context, string) (operation.TaskArgs, error)) *MockOperationServiceGetPendingTaskByTaskIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReceiverFromTaskID mocks base method.
func (m *MockOperationService) GetReceiverFromTaskID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiverFromTaskID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiverFromTaskID indicates an expected call of GetReceiverFromTaskID.
func (mr *MockOperationServiceMockRecorder) GetReceiverFromTaskID(arg0, arg1 any) *MockOperationServiceGetReceiverFromTaskIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiverFromTaskID", reflect.TypeOf((*MockOperationService)(nil).GetReceiverFromTaskID), arg0, arg1)
	return &MockOperationServiceGetReceiverFromTaskIDCall{Call: call}
}

// MockOperationServiceGetReceiverFromTaskIDCall wrap *gomock.Call
type MockOperationServiceGetReceiverFromTaskIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetReceiverFromTaskIDCall) Return(arg0 string, arg1 error) *MockOperationServiceGetReceiverFromTaskIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetReceiverFromTaskIDCall) Do(f func(context.Context, string) (string, error)) *MockOperationServiceGetReceiverFromTaskIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetReceiverFromTaskIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockOperationServiceGetReceiverFromTaskIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTask mocks base method.
func (m *MockOperationService) StartTask(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTask indicates an expected call of StartTask.
func (mr *MockOperationServiceMockRecorder) StartTask(arg0, arg1 any) *MockOperationServiceStartTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockOperationService)(nil).StartTask), arg0, arg1)
	return &MockOperationServiceStartTaskCall{Call: call}
}

// MockOperationServiceStartTaskCall wrap *gomock.Call
type MockOperationServiceStartTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceStartTaskCall) Return(arg0 error) *MockOperationServiceStartTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceStartTaskCall) Do(f func(context.Context, string) error) *MockOperationServiceStartTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceStartTaskCall) DoAndReturn(f func(context.Context, string) error) *MockOperationServiceStartTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineTaskNotifications mocks base method.
func (m *MockOperationService) WatchMachineTaskNotifications(arg0 context.Context, arg1 machine.Name) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineTaskNotifications", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineTaskNotifications indicates an expected call of WatchMachineTaskNotifications.
func (mr *MockOperationServiceMockRecorder) WatchMachineTaskNotifications(arg0, arg1 any) *MockOperationServiceWatchMachineTaskNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineTaskNotifications", reflect.TypeOf((*MockOperationService)(nil).WatchMachineTaskNotifications), arg0, arg1)
	return &MockOperationServiceWatchMachineTaskNotificationsCall{Call: call}
}

// MockOperationServiceWatchMachineTaskNotificationsCall wrap *gomock.Call
type MockOperationServiceWatchMachineTaskNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceWatchMachineTaskNotificationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockOperationServiceWatchMachineTaskNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceWatchMachineTaskNotificationsCall) Do(f func(context.Context, machine.Name) (watcher.Watcher[[]string], error)) *MockOperationServiceWatchMachineTaskNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceWatchMachineTaskNotificationsCall) DoAndReturn(f func(context.Context, machine.Name) (watcher.Watcher[[]string], error)) *MockOperationServiceWatchMachineTaskNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
