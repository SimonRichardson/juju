// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver (interfaces: RelationService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package apiserver -destination service_mock_test.go github.com/juju/juju/apiserver RelationService,StatusService
//

// Package apiserver is a generated GoMock package.
package apiserver

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	offer "github.com/juju/juju/core/offer"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	relation0 "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
)

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetFullRelationUnitChange mocks base method.
func (m *MockRelationService) GetFullRelationUnitChange(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.FullRelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullRelationUnitChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.FullRelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullRelationUnitChange indicates an expected call of GetFullRelationUnitChange.
func (mr *MockRelationServiceMockRecorder) GetFullRelationUnitChange(arg0, arg1, arg2 any) *MockRelationServiceGetFullRelationUnitChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullRelationUnitChange", reflect.TypeOf((*MockRelationService)(nil).GetFullRelationUnitChange), arg0, arg1, arg2)
	return &MockRelationServiceGetFullRelationUnitChangeCall{Call: call}
}

// MockRelationServiceGetFullRelationUnitChangeCall wrap *gomock.Call
type MockRelationServiceGetFullRelationUnitChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetFullRelationUnitChangeCall) Return(arg0 relation0.FullRelationUnitChange, arg1 error) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetFullRelationUnitChangeCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetFullRelationUnitChangeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInScopeUnits mocks base method.
func (m *MockRelationService) GetInScopeUnits(arg0 context.Context, arg1 application.UUID, arg2 relation.UUID) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInScopeUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInScopeUnits indicates an expected call of GetInScopeUnits.
func (mr *MockRelationServiceMockRecorder) GetInScopeUnits(arg0, arg1, arg2 any) *MockRelationServiceGetInScopeUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInScopeUnits", reflect.TypeOf((*MockRelationService)(nil).GetInScopeUnits), arg0, arg1, arg2)
	return &MockRelationServiceGetInScopeUnitsCall{Call: call}
}

// MockRelationServiceGetInScopeUnitsCall wrap *gomock.Call
type MockRelationServiceGetInScopeUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetInScopeUnitsCall) Return(arg0 []unit.Name, arg1 error) *MockRelationServiceGetInScopeUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetInScopeUnitsCall) Do(f func(context.Context, application.UUID, relation.UUID) ([]unit.Name, error)) *MockRelationServiceGetInScopeUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetInScopeUnitsCall) DoAndReturn(f func(context.Context, application.UUID, relation.UUID) ([]unit.Name, error)) *MockRelationServiceGetInScopeUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLifeSuspendedStatusChange mocks base method.
func (m *MockRelationService) GetRelationLifeSuspendedStatusChange(arg0 context.Context, arg1 relation.UUID) (relation0.RelationLifeSuspendedStatusChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLifeSuspendedStatusChange", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationLifeSuspendedStatusChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationLifeSuspendedStatusChange indicates an expected call of GetRelationLifeSuspendedStatusChange.
func (mr *MockRelationServiceMockRecorder) GetRelationLifeSuspendedStatusChange(arg0, arg1 any) *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLifeSuspendedStatusChange", reflect.TypeOf((*MockRelationService)(nil).GetRelationLifeSuspendedStatusChange), arg0, arg1)
	return &MockRelationServiceGetRelationLifeSuspendedStatusChangeCall{Call: call}
}

// MockRelationServiceGetRelationLifeSuspendedStatusChangeCall wrap *gomock.Call
type MockRelationServiceGetRelationLifeSuspendedStatusChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall) Return(arg0 relation0.RelationLifeSuspendedStatusChange, arg1 error) *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall) Do(f func(context.Context, relation.UUID) (relation0.RelationLifeSuspendedStatusChange, error)) *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationLifeSuspendedStatusChange, error)) *MockRelationServiceGetRelationLifeSuspendedStatusChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSettingsForApplication mocks base method.
func (m *MockRelationService) GetSettingsForApplication(arg0 context.Context, arg1 application.UUID) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsForApplication indicates an expected call of GetSettingsForApplication.
func (mr *MockRelationServiceMockRecorder) GetSettingsForApplication(arg0, arg1 any) *MockRelationServiceGetSettingsForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsForApplication", reflect.TypeOf((*MockRelationService)(nil).GetSettingsForApplication), arg0, arg1)
	return &MockRelationServiceGetSettingsForApplicationCall{Call: call}
}

// MockRelationServiceGetSettingsForApplicationCall wrap *gomock.Call
type MockRelationServiceGetSettingsForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetSettingsForApplicationCall) Return(arg0 map[string]any, arg1 error) *MockRelationServiceGetSettingsForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetSettingsForApplicationCall) Do(f func(context.Context, application.UUID) (map[string]any, error)) *MockRelationServiceGetSettingsForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetSettingsForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (map[string]any, error)) *MockRelationServiceGetSettingsForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitSettingsForUnits mocks base method.
func (m *MockRelationService) GetUnitSettingsForUnits(arg0 context.Context, arg1 []unit.Name) (map[unit.Name]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitSettingsForUnits", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitSettingsForUnits indicates an expected call of GetUnitSettingsForUnits.
func (mr *MockRelationServiceMockRecorder) GetUnitSettingsForUnits(arg0, arg1 any) *MockRelationServiceGetUnitSettingsForUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitSettingsForUnits", reflect.TypeOf((*MockRelationService)(nil).GetUnitSettingsForUnits), arg0, arg1)
	return &MockRelationServiceGetUnitSettingsForUnitsCall{Call: call}
}

// MockRelationServiceGetUnitSettingsForUnitsCall wrap *gomock.Call
type MockRelationServiceGetUnitSettingsForUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetUnitSettingsForUnitsCall) Return(arg0 map[unit.Name]map[string]any, arg1 error) *MockRelationServiceGetUnitSettingsForUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetUnitSettingsForUnitsCall) Do(f func(context.Context, []unit.Name) (map[unit.Name]map[string]any, error)) *MockRelationServiceGetUnitSettingsForUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetUnitSettingsForUnitsCall) DoAndReturn(f func(context.Context, []unit.Name) (map[unit.Name]map[string]any, error)) *MockRelationServiceGetUnitSettingsForUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetOfferStatus mocks base method.
func (m *MockStatusService) GetOfferStatus(arg0 context.Context, arg1 offer.UUID) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferStatus indicates an expected call of GetOfferStatus.
func (mr *MockStatusServiceMockRecorder) GetOfferStatus(arg0, arg1 any) *MockStatusServiceGetOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferStatus", reflect.TypeOf((*MockStatusService)(nil).GetOfferStatus), arg0, arg1)
	return &MockStatusServiceGetOfferStatusCall{Call: call}
}

// MockStatusServiceGetOfferStatusCall wrap *gomock.Call
type MockStatusServiceGetOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetOfferStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetOfferStatusCall) Do(f func(context.Context, offer.UUID) (status.StatusInfo, error)) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetOfferStatusCall) DoAndReturn(f func(context.Context, offer.UUID) (status.StatusInfo, error)) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
