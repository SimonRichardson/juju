// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelrelations (interfaces: OfferWatcher,RelationChangesWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package apiserver -destination offer_watcher_mock_test.go github.com/juju/juju/apiserver/facades/controller/crossmodelrelations OfferWatcher,RelationChangesWatcher
//

// Package apiserver is a generated GoMock package.
package apiserver

import (
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	offer "github.com/juju/juju/core/offer"
	relation "github.com/juju/juju/core/relation"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockOfferWatcher is a mock of OfferWatcher interface.
type MockOfferWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockOfferWatcherMockRecorder
}

// MockOfferWatcherMockRecorder is the mock recorder for MockOfferWatcher.
type MockOfferWatcherMockRecorder struct {
	mock *MockOfferWatcher
}

// NewMockOfferWatcher creates a new mock instance.
func NewMockOfferWatcher(ctrl *gomock.Controller) *MockOfferWatcher {
	mock := &MockOfferWatcher{ctrl: ctrl}
	mock.recorder = &MockOfferWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferWatcher) EXPECT() *MockOfferWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockOfferWatcher) Changes() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockOfferWatcherMockRecorder) Changes() *MockOfferWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockOfferWatcher)(nil).Changes))
	return &MockOfferWatcherChangesCall{Call: call}
}

// MockOfferWatcherChangesCall wrap *gomock.Call
type MockOfferWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferWatcherChangesCall) Return(arg0 <-chan struct{}) *MockOfferWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferWatcherChangesCall) Do(f func() <-chan struct{}) *MockOfferWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferWatcherChangesCall) DoAndReturn(f func() <-chan struct{}) *MockOfferWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockOfferWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockOfferWatcherMockRecorder) Kill() *MockOfferWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockOfferWatcher)(nil).Kill))
	return &MockOfferWatcherKillCall{Call: call}
}

// MockOfferWatcherKillCall wrap *gomock.Call
type MockOfferWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferWatcherKillCall) Return() *MockOfferWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferWatcherKillCall) Do(f func()) *MockOfferWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferWatcherKillCall) DoAndReturn(f func()) *MockOfferWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockOfferWatcher) OfferUUID() offer.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(offer.UUID)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockOfferWatcherMockRecorder) OfferUUID() *MockOfferWatcherOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockOfferWatcher)(nil).OfferUUID))
	return &MockOfferWatcherOfferUUIDCall{Call: call}
}

// MockOfferWatcherOfferUUIDCall wrap *gomock.Call
type MockOfferWatcherOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferWatcherOfferUUIDCall) Return(arg0 offer.UUID) *MockOfferWatcherOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferWatcherOfferUUIDCall) Do(f func() offer.UUID) *MockOfferWatcherOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferWatcherOfferUUIDCall) DoAndReturn(f func() offer.UUID) *MockOfferWatcherOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockOfferWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockOfferWatcherMockRecorder) Wait() *MockOfferWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOfferWatcher)(nil).Wait))
	return &MockOfferWatcherWaitCall{Call: call}
}

// MockOfferWatcherWaitCall wrap *gomock.Call
type MockOfferWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferWatcherWaitCall) Return(arg0 error) *MockOfferWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferWatcherWaitCall) Do(f func() error) *MockOfferWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferWatcherWaitCall) DoAndReturn(f func() error) *MockOfferWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationChangesWatcher is a mock of RelationChangesWatcher interface.
type MockRelationChangesWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRelationChangesWatcherMockRecorder
}

// MockRelationChangesWatcherMockRecorder is the mock recorder for MockRelationChangesWatcher.
type MockRelationChangesWatcherMockRecorder struct {
	mock *MockRelationChangesWatcher
}

// NewMockRelationChangesWatcher creates a new mock instance.
func NewMockRelationChangesWatcher(ctrl *gomock.Controller) *MockRelationChangesWatcher {
	mock := &MockRelationChangesWatcher{ctrl: ctrl}
	mock.recorder = &MockRelationChangesWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationChangesWatcher) EXPECT() *MockRelationChangesWatcherMockRecorder {
	return m.recorder
}

// ApplicationToken mocks base method.
func (m *MockRelationChangesWatcher) ApplicationToken() application.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationToken")
	ret0, _ := ret[0].(application.UUID)
	return ret0
}

// ApplicationToken indicates an expected call of ApplicationToken.
func (mr *MockRelationChangesWatcherMockRecorder) ApplicationToken() *MockRelationChangesWatcherApplicationTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationToken", reflect.TypeOf((*MockRelationChangesWatcher)(nil).ApplicationToken))
	return &MockRelationChangesWatcherApplicationTokenCall{Call: call}
}

// MockRelationChangesWatcherApplicationTokenCall wrap *gomock.Call
type MockRelationChangesWatcherApplicationTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationChangesWatcherApplicationTokenCall) Return(arg0 application.UUID) *MockRelationChangesWatcherApplicationTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationChangesWatcherApplicationTokenCall) Do(f func() application.UUID) *MockRelationChangesWatcherApplicationTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationChangesWatcherApplicationTokenCall) DoAndReturn(f func() application.UUID) *MockRelationChangesWatcherApplicationTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Changes mocks base method.
func (m *MockRelationChangesWatcher) Changes() <-chan params.RelationUnitsChange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan params.RelationUnitsChange)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockRelationChangesWatcherMockRecorder) Changes() *MockRelationChangesWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockRelationChangesWatcher)(nil).Changes))
	return &MockRelationChangesWatcherChangesCall{Call: call}
}

// MockRelationChangesWatcherChangesCall wrap *gomock.Call
type MockRelationChangesWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationChangesWatcherChangesCall) Return(arg0 <-chan params.RelationUnitsChange) *MockRelationChangesWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationChangesWatcherChangesCall) Do(f func() <-chan params.RelationUnitsChange) *MockRelationChangesWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationChangesWatcherChangesCall) DoAndReturn(f func() <-chan params.RelationUnitsChange) *MockRelationChangesWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockRelationChangesWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockRelationChangesWatcherMockRecorder) Kill() *MockRelationChangesWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockRelationChangesWatcher)(nil).Kill))
	return &MockRelationChangesWatcherKillCall{Call: call}
}

// MockRelationChangesWatcherKillCall wrap *gomock.Call
type MockRelationChangesWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationChangesWatcherKillCall) Return() *MockRelationChangesWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationChangesWatcherKillCall) Do(f func()) *MockRelationChangesWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationChangesWatcherKillCall) DoAndReturn(f func()) *MockRelationChangesWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationToken mocks base method.
func (m *MockRelationChangesWatcher) RelationToken() relation.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationToken")
	ret0, _ := ret[0].(relation.UUID)
	return ret0
}

// RelationToken indicates an expected call of RelationToken.
func (mr *MockRelationChangesWatcherMockRecorder) RelationToken() *MockRelationChangesWatcherRelationTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationToken", reflect.TypeOf((*MockRelationChangesWatcher)(nil).RelationToken))
	return &MockRelationChangesWatcherRelationTokenCall{Call: call}
}

// MockRelationChangesWatcherRelationTokenCall wrap *gomock.Call
type MockRelationChangesWatcherRelationTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationChangesWatcherRelationTokenCall) Return(arg0 relation.UUID) *MockRelationChangesWatcherRelationTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationChangesWatcherRelationTokenCall) Do(f func() relation.UUID) *MockRelationChangesWatcherRelationTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationChangesWatcherRelationTokenCall) DoAndReturn(f func() relation.UUID) *MockRelationChangesWatcherRelationTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockRelationChangesWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRelationChangesWatcherMockRecorder) Wait() *MockRelationChangesWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRelationChangesWatcher)(nil).Wait))
	return &MockRelationChangesWatcherWaitCall{Call: call}
}

// MockRelationChangesWatcherWaitCall wrap *gomock.Call
type MockRelationChangesWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationChangesWatcherWaitCall) Return(arg0 error) *MockRelationChangesWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationChangesWatcherWaitCall) Do(f func() error) *MockRelationChangesWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationChangesWatcherWaitCall) DoAndReturn(f func() error) *MockRelationChangesWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
