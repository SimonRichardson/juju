// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/handlers/crossmodel (interfaces: CrossModelAuthContextProvider)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodel -destination service_mock_test.go github.com/juju/juju/apiserver/internal/handlers/crossmodel CrossModelAuthContextProvider
//

// Package crossmodel is a generated GoMock package.
package crossmodel

import (
	context "context"
	reflect "reflect"

	facade "github.com/juju/juju/apiserver/facade"
	gomock "go.uber.org/mock/gomock"
)

// MockCrossModelAuthContextProvider is a mock of CrossModelAuthContextProvider interface.
type MockCrossModelAuthContextProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelAuthContextProviderMockRecorder
}

// MockCrossModelAuthContextProviderMockRecorder is the mock recorder for MockCrossModelAuthContextProvider.
type MockCrossModelAuthContextProviderMockRecorder struct {
	mock *MockCrossModelAuthContextProvider
}

// NewMockCrossModelAuthContextProvider creates a new mock instance.
func NewMockCrossModelAuthContextProvider(ctrl *gomock.Controller) *MockCrossModelAuthContextProvider {
	mock := &MockCrossModelAuthContextProvider{ctrl: ctrl}
	mock.recorder = &MockCrossModelAuthContextProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelAuthContextProvider) EXPECT() *MockCrossModelAuthContextProviderMockRecorder {
	return m.recorder
}

// NewCrossModelAuthContext mocks base method.
func (m *MockCrossModelAuthContextProvider) NewCrossModelAuthContext(arg0 context.Context, arg1 string) (facade.CrossModelAuthContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCrossModelAuthContext", arg0, arg1)
	ret0, _ := ret[0].(facade.CrossModelAuthContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCrossModelAuthContext indicates an expected call of NewCrossModelAuthContext.
func (mr *MockCrossModelAuthContextProviderMockRecorder) NewCrossModelAuthContext(arg0, arg1 any) *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCrossModelAuthContext", reflect.TypeOf((*MockCrossModelAuthContextProvider)(nil).NewCrossModelAuthContext), arg0, arg1)
	return &MockCrossModelAuthContextProviderNewCrossModelAuthContextCall{Call: call}
}

// MockCrossModelAuthContextProviderNewCrossModelAuthContextCall wrap *gomock.Call
type MockCrossModelAuthContextProviderNewCrossModelAuthContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall) Return(arg0 facade.CrossModelAuthContext, arg1 error) *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall) Do(f func(context.Context, string) (facade.CrossModelAuthContext, error)) *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall) DoAndReturn(f func(context.Context, string) (facade.CrossModelAuthContext, error)) *MockCrossModelAuthContextProviderNewCrossModelAuthContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
